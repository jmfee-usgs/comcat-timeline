require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
!function() {
  var d3 = {
    version: "3.5.17"
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = this.document;
  function d3_documentElement(node) {
    return node && (node.ownerDocument || node.document || node).documentElement;
  }
  function d3_window(node) {
    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
  }
  if (d3_document) {
    try {
      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
    } catch (e) {
      d3_array = function(list) {
        var i = list.length, array = new Array(i);
        while (i--) array[i] = list[i];
        return array;
      };
    }
  }
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  if (d3_document) {
    try {
      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
    } catch (error) {
      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
      d3_element_prototype.setAttribute = function(name, value) {
        d3_element_setAttribute.call(this, name, value + "");
      };
      d3_element_prototype.setAttributeNS = function(space, local, value) {
        d3_element_setAttributeNS.call(this, space, local, value + "");
      };
      d3_style_prototype.setProperty = function(name, value, priority) {
        d3_style_setProperty.call(this, name, value + "", priority);
      };
    }
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n) if ((b = array[i]) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
        a = c = b;
        break;
      }
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  function d3_number(x) {
    return x === null ? NaN : +x;
  }
  function d3_numeric(x) {
    return !isNaN(x);
  }
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
    } else {
      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
    }
    if (j) return s / j;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    var numbers = [], n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
    } else {
      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
    }
    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
  };
  d3.variance = function(array, f) {
    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
    if (arguments.length === 1) {
      while (++i < n) {
        if (d3_numeric(a = d3_number(array[i]))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    } else {
      while (++i < n) {
        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
          d = a - m;
          m += d / ++j;
          s += d * (a - m);
        }
      }
    }
    if (j > 1) return s / (j - 1);
  };
  d3.deviation = function() {
    var v = d3.variance.apply(this, arguments);
    return v ? Math.sqrt(v) : v;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array, i0, i1) {
    if ((m = arguments.length) < 3) {
      i1 = array.length;
      if (m < 2) i0 = 0;
    }
    var m = i1 - i0, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.transpose = function(matrix) {
    if (!(n = matrix.length)) return [];
    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
        row[j] = matrix[j][i];
      }
    }
    return transpose;
  };
  function d3_transposeLength(d) {
    return d.length;
  }
  d3.zip = function() {
    return d3.transpose(arguments);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  }
  d3.map = function(object, f) {
    var map = new d3_Map();
    if (object instanceof d3_Map) {
      object.forEach(function(key, value) {
        map.set(key, value);
      });
    } else if (Array.isArray(object)) {
      var i = -1, n = object.length, o;
      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
    } else {
      for (var key in object) map.set(key, object[key]);
    }
    return map;
  };
  function d3_Map() {
    this._ = Object.create(null);
  }
  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this._[d3_map_escape(key)];
    },
    set: function(key, value) {
      return this._[d3_map_escape(key)] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      for (var key in this._) values.push(this._[key]);
      return values;
    },
    entries: function() {
      var entries = [];
      for (var key in this._) entries.push({
        key: d3_map_unescape(key),
        value: this._[key]
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
    }
  });
  function d3_map_escape(key) {
    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
  }
  function d3_map_unescape(key) {
    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
  }
  function d3_map_has(key) {
    return d3_map_escape(key) in this._;
  }
  function d3_map_remove(key) {
    return (key = d3_map_escape(key)) in this._ && delete this._[key];
  }
  function d3_map_keys() {
    var keys = [];
    for (var key in this._) keys.push(d3_map_unescape(key));
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this._) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this._) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {
    this._ = Object.create(null);
  }
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(key) {
      this._[d3_map_escape(key += "")] = true;
      return key;
    },
    remove: d3_map_remove,
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this._) f.call(this, d3_map_unescape(key));
    }
  });
  d3.behavior = {};
  function d3_identity(d) {
    return d;
  }
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.slice(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.slice(i + 1);
      type = type.slice(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatches = function(n, s) {
    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
    d3_selectMatches = function(n, s) {
      return d3_selectMatcher.call(n, s);
    };
    return d3_selectMatches(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3.select(d3_document.documentElement);
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: d3_nsXhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) {
        var node = this.node();
        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
      }
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    function create() {
      var document = this.ownerDocument, namespace = this.namespaceURI;
      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
    }
    function createNS() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    }
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(d3_selectionRemove);
  };
  function d3_selectionRemove() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  }
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
        for (i = -1; ++i < n; ) {
          if (node = group[i]) {
            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
              exitNodes[i] = node;
            } else {
              nodeByKeyValue.set(keyValue, node);
            }
            keyValues[i] = keyValue;
          }
        }
        for (i = -1; ++i < m; ) {
          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          } else if (node !== true) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          }
          nodeByKeyValue.set(keyValue, true);
        }
        for (i = -1; ++i < n; ) {
          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    d3_selection_each(this, function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3.select = function(node) {
    var group;
    if (typeof node === "string") {
      group = [ d3_select(node, d3_document) ];
      group.parentNode = d3_document.documentElement;
    } else {
      group = [ node ];
      group.parentNode = d3_documentElement(node);
    }
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group;
    if (typeof nodes === "string") {
      group = d3_array(d3_selectAll(nodes, d3_document));
      group.parentNode = d3_document.documentElement;
    } else {
      group = d3_array(nodes);
      group.parentNode = null;
    }
    return d3_selection([ group ]);
  };
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.slice(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  if (d3_document) {
    d3_selection_onFilters.forEach(function(k) {
      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
    });
  }
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect, d3_event_dragId = 0;
  function d3_event_dragSuppress(node) {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect == null) {
      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
    }
    if (d3_event_dragSelect) {
      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        var off = function() {
          w.on(click, null);
        };
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0) {
        var window = d3_window(container);
        if (window.scrollX || window.scrollY) {
          svg = d3.select("body").append("svg").style({
            position: "absolute",
            top: 0,
            left: 0,
            margin: 0,
            padding: 0,
            border: "none"
          }, "important");
          var ctm = svg[0][0].getScreenCTM();
          d3_mouse_bug44083 = !(ctm.f || ctm.e);
          svg.remove();
        }
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < ε2) {
      S = Math.log(w1 / w0) / ρ;
      i = function(t) {
        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / ρ;
      i = function(t) {
        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      };
    }
    i.duration = S * 1e3;
    return i;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    if (!d3_behavior_zoomWheel) {
      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
        return d3.event.wheelDelta;
      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
        return -d3.event.detail;
      }, "MozMousePixelScroll");
    }
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("interrupt.zoom", function() {
            zoomended(dispatch);
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: null
      };
      scaleTo(+_);
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.duration = function(_) {
      if (!arguments.length) return duration;
      duration = +_;
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function zoomTo(that, p, l, k) {
      that.__chart__ = {
        x: view.x,
        y: view.y,
        k: view.k
      };
      scaleTo(Math.pow(2, k));
      translateTo(center0 = p, l);
      that = d3.select(that);
      if (duration > 0) that = that.transition().duration(duration);
      that.call(zoom.event);
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      if (!zooming++) dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      if (!--zooming) dispatch({
        type: "zoomend"
      }), center0 = null;
    }
    function mousedowned() {
      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
      started();
      zoomstarted(dispatch);
      subject.on(mousedown, null).on(touchstart, started);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0];
            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
            d3_eventPreventDefault();
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        d3_selection_interrupt.call(that);
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) {
      return rgb(color.r, color.g, color.b);
    }
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  function d3_xhrHasResponse(request) {
    var type = request.responseType;
    return type && type !== "text" ? request.response : request.responseText;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.slice(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.slice(j, I - k);
        }
        return text.slice(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && (a = f(a, n++)) == null) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv("	", "text/tab-separated-values");
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function() {
    d3_timer.apply(this, arguments);
  };
  function d3_timer(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
    return timer;
  }
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now(), timer = d3_timer_queueHead;
    while (timer) {
      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
      timer = timer.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.c) {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      } else {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value = +value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
        exponent = false;

       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before, after;
        if (i < 0) {
          var j = exponent ? value.lastIndexOf("e") : -1;
          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
        } else {
          before = value.substring(0, i);
          after = locale_decimal + value.substring(i + 1);
        }
        if (!zfill && comma) before = formatGroup(before, Infinity);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.slice(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.slice(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.slice(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.slice(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x + pointRadius, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return rotate([ 0, 0, 90 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = xm; else x2 = xm;
        if (below) y1 = ym; else y2 = ym;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      root.find = function(point) {
        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
    var minDistance2 = Infinity, closestPoint;
    (function find(node, x1, y1, x2, y2) {
      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
      if (point = node.point) {
        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
        if (distance2 < minDistance2) {
          var distance = Math.sqrt(minDistance2 = distance2);
          x0 = x - distance, y0 = y - distance;
          x3 = x + distance, y3 = y + distance;
          closestPoint = point;
        }
      }
      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
        if (node = children[i & 3]) switch (i & 3) {
         case 0:
          find(node, x1, y1, xm, ym);
          break;

         case 1:
          find(node, xm, y1, x2, ym);
          break;

         case 2:
          find(node, x1, ym, xm, y2);
          break;

         case 3:
          find(node, xm, ym, x2, y2);
          break;
        }
      }
    })(root, x0, y0, x3, y3);
    return closestPoint;
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    a = +a, b = +b;
    return function(t) {
      return a * (1 - t) + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransformPop(s) {
    return s.length ? s.pop() + "," : "";
  }
  function d3_interpolateTranslate(ta, tb, s, q) {
    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
      var i = s.push("translate(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    }
  }
  function d3_interpolateRotate(ra, rb, s, q) {
    if (ra !== rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
    }
  }
  function d3_interpolateSkew(wa, wb, s, q) {
    if (wa !== wb) {
      q.push({
        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
    }
  }
  function d3_interpolateScale(ka, kb, s, q) {
    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: i - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] !== 1 || kb[1] !== 1) {
      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
    }
  }
  function d3_interpolateTransform(a, b) {
    var s = [], q = [];
    a = d3.transform(a), b = d3.transform(b);
    d3_interpolateTranslate(a.translate, b.translate, s, q);
    d3_interpolateRotate(a.rotate, b.rotate, s, q);
    d3_interpolateSkew(a.skew, b.skew, s, q);
    d3_interpolateScale(a.scale, b.scale, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return (x - a) / b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = (b -= a = +a) || 1 / b;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) / b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: groupSums[di]
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        timer = null;
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) {
          alpha = x;
        } else {
          timer.c = null, timer.t = NaN, timer = null;
          event.end({
            type: "end",
            alpha: alpha = 0
          });
        }
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        timer = d3_timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, l = candidates.length, x;
        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
    function pie(data) {
      var n = data.length, values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      index.forEach(function(i) {
        arcs[i] = {
          data: data[i],
          value: v = values[i],
          startAngle: a,
          endAngle: a += v * k + pa,
          padAngle: p
        };
      });
      return arcs;
    }
    pie.value = function(_) {
      if (!arguments.length) return value;
      value = _;
      return pie;
    };
    pie.sort = function(_) {
      if (!arguments.length) return sort;
      sort = _;
      return pie;
    };
    pie.startAngle = function(_) {
      if (!arguments.length) return startAngle;
      startAngle = _;
      return pie;
    };
    pie.endAngle = function(_) {
      if (!arguments.length) return endAngle;
      endAngle = _;
      return pie;
    };
    pie.padAngle = function(_) {
      if (!arguments.length) return padAngle;
      padAngle = _;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      if (!(n = data.length)) return data;
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var m = series[0].length, n, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = root.y = 0;
      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
    return domain;
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(1, base * n / scale.ticks().length);
      return function(d) {
        var i = d / pow(Math.round(log(d)));
        if (i * base < base - .5) i *= base;
        return i <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
      0) : (stop - start) / (domain.length - 1 + padding);
      range = steps(start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundPoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
      0) : (stop - start) / (domain.length - 1 + padding) | 0;
      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
      rangeBand = 0;
      ranger = {
        t: "rangeRoundPoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  function d3_zero() {
    return 0;
  }
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
    function arc() {
      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
        if (!cw) p1 *= -1;
        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
      }
      if (r1) {
        x0 = r1 * Math.cos(a0 + p1);
        y0 = r1 * Math.sin(a0 + p1);
        x1 = r1 * Math.cos(a1 - p1);
        y1 = r1 * Math.sin(a1 - p1);
        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
          var h1 = (a0 + a1) / 2;
          x0 = r1 * Math.cos(h1);
          y0 = r1 * Math.sin(h1);
          x1 = y1 = null;
        }
      } else {
        x0 = y0 = 0;
      }
      if (r0) {
        x2 = r0 * Math.cos(a1 - p0);
        y2 = r0 * Math.sin(a1 - p0);
        x3 = r0 * Math.cos(a0 + p0);
        y3 = r0 * Math.sin(a0 + p0);
        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
          var h0 = (a0 + a1) / 2;
          x2 = r0 * Math.cos(h0);
          y2 = r0 * Math.sin(h0);
          x3 = y3 = null;
        }
      } else {
        x2 = y2 = 0;
      }
      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
        cr = r0 < r1 ^ cw ? 0 : 1;
        var rc1 = rc, rc0 = rc;
        if (da < π) {
          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
        }
        if (x1 != null) {
          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
          if (rc === rc1) {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
          } else {
            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
          }
        } else {
          path.push("M", x0, ",", y0);
        }
        if (x3 != null) {
          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
          if (rc === rc0) {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          } else {
            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
          }
        } else {
          path.push("L", x2, ",", y2);
        }
      } else {
        path.push("M", x0, ",", y0);
        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
        path.push("L", x2, ",", y2);
        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
      }
      path.push("Z");
      return path.join("");
    }
    function circleSegment(r1, cw) {
      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.cornerRadius = function(v) {
      if (!arguments.length) return cornerRadius;
      cornerRadius = d3_functor(v);
      return arc;
    };
    arc.padRadius = function(v) {
      if (!arguments.length) return padRadius;
      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.padAngle = function(v) {
      if (!arguments.length) return padAngle;
      padAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcAuto = "auto";
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_arcPadAngle(d) {
    return d && d.padAngle;
  }
  function d3_svg_arcSweep(x0, y0, x1, y1) {
    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
  }
  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.length > 1 ? points.join("L") : points + "Z";
  }
  function d3_svg_lineLinearClosed(points) {
    return points.join("L") + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] - halfπ;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  d3_selectionPrototype.transition = function(name) {
    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_selectionPrototype.interrupt = function(name) {
    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
  };
  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
  function d3_selection_interruptNS(ns) {
    return function() {
      var lock, activeId, active;
      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
        active.timer.c = null;
        active.timer.t = NaN;
        if (--lock.count) delete lock[activeId]; else delete this[ns];
        lock.active += .5;
        active.event && active.event.interrupt.call(this, this.__data__, active.index);
      }
    };
  }
  function d3_transition(groups, ns, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.namespace = ns;
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection, name) {
    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node[ns][id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, ns, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.namespace, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node[ns][id].tween.remove(name);
    } : function(node) {
      node[ns][id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id, ns = groups.namespace;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node[ns][id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    var ns = this.namespace;
    return this.each("end.transition", function() {
      var p;
      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node[ns][id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node[ns][id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 1) return this.node()[ns][id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node[ns][id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id, ns = this.namespace;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      try {
        d3_transitionInheritId = id;
        d3_selection_each(this, function(node, i, j) {
          d3_transitionInherit = node[ns][id];
          type.call(node, node.__data__, i, j);
        });
      } finally {
        d3_transitionInherit = inherit;
        d3_transitionInheritId = inheritId;
      }
    } else {
      d3_selection_each(this, function(node) {
        var transition = node[ns][id];
        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = node[ns][id0];
          d3_transitionNode(node, i, ns, id1, {
            time: transition.time,
            ease: transition.ease,
            delay: transition.delay + transition.duration,
            duration: transition.duration
          });
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, ns, id1);
  };
  function d3_transitionNamespace(name) {
    return name == null ? "__transition__" : "__transition_" + name + "__";
  }
  function d3_transitionNode(node, i, ns, id, inherit) {
    var lock = node[ns] || (node[ns] = {
      active: 0,
      count: 0
    }), transition = lock[id], time, timer, duration, ease, tweens;
    function schedule(elapsed) {
      var delay = transition.delay;
      timer.t = delay + time;
      if (delay <= elapsed) return start(elapsed - delay);
      timer.c = start;
    }
    function start(elapsed) {
      var activeId = lock.active, active = lock[activeId];
      if (active) {
        active.timer.c = null;
        active.timer.t = NaN;
        --lock.count;
        delete lock[activeId];
        active.event && active.event.interrupt.call(node, node.__data__, active.index);
      }
      for (var cancelId in lock) {
        if (+cancelId < id) {
          var cancel = lock[cancelId];
          cancel.timer.c = null;
          cancel.timer.t = NaN;
          --lock.count;
          delete lock[cancelId];
        }
      }
      timer.c = tick;
      d3_timer(function() {
        if (timer.c && tick(elapsed || 1)) {
          timer.c = null;
          timer.t = NaN;
        }
        return 1;
      }, 0, time);
      lock.active = id;
      transition.event && transition.event.start.call(node, node.__data__, i);
      tweens = [];
      transition.tween.forEach(function(key, value) {
        if (value = value.call(node, node.__data__, i)) {
          tweens.push(value);
        }
      });
      ease = transition.ease;
      duration = transition.duration;
    }
    function tick(elapsed) {
      var t = elapsed / duration, e = ease(t), n = tweens.length;
      while (n > 0) {
        tweens[--n].call(node, e);
      }
      if (t >= 1) {
        transition.event && transition.event.end.call(node, node.__data__, i);
        if (--lock.count) delete lock[id]; else delete node[ns];
        return 1;
      }
    }
    if (!transition) {
      time = inherit.time;
      timer = d3_timer(schedule, 0, time);
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        timer: timer,
        delay: inherit.delay,
        duration: inherit.duration,
        ease: inherit.ease,
        index: i
      };
      inherit = null;
      ++lock.count;
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
        if (orient === "bottom" || orient === "top") {
          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
        } else {
          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
        }
        lineEnter.attr(y2, sign * innerTickSize);
        textEnter.attr(y1, sign * tickSpacing);
        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1, scale0);
        }
        tickEnter.call(tickTransform, scale0, scale1);
        tickUpdate.call(tickTransform, scale1, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = d3_array(arguments);
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x0, x1) {
    selection.attr("transform", function(d) {
      var v0 = x0(d);
      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y0, y1) {
    selection.attr("transform", function(d) {
      var v0 = y0(d);
      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) this.d3 = d3, define(d3); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
}();
},{}],2:[function(require,module,exports){
'use strict';

var _ACCORDION_OPTIONS,
    _ADD_ACCORDION_OPTIONS,
    _ACCORDION_CLOSED,
    _ACCORDION_TOGGLE,
    _ACCORDION_CONTENT;


_ACCORDION_OPTIONS = {
  accordions: null,
  el: null
};

_ADD_ACCORDION_OPTIONS = {
  toggleText: 'Details',
  toggleElement: 'span',
  content: 'Contents',
  classes: 'accordion-standard'
};

_ACCORDION_CLOSED = 'accordion-closed';
_ACCORDION_TOGGLE = 'accordion-toggle';
_ACCORDION_CONTENT = 'accordion-content';


/**
 * Copy properties from one or more objects onto another object.
 *
 * @param dst {Object}
 *        Destination object where properties are copied
 * @param varargs {Object...}
 *        Variable number of objects where properties are copied from.
 *        Objects earlier in the arguments list have their properties
 *        overridden by objects later in the arguments list.
 * @return dst.
 */
var _extend = function (dst) {
  for (var i=1, len=arguments.length; i<len; i++) {
    var o = arguments[i];
    for (var prop in o) {
      dst[prop] = o[prop];
    }
  }
  return dst;
};

var _onClick = function (evt) {
  var target = evt.target;

  if (target.classList.contains(_ACCORDION_TOGGLE)) {
    target.parentElement.classList.toggle(_ACCORDION_CLOSED);
  }
};


var Accordion = function (options) {
  var _this,
      _initialize,

      _el,
      _options;


  _this = {
    addAccordion: null,
    destroy: null
  };

  _initialize = function (options) {
    var i,
        len;

    _options = _extend({}, _ACCORDION_OPTIONS, options);
    _el = _options.el || document.createElement('section');
    _el.addEventListener('click', _onClick);

    if (options.accordions) {
      len = options.accordions.length;
      for (i = 0; i < len; i++) {
        _this.addAccordion(options.accordions[i]);
      }
    }
  };


  /*
   * this will build the markup for an accordion element
   */
  _this.addAccordion = function (options) {
    var accordion,
        title,
        content;

    options = _extend({}, _ADD_ACCORDION_OPTIONS, options);

    accordion = document.createElement('section');
    accordion.className = 'accordion ' + options.classes;

    title = document.createElement(options.toggleElement);
    title.className = _ACCORDION_TOGGLE;
    title.innerHTML = options.toggleText;
    accordion.appendChild(title);

    content = document.createElement('div');
    content.className = _ACCORDION_CONTENT;

    // Support legacy "contentText" if still present, but prefert "content"
    if (options.contentText) {
      content.innerHTML = options.contentText;
    } else {
      // Check if string content or DOM content
      if (typeof options.content === 'string') {
        content.innerHTML = options.content;
      } else {
        content.appendChild(options.content);
      }
    }

    accordion.appendChild(content);

    _el.appendChild(accordion);
  };

  _this.destroy = function () {
    _el.removeEventListener('click', _onClick);

    _el = null;
    _options = null;

    _this = null;
  };


  _initialize(options);
  options = null;
  return _this;
};

module.exports = Accordion;

},{}],3:[function(require,module,exports){
'use strict';



/**
 * Simulates a class list.
 *
 * If changes are made outside this object, resync using synchronize().
 */
var ClassList = function (el) {
  var _this,
      _initialize,
      // variables
      _classList,
      _syncValue,
      // methods
      _sync;


  _this = {};

  /**
   * Initialize ClassList.
   */
  _initialize = function () {
    _syncValue = null;
    _classList = [];
    _this.length = 0;

    _sync(true);
  };


  /**
   * Synchronize with element state.
   *
   * @param load {Boolean}
   *        when true, read state from element.
   *        otherwise, set element state.
   */
  _sync = function (load) {
    var value;

    if (load) {
      // read from element
      value = el.getAttribute('class');
      if (value === null) {
        _classList = [];
        _this.length = 0;
      } else {
        value = '' + value;
        _classList = value.split(' ');
        _this.length = _classList.length;
      }
    } else {
      // update element
      value = _classList.join(' ');
      el.setAttribute('class', value);
    }
    _syncValue = value;
  };

  /**
   * Add a class.
   *
   * @param className {String}
   *        class to add.
   */
  _this.add = function (className) {
    var pos;
    // load from element
    _sync(true);
    pos = _classList.indexOf(className);
    if (pos === -1) {
      _classList.push(className);
      _this.length++;
      // update element
      _sync(false);
    }
  };

  /**
   * Check if element has a class.
   *
   * @param className {String}
   *        class to add.
   * @return {Boolean}
   *         true if element list includes class.
   */
  _this.contains = function (className) {
    var pos;
    // load from element
    _sync(true);
    pos = _classList.indexOf(className);
    return (pos !== -1);
  };

  /**
   * Access a class.
   *
   * @param pos {String}
   *        index in list [0,ClassList.length-1].
   * @return className in list, or null if out of range.
   */
  _this.item = function (pos) {
    // load from element
    _sync(true);
    if (pos < 0 || pos >= _classList.length) {
      return null;
    }
    return _classList[pos];
  };

  /**
   * Remove a class.
   *
   * @param className {String}
   *        class to remove.
   */
  _this.remove = function (className) {
    var pos;
    // load from element
    _sync(true);
    pos = _classList.indexOf(className);
    if (pos !== -1) {
      _classList.splice(pos, 1);
      _this.length--;
      // update element
      _sync(false);
    }
  };

  /**
   * Toggle a class.
   *
   * Add is not in list, otherwise remove.
   *
   * @param className {String}
   *        class to add.
   */
  _this.toggle = function (className) {
    if (_this.has(className)) {
      _this.remove(className);
    } else {
      _this.add(className);
    }
  };


  _initialize();
  return _this;
};


/**
 * Add classList if element doesn't natively support classList.
 *
 * Some SVG implementations do not support classList.
 *
 * @param el {Element}
 *        element to polyfill.
 */
ClassList.polyfill = function (el) {
  if (!el.classList) {
    el.classList = ClassList(el);
  }
};


module.exports = ClassList;

},{}],4:[function(require,module,exports){
'use strict';

var d3 = require('d3'),
    ClassList = require('./ClassList'),
    D3SubView = require('d3/D3SubView'),
    Util = require('util/Util');


/**
 * Line view for a D3 plot.
 *
 * @param options {Object}
 *        options are passed to D3SubView.
 * @param options.data {Array<Array<Number>>}
 *        default [].
 *        array of arrays of x, y coordinates:
 *        [ [x0, y0], [x1, y1], ... ]
 * @param lineFormat {D3 Line}
 *        default d3.svg.line().
 * @param pointRadius {Number}
 *        default 5.
 *        radius for points.
 * @param showLine {Boolean}
 *        default true.
 *        whether to plot line.
 * @param showPoints {Boolean}
 *        default true.
 *        whether to plot points.
 */
var D3LineView = function (options) {
  var _this,
      _initialize,
      // variables
      _el,
      _legend,
      _legendLine,
      _legendPoint,
      _legendText,
      _line,
      _lineFormat,
      _x,
      _y,
      // methods
      _getX,
      _getY;


  _this = D3SubView(options);

  /**
   * Initialize view.
   */
  _initialize = function (options) {
    _this.model.set(Util.extend({
      data: [],
      pointRadius: 5,
      showLine: true,
      showPoints: true,
      showLegendPoint: true,
    }, options, _this.model.get()), {silent: true});

    ClassList.polyfill(_this.el);
    _this.el.classList.add('D3LineView');
    _el = d3.select(_this.el);

    if (_this.legend) {
      ClassList.polyfill(_this.legend);
      _this.legend.classList.add('D3LineView');
      _legend = d3.select(_this.legend);
      _legendLine = _legend.append('path')
          .attr('class', 'line');
      _legendText = _legend.append('text')
          .attr('class', 'text');
    } else {
      _legend = null;
      _legendLine = null;
      _legendText = null;
    }

    _line = _el.append('path')
        .attr('class', 'line')
        .attr('clip-path', 'url(#plotAreaClip)');

    _lineFormat = options.lineFormat || d3.svg.line();
    _lineFormat.x(_this.getScaleX);
    _lineFormat.y(_this.getScaleY);
  };

  /**
   * Convert a data coordinate to a plot coordinate.
   *
   * @param d {Array<Number>}
   *        data point.
   * @return {Number} x plot coordinate.
   */
  _this.getScaleX = function (d) {
    return _x(d[0]);
  };

  /**
   * Convert a data coordinate to a plot coordinate.
   *
   * @param d {Array<Number>}
   *        data point.
   * @return {Number} y plot coordinate.
   */
  _this.getScaleY = function (d) {
    return _y(d[1]);
  };

  /**
   * Convert an x data coordinate from a data object.
   *
   * @param d {Array<Number>}
   *        data point.
   * @return {Number} x plot coordinate.
   */
  _getX = function (d) {
    return d[0];
  };

  /**
   * Get a y data coordinate from a data object.
   *
   * @param d {Array<Number>}
   *        data point.
   * @return {Number} y plot coordinate.
   */
  _getY = function (d) {
    return d[1];
  };

  /**
   * Destroy view.
   */
  _this.destroy = Util.compose(function () {
    var points;

    if (_el) {
      // remove point event listeners
      points = _el.selectAll('.point')
          .on('mouseout', null)
          .on('mouseover', null);
      _el = null;
    }

    if (_legend) {
      _legendLine = null;
      _legendText = null;
    }

    _line = null;
    _lineFormat = null;

    _x = null;
    _y = null;
    _this = null;
  }, _this.destroy);

  /**
   * Format x value for tooltip.
   *
   * @param x {Number}
   *        value to format.
   * @return {String}
   *         formatted number.
   */
  _this.formatX = function (x) {
    return x;
  };

  /**
   * Format y value for tooltip.
   *
   * @param y {Number}
   *        value to format.
   * @return {String}
   *         formatted number.
   */
  _this.formatY = function (y) {
    return y;
  };

  /**
   * X extent for view.
   *
   * @return {Array<Number>}
   *         x extent for view.
   */
  _this.getXExtent = function () {
    return d3.extent(_this.model.get('data'), _getX);
  };

  /**
   * Y extent for view.
   *
   * @return {Array<Number>}
   *         y extent for view.
   */
  _this.getYExtent = function () {
    return d3.extent(_this.model.get('data'), _getY);
  };

  /**
   * Point mouseout event handler.
   */
  _this.onPointOut = function () {
    var point;

    point = d3.event.target;
    ClassList.polyfill(point);
    point.classList.remove('mouseover');

    // clear previous tooltip
    _this.view.showTooltip(null, null);
  };

  /**
   * Point mouseover event handler.
   *
   * @param coords {Array<Number>}
   *        x, y coordinate of point.
   */
  _this.onPointOver = function (coords) {
    var point;

    point = d3.event.target;
    ClassList.polyfill(point);
    point.classList.add('mouseover');

    _this.view.showTooltip(coords, [
      {text: _this.model.get('label')},
      [
        {class: 'label', text: _this.view.model.get('xLabel') + ': '},
        {class: 'value', text: _this.formatX(_getX(coords))}
      ],
      [
        {class: 'label', text: _this.view.model.get('yLabel') + ': '},
        {class: 'value', text: _this.formatY(_getY(coords))}
      ]
    ]);
  };

  _this.plotPoints = function (points) {
    points.enter()
        .append('svg:circle')
        .attr('class', 'point')
        .on('mouseout', _this.onPointOut)
        .on('mouseover', _this.onPointOver);

    points.attr('r', _this.model.get('pointRadius'))
        .attr('cx', _this.getScaleX)
        .attr('cy', _this.getScaleY);

    points.exit()
        .on('mouseout', null)
        .on('mouseover', null)
        .remove();
  };

  /**
   * Render sub view.
   * Element has already been attached to view.
   */
  _this.render = function () {
    var data,
        points;

    data = _this.model.get('data');
    _x = _this.view.model.get('xAxisScale');
    _y = _this.view.model.get('yAxisScale');

    // update legend
    if (_this.legend) {
      _legendLine.attr('d', 'M0,-3L25,-3');

      _legendPoint = _legend.selectAll('.point');
      if (!_this.model.get('showLegendPoint')) {
        _legendPoint.remove();
      } else {
        if (_legendPoint.empty()) {
          _legendPoint = _legend.append('svg:circle')
              .attr('class', 'point');
        }

        _legendPoint
            .attr('r', _this.model.get('pointRadius'))
            .attr('cx', 12.5)
            .attr('cy', -3);
      }

      _legendText
          .text(_this.model.get('label'))
          .attr('dx', 30);
    }

    // update line
    if (data.length === 0 || !_this.model.get('showLine')) {
      _line.attr('d', null);
    } else {
      _line.attr('d', _lineFormat(data));
    }

    // update points
    points = _el.selectAll('.point')
        .data(data);
    if (!_this.model.get('showPoints')) {
      points.remove();
    } else {
      _this.plotPoints(points);
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = D3LineView;

},{"./ClassList":3,"d3":1,"d3/D3SubView":5,"util/Util":"util/Util"}],5:[function(require,module,exports){
'use strict';

var d3 = require('d3'),
    ClassList = require('./ClassList'),
    Util = require('util/Util'),
    View = require('mvc/View');


var ID_SEQUENCE = 0;


/**
 * Sub view for a D3 plot.
 *
 * Manages mouseover, mouseout, click events for view.
 * mouseover and mouseout toggle a "mouseover" class on view.
 * click triggers "click" event.
 *
 * When added to a D3View, "click" event triggers "select" in collection.
 * D3View calls onSelect, onDeselect methods when collection selection changes.
 *
 * Subclasses should override at least getXExtent(), getYExtent(), render(view).
 *
 * @param options {Object}
 *        all options are passed to View.
 * @param options.el {SVGElement}
 *        default svg:g.
 * @param options.legend {SVGElement}
 *        default svg:g.
 *        set to null for no legend.
 * @param options.className {String}
 *        default null.
 *        class added to el and legend.
 */
var D3SubView = function (options) {
  var _this,
      _initialize,
      // variables
      _el,
      _legend;


  _this = View(Util.extend({
    el: document.createElementNS('http://www.w3.org/2000/svg', 'g'),
  }, options));

  /**
   * Initialize view.
   */
  _initialize = function (options) {
    options = Util.extend({
      className: null,
      legend: document.createElementNS('http://www.w3.org/2000/svg', 'g')
    }, options);

    // ensure views have a unique id
    _this.id = options.id || (ID_SEQUENCE++);
    _this.view = options.view;

    // reference to view from element
    _this.el.view = _this;

    ClassList.polyfill(_this.el);
    _el = d3.select(_this.el);
    _el.on('click', _this.onClick);
    _el.on('mouseout', _this.onMouseOut);
    _el.on('mouseover', _this.onMouseOver);

    _this.legend = options.legend;
    if (_this.legend) {
      ClassList.polyfill(_this.legend);
      _legend = d3.select(_this.legend);
      _legend.on('click', _this.onClick);
      _legend.on('mouseout', _this.onMouseOut);
      _legend.on('mouseover', _this.onMouseOver);
    }

    if (options.className) {
      _this.el.classList.add(options.className);
      if (_this.legend) {
        _this.legend.classList.add(options.className);
      }
    }
  };

  /**
   * Destroy view.
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      // already destroyed
      return;
    }

    if (_el) {
      _el.on('click', null);
      _el.on('mouseout', null);
      _el.on('mouseover', null);
      _el = null;
    }
    if (_this.legend) {
      _legend.on('click', null);
      _legend.on('mouseout', null);
      _legend.on('mouseover', null);
      _legend = null;
    }

    _this.el.view = null;
    _this = null;
  }, _this.destroy);

  /**
   * X extent for view.
   *
   * @return {Array<Number>}
   *         x extent for view.
   */
  _this.getXExtent = function () {
    return [];
  };

  /**
   * Y extent for view.
   *
   * @return {Array<Number>}
   *         y extent for view.
   */
  _this.getYExtent = function () {
    return [];
  };

  /**
   * Click event handler.
   */
  _this.onClick = function () {
    _this.trigger('click');
  };

  /**
   * Deselect event handler.
   */
  _this.onDeselect = function () {
    _this.el.classList.remove('selected');
    if (_this.legend) {
      _this.legend.classList.remove('selected');
    }
  };

  /**
   * Mouseout event handler.
   */
  _this.onMouseOut = function () {
    _this.el.classList.remove('mouseover');
    if (_this.legend) {
      _this.legend.classList.remove('mouseover');
    }
  };

  /**
   * Mouseover event handler.
   */
  _this.onMouseOver = function () {
    _this.el.classList.add('mouseover');
    if (_this.legend) {
      _this.legend.classList.add('mouseover');
    }
  };

  /**
   * Select event handler.
   */
  _this.onSelect = function () {
    _this.el.classList.add('selected');
    if (_this.legend) {
      _this.legend.classList.add('selected');
    }
  };

  /**
   * Render sub view.
   * Element has already been attached to view.
   */
  _this.render = function () {
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = D3SubView;

},{"./ClassList":3,"d3":1,"mvc/View":"mvc/View","util/Util":"util/Util"}],6:[function(require,module,exports){
'use strict';


/**
 * Format text content.
 *
 * @param el {D3Element}
 *        tooltip container element.
 * @param data {Array<Object|Array>}
 *        data passed to showTooltip.
 *        this implementation expects objects (or arrays of objects):
 *        obj.class {String} class attribute for text|tspan.
 *        obj.text {String} content for text|tspan.
 */
var _formatText = function (el, data) {
  var y;

  // add content to tooltip
  data = data.map(function (line) {
    var text = el.append('text');
    if (typeof line.forEach === 'function') {
      // array of components:
      line.forEach(function (l) {
        text.append('tspan').attr('class', l.class || '').text(l.text);
      });
    } else {
      text.attr('class', line.class || '').text(line.text);
    }
    return text;
  });
  // position lines in tooltip
  y = 0;
  data.forEach(function (line) {
    var bbox = line.node().getBBox();
    y += bbox.height;
    line.attr('y', y);
  });
};

/**
 * Persistently tries to get the bounding box for the given element.
 *
 * @param element {SVGText}
 *      The element for which to get the bounding box.
 * @return {Object}
 *      A bounding box object with x, y, width, height attributes
 */
var _getBBox = function (element) {
  var bbox;

  try {
    bbox = element.getBBox();
  } catch (e) {
    // Ignore
  }

  if (!bbox) {
    try {
      bbox = element.getBoundingClientRect();
    } catch (e) {
      // Ignore
    }
  }

  if (!bbox) {
    bbox = {x: 0, y: 0, width: 0, height: 0};
  }

  return bbox;
};

/**
 * Pad an extent.
 *
 * @param extent {Array<Number>}
 *        first entry should be minimum.
 *        last entry should be maximum.
 * @param amount {Number}
 *        percentage of range to pad.
 *        For example: 0.05 = +/- 5% of range.
 * @return {Array<Number>}
 *         padded extent.
 */
var _padExtent = function (extent, amount) {
  var start = extent[0],
      end = extent[extent.length - 1],
      range = end - start,
      pad = range * amount;
  return [start - pad, end + pad];
};

/**
 * Pad a log based extent.
 *
 * Similar to _padExtent(), but padding occurs in log space.
 *
 * @param extent {Array<Number>}
 *        first entry should be minimum.
 *        last entry should be maximum.
 * @param amount {Number}
 *        percentage of range to pad.
 *        For example: 0.05 = +/- 5% of range.
 * @return {Array<Number>}
 *         padded extent.
 */
var _padLogExtent = function (extent, amount) {
  var base,
      baseLog,
      end,
      start;

  // convert min/max to base 10
  base = 10;
  baseLog = Math.log(base);
  start = Math.log(extent[0]) / baseLog;
  end = Math.log(extent[extent.length - 1]) / baseLog;
  extent = _padExtent([start, end], amount);
  return [Math.pow(base, extent[0]), Math.pow(base, extent[extent.length - 1])];
};


var D3Util = {
  formatText: _formatText,
  getBBox: _getBBox,
  padExtent: _padExtent,
  padLogExtent: _padLogExtent
};


module.exports = D3Util;

},{}],7:[function(require,module,exports){
'use strict';

var d3 = require('d3'),
    Collection = require('mvc/Collection'),
    D3Util = require('./D3Util'),
    Util = require('util/Util'),
    View = require('mvc/View');


/**
 * View for a D3 plot.
 *
 * @param options {Object}
 *        options are passed to View.
 * @param options.clickToSelect {Boolean}
 *        default true.
 *        when true, clicking a view causes it to be selected in the
 *        views collection.
 * @param options.height {Number}
 *        default 480.
 *        overall (viewbox) height of svg element.
 * @param options.legendPosition {String}
 *        default 'topleft'.
 *        one of (topright|topleft|bottomright|bottomleft).
 *        position of legend element.
 * @param options.marginBottom {Number}
 *        default 0.
 * @param options.marginLeft {Number}
 *        default 0.
 * @param options.marginRight {Number}
 *        default 0.
 * @param options.marginTop {Number}
 *        default 0.
 * @param options.paddingBottom {Number}
 *        default 80.
 * @param options.paddingLeft {Number}
 *        default 80.
 * @param options.paddingRight {Number}
 *        default 20.
 * @param options.paddingTop {Number}
 *        default 50.
 * @param options.title {String}
 *        title for plot.
 * @param options.tooltipOffset {Number}
 *        default 10.
 *        x/y distance from tooltip coordinate.
 * @param options.tooltipPadding {Number}
 *        default 5.
 *        padding around tooltip content.
 * @param options.width {Number}
 *        default 640.
 *        width of svg viewBox.
 * @param options.xAxisFormat {Function|String}
 *        default null.
 *        x axis tickFormat.
 * @param options.xAxisPadding {Number}
 *        default 0.05.
 *        pad extents by this ratio.
 *        For example:  0.05 pads the x axis extent by 5% of the range.
 * @param options.xAxisScale {d3.scale}
 *        default d3.scale.linear().
 * @param options.xAxisTicks {Function(extent)|Array<Number>}
 *        default null.
 *        x axis tick values.
 * @param optoins.xExtent {Array<Number>}
 *        default null.
 *        explicit x extent for graph, default is auto.
 * @param options.xLabel {String}
 *        label for x axis.
 * @param options.yAxisFormat {Function|String}
 *        default null.
 *        y axis tickFormat.
 * @param options.yAxisPadding {Number}
 *        default 0.05.
 *        pad extents by this ratio.
 *        For example:  0.05 pads the y axis extent by 5% of the range.
 * @param options.yAxisScale {d3.scale}
 *        default d3.scale.linear().
 * @param options.yAxisTicks {Function(extent)|Array<Number>}
 *        default null.
 *        y axis tick values.
 * @param optoins.yExtent {Array<Number>}
 *        default null.
 *        explicit y extent for graph, default is auto.
 * @param options.yLabel {String}
 *        label for y axis.
 */
var D3View = function (options) {
  var _this,
      _initialize,
      // variables
      _firstRender,
      _innerFrame,
      _legend,
      _margin,
      _outerFrame,
      _padding,
      _plotArea,
      _plotAreaClip,
      _plotTitle,
      _svg,
      _tooltip,
      _xAxis,
      _xAxisEl,
      _xAxisLabel,
      _xEl,
      _yAxis,
      _yAxisEl,
      _yAxisLabel,
      _yEl;


  _this = View(options);

  /**
   * Initialize view.
   */
  _initialize = function (options) {
    var el;

    options = options || {};
    _firstRender = true;

    _this.model.set(Util.extend({
      clickToSelect: true,
      height: 480,
      legendPosition: 'topright',
      legendOffset: 20,
      marginBottom: 0,
      marginLeft: 0,
      marginRight: 0,
      marginTop: 0,
      paddingBottom: 80,
      paddingLeft: 80,
      paddingRight: 20,
      paddingTop: 50,
      pointRadius: 3,
      title: '',
      tooltipOffset: 10,
      tooltipPadding: 5,
      width: 640,
      xAxisFormat: null,
      xAxisPadding: 0.05,
      xAxisScale: d3.scale.linear(),
      xAxisTicks: null,
      xExtent: null,
      xLabel: '',
      yAxisFormat: null,
      yAxisPadding: 0.05,
      yAxisScale: d3.scale.linear(),
      yAxisTicks: null,
      yExtent: null,
      yLabel: ''
    }, options), {silent: true});

    el = _this.el;
    el.classList.add('D3View');
    el.innerHTML =
          '<svg xmlns="http://www.w3.org/2000/svg">' +
            '<defs>' +
              '<clipPath id="plotAreaClip">' +
                '<rect x="0" y="0"></rect>' +
              '</clipPath>' +
            '</defs>' +
            '<g class="margin">' +
              '<rect class="outer-frame"></rect>' +
              '<text class="plot-title" text-anchor="middle"></text>' +
              '<g class="padding">' +
                '<rect class="inner-frame"></rect>' +
                '<g class="legend"></g>' +
                '<g class="x">' +
                  '<g class="axis"></g>' +
                  '<text class="label" text-anchor="middle"></text>' +
                '</g>' +
                '<g class="y">' +
                  '<g class="axis"></g>' +
                  '<text class="label" text-anchor="middle"' +
                      ' transform="rotate(-90)"></text>' +
                '</g>' +
                '<g class="plot"></g>' +
                '<g class="tooltip"></g>' +
              '</g>' +
            '</g>' +
          '</svg>';

    _svg = el.querySelector('svg');
    _plotAreaClip = _svg.querySelector('#plotAreaClip > rect');
    _outerFrame = _svg.querySelector('.outer-frame');
    _innerFrame = _svg.querySelector('.inner-frame');
    _margin = _svg.querySelector('.margin');
    _plotTitle = _margin.querySelector('.plot-title');
    _padding = _margin.querySelector('.padding');
    _legend = _padding.querySelector('.legend');
    _xEl = _padding.querySelector('.x');
    _xAxisEl = _xEl.querySelector('.axis');
    _xAxisLabel = _xEl.querySelector('.label');
    _yEl = _padding.querySelector('.y');
    _yAxisEl = _yEl.querySelector('.axis');
    _yAxisLabel = _yEl.querySelector('.label');
    _plotArea = _padding.querySelector('.plot');
    _tooltip = _padding.querySelector('.tooltip');

    _this.views = Collection([]);
    _this.views.on('add', _this.onAdd);
    _this.views.on('deselect', _this.onDeselect);
    _this.views.on('remove', _this.onRemove);
    _this.views.on('reset', _this.onReset);
    _this.views.on('select', _this.onSelect);

    _xAxis = d3.svg.axis().orient('bottom').outerTickSize(0);
    _yAxis = d3.svg.axis().orient('left').outerTickSize(0);
  };


  /**
   * Destroy view.
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      // already destroyed
      return;
    }

    _this.views.off();
    _this.views.destroy();

    _this.views = null;
    _innerFrame = null;
    _legend = null;
    _margin = null;
    _outerFrame = null;
    _padding = null;
    _plotArea = null;
    _plotAreaClip = null;
    _plotTitle = null;
    _svg = null;
    _tooltip = null;
    _xAxis = null;
    _xAxisEl = null;
    _xAxisLabel = null;
    _xEl = null;
    _yAxis = null;
    _yAxisEl = null;
    _yAxisLabel = null;
    _yEl = null;
    _this = null;
  }, _this.destroy);

  _this.getLegendClass = function (/*data, index, scope*/) {
    return 'legend-content';
  };

  /**
   * Views collection add handler.
   *
   * @param views {Array<D3SubView>}
   *        views that were added.
   */
  _this.onAdd = function (views, dontrender) {
    views.forEach(function (view) {
      view._d3view_onclick = function () {
        _this.onClick(view);
      };
      view.on('click', view._d3view_onclick);
    });
    if (!dontrender) {
      _this.render();
    }
  };

  /**
   * Called when a view is clicked.
   *
   * @param view {D3SubView}
   *        view that was clicked.
   */
  _this.onClick = function (view) {
    if (_this.model.get('clickToSelect')) {
      _this.views.select(view);
    }
  };

  /**
   * Views collection select handler.
   *
   * @param view {D3SubView}
   *        view that was selected.
   */
  _this.onDeselect = function (view) {
    view.onDeselect();
  };

  /**
   * Views collection remove handler.
   *
   * @param views {Array<D3SubView>}
   *        views that were removed.
   */
  _this.onRemove = function (views, dontrender) {
    views.forEach(function (view) {
      view.off('click', view._d3view_onclick);
      view._d3view_onclick = null;
    });
    if (!dontrender) {
      _this.render();
    }
  };

  /**
   * Views collection reset handler.
   */
  _this.onReset = function () {
    var el,
        toRemove = [];
    // call onRemove for all existing views.
    while (_plotArea.firstChild) {
      // detach view
      el = _plotArea.firstChild;
      _plotArea.removeChild(el);
      // call remove to clean up
      toRemove.push(el.view);
    }
    _this.onRemove(toRemove);
    // call onAdd for all views
    _this.onAdd(_this.views.data());
  };

  /**
   * Views collection select handler.
   *
   * @param view {D3SubView}
   *        view that was selected.
   */
  _this.onSelect = function (view) {
    view.onSelect();
  };

  /**
   * Render view.
   *
   * @param changed {Object}
   *        default is _this.model.get.
   *        list of properties that have changed.
   */
  _this.render = function (changed) {
    var height,
        innerWidth,
        innerHeight,
        legendPosition,
        legendX,
        legendY,
        marginBottom,
        marginLeft,
        marginRight,
        marginTop,
        options,
        outerHeight,
        outerWidth,
        paddingBottom,
        paddingLeft,
        paddingRight,
        paddingTop,
        width,
        xAxisScale,
        xAxisTicks,
        xExtent,
        yAxisScale,
        yAxisTicks,
        yExtent;


    options = _this.model.get();
    if (_firstRender || !changed) {
      changed = options;
      _firstRender = false;
    }

    // all options
    xAxisScale = options.xAxisScale;
    yAxisScale = options.yAxisScale;
    // these are used for label positioning
    paddingBottom = options.paddingBottom;
    paddingLeft = options.paddingLeft;

    if (changed.hasOwnProperty('title')) {
      _plotTitle.textContent = options.title;
      _plotTitle.setAttribute('y', D3Util.getBBox(_plotTitle).height);
    }
    if (changed.hasOwnProperty('xLabel')) {
      _xAxisLabel.textContent = options.xLabel;
    }
    if (changed.hasOwnProperty('yLabel')) {
      _yAxisLabel.textContent = options.yLabel;
    }

    if (changed.hasOwnProperty('width') ||
        changed.hasOwnProperty('height') ||
        changed.hasOwnProperty('legendPosition') ||
        changed.hasOwnProperty('marginBottom') ||
        changed.hasOwnProperty('marginLeft') ||
        changed.hasOwnProperty('marginRight') ||
        changed.hasOwnProperty('marginTop') ||
        changed.hasOwnProperty('paddingBottom') ||
        changed.hasOwnProperty('paddingLeft') ||
        changed.hasOwnProperty('paddingRight') ||
        changed.hasOwnProperty('paddingTop')) {
      width = options.width;
      height = options.height;
      marginBottom = options.marginBottom;
      marginLeft = options.marginLeft;
      marginRight = options.marginRight;
      marginTop = options.marginTop;
      paddingRight = options.paddingRight;
      paddingTop = options.paddingTop;
      // adjust based on margin/padding
      outerWidth = width - marginLeft - marginRight;
      outerHeight = height - marginTop - marginBottom;
      innerWidth = outerWidth - paddingLeft - paddingRight;
      innerHeight = outerHeight - paddingTop - paddingBottom;
      // update elements
      _this.el.style.paddingBottom = (100 * height / width) + '%';
      _svg.setAttribute('viewBox', '0 0 ' + width + ' ' + height);
      _svg.setAttribute('preserveAspectRatio', 'xMinYMin meet');
      _plotAreaClip.setAttribute('width', innerWidth);
      _plotAreaClip.setAttribute('height', innerHeight);
      _margin.setAttribute('transform',
          'translate(' + marginLeft + ',' + marginTop + ')');
      _outerFrame.setAttribute('height', outerHeight);
      _outerFrame.setAttribute('width', outerWidth);
      _plotTitle.setAttribute('x', outerWidth / 2);
      _padding.setAttribute('transform',
          'translate(' + paddingLeft + ',' + paddingTop + ')');
      _innerFrame.setAttribute('width', innerWidth);
      _innerFrame.setAttribute('height', innerHeight);
      _xEl.setAttribute('transform',
          'translate(0,' + innerHeight + ')');
      // update axes range and position
      xAxisScale.range([0, innerWidth]);
      yAxisScale.range([innerHeight, 0]);
      _xAxisLabel.setAttribute('x', innerWidth / 2);
      _yAxisLabel.setAttribute('x', -innerHeight / 2);

      legendPosition = options.legendPosition;
      legendX = 0;
      legendY = 0;
      if (legendPosition === 'topright') {
        legendX = innerWidth;
      } else if (legendPosition === 'bottomleft') {
        legendY = innerHeight;
      } else if (legendPosition === 'bottomright') {
        legendX = innerWidth;
        legendY = innerHeight;
      } // else 'topleft'
      _legend.setAttribute('transform',
          'translate(' + legendX + ',' + legendY + ')');
    }

    // update axes extent
    xExtent = _this.getPlotXExtent();
    xAxisScale.domain(xExtent);
    yExtent = _this.getPlotYExtent(xExtent);
    yAxisScale.domain(yExtent);

    // redraw axes
    _xAxis.scale(xAxisScale);
    _xAxis.tickFormat(options.xAxisFormat);
    xAxisTicks = options.xAxisTicks;
    if (typeof xAxisTicks === 'function') {
      xAxisTicks = xAxisTicks(xExtent);
    }
    _xAxis.tickValues(xAxisTicks);

    _yAxis.scale(yAxisScale);
    _yAxis.tickFormat(options.yAxisFormat);
    yAxisTicks = options.yAxisTicks;
    if (typeof yAxisTicks === 'function') {
      yAxisTicks = yAxisTicks(yExtent);
    }
    _yAxis.tickValues(yAxisTicks);

    d3.select(_xAxisEl).call(_xAxis);
    d3.select(_yAxisEl).call(_yAxis);

    // update label positions based on axes size
    _xAxisLabel.setAttribute('y',
        paddingBottom - D3Util.getBBox(_xAxisLabel).height);
    _yAxisLabel.setAttribute('y',
        D3Util.getBBox(_yAxisLabel).height - paddingLeft);

    // now render views
    _this.renderViews();
  };

  /**
   * Re-render sub-views.
   */
  _this.renderViews = function () {
    var bbox,
        legendContent,
        legendOffset,
        legendPosition,
        legendX,
        legendY;

    // clear plot area
    Util.empty(_plotArea);
    Util.empty(_legend);
    legendContent = d3.select(_legend)
        .append('g')
        .attr('class', _this.getLegendClass).node();

    // add views to plot area
    legendY = 0;
    _this.views.data().forEach(function (view, index) {
      // add elements
      _plotArea.appendChild(view.el);
      view.el.setAttribute('data-index', index);
      if (view.legend) {
        legendContent.appendChild(view.legend);
        view.legend.setAttribute('data-index', index);
      }
      // render elements
      view.render(_this);
      // position legend
      if (view.legend) {
        bbox = D3Util.getBBox(view.legend);
        legendY += bbox.height;
        view.legend.setAttribute('transform',
            'translate(0,' + legendY  + ')');
      }
    });

    // position legend content.
    bbox = D3Util.getBBox(legendContent);
    legendOffset = _this.model.get('legendOffset');
    legendPosition = _this.model.get('legendPosition');
    legendX = legendOffset;
    legendY = legendOffset;
    if (legendPosition === 'topright') {
      legendX = -(legendOffset + bbox.width);
    } else if (legendPosition === 'bottomleft') {
      legendY = -(legendOffset + bbox.height);
    } else if (legendPosition === 'bottomright') {
      legendX = -(legendOffset + bbox.width);
      legendY = -(legendOffset + bbox.height);
    } // else 'topleft'
    legendContent.setAttribute('transform',
        'translate(' + legendX + ',' + legendY + ')');
  };

  /**
   * Get the plot x extent, including padding.
   *
   * @return {Array<Number>} x extents.
   */
  _this.getPlotXExtent = function () {
    var xAxisPadding,
        xAxisScale,
        xExtent;

    xExtent = _this.getXExtent();
    xAxisPadding = _this.model.get('xAxisPadding');
    if (xAxisPadding) {
      xAxisScale = _this.model.get('xAxisScale');
      xExtent = (typeof xAxisScale.base === 'function' ?
            D3Util.padLogExtent : D3Util.padExtent)(xExtent, xAxisPadding);
    }

    return xExtent;
  };

  /**
   * Get the plot y extent, including padding.
   *
   * @param xExtent {Array<Number>}
   *        xExtent is passed to _this.getYExtent().
   * @return {Array<Number>} y extents.
   */
  _this.getPlotYExtent = function (xExtent) {
    var yAxisPadding,
        yAxisScale,
        yExtent;

    yExtent = _this.getYExtent(xExtent);
    yAxisPadding = _this.model.get('yAxisPadding');
    if (yAxisPadding) {
      yAxisScale = _this.model.get('yAxisScale');
      yExtent = (typeof yAxisScale.base === 'function' ?
            D3Util.padLogExtent : D3Util.padExtent)(yExtent, yAxisPadding);
    }

    return yExtent;
  };

  /**
   * Get the data x extent.
   *
   * @return {Array<Number>} x extents.
   */
  _this.getXExtent = function () {
    var xExtent;

    xExtent = _this.model.get('xExtent');
    if (xExtent === null) {
      xExtent = [];
      _this.views.data().forEach(function (view) {
        xExtent = xExtent.concat(view.getXExtent());
      });
      xExtent = d3.extent(xExtent);
    }

    return xExtent;
  };

  /**
   * Get the data y extent, including padding.
   *
   * @param xExtent {Array<Number>}
   *        x extent, in case y extent is filtered based on x extent.
   * @return {Array<Number>} x extents.
   */
  _this.getYExtent = function (/* xExtent */) {
    var yExtent;

    yExtent = _this.model.get('yExtent');
    if (yExtent === null) {
      yExtent = [];
      _this.views.data().forEach(function (view) {
        yExtent = yExtent.concat(view.getYExtent());
      });
      yExtent = d3.extent(yExtent);
    }

    return yExtent;
  };

  /**
   * Show a tooltip on the graph.
   *
   * @param coords {Array<x, y>}
   *        coordinate for origin of tooltip.
   * @param data {Array<Object|Array>}
   *        tooltip content, passed to formatTooltip.
   */
  _this.showTooltip = function (coords, data) {
    var bbox,
        content,
        offset,
        options,
        outline,
        padding,
        tooltip,
        tooltipBbox,
        x,
        y;

    tooltip = d3.select(_tooltip);
    // clear tooltip
    tooltip.selectAll('*').remove();
    if (!coords || !data) {
      return;
    }

    options = _this.model.get();
    offset = options.tooltipOffset;
    padding = options.tooltipPadding;
    // create tooltip content
    outline = tooltip.append('rect').attr('class', 'tooltip-outline');
    content = tooltip.append('g').attr('class', 'tooltip-content');
    D3Util.formatText(content, data);
    // position tooltip outline
    bbox = D3Util.getBBox(tooltip.node());
    outline.attr('width', bbox.width + 2 * padding)
        .attr('height', bbox.height + 2 * padding);
    content.attr('transform', 'translate(' + padding + ',0)');

    // position tooltip on graph
    // center of point
    x = options.xAxisScale(coords[0]);
    y = options.yAxisScale(coords[1]);
    // box rendering inside
    bbox = D3Util.getBBox(_innerFrame);
    // box being rendered
    tooltipBbox = D3Util.getBBox(_tooltip);
    // keep tooltip in graph area
    if (x + tooltipBbox.width > bbox.width) {
      x = x - tooltipBbox.width - offset;
    } else {
      x = x + offset;
    }
    if (y + tooltipBbox.height > bbox.height) {
      y = y - tooltipBbox.height - offset;
    } else {
      y = y + offset;
    }
    // set position
    _tooltip.setAttribute('transform',
        'translate(' + x + ',' + y + ')');
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = D3View;

},{"./D3Util":6,"d3":1,"mvc/Collection":32,"mvc/View":"mvc/View","util/Util":"util/Util"}],8:[function(require,module,exports){
/* global L */
/**
 * Copyright (c) 2012, Smartrak, David Leaver
 * Leaflet.utfgrid is an open-source JavaScript library that provides utfgrid
 * interaction on leaflet powered maps.
 *
 * https://github.com/danzel/Leaflet.utfgrid
 */

// 04/11/13 -- EMM: This is an AMD'd (require.js) version of the original
//                  source.
'use strict';


L.Util.ajax = function (url, cb) {
  // the following is from JavaScript: The Definitive Guide
  // and https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/Using_XMLHttpRequest_in_IE6
  if (window.XMLHttpRequest === undefined) {
    window.XMLHttpRequest = function () {
      /*global ActiveXObject:true */
      try {
        return new ActiveXObject('Microsoft.XMLHTTP');
      }
      catch  (e) {
        throw new Error('XMLHttpRequest is not supported');
      }
    };
  }
  var response, request = new XMLHttpRequest();
  request.open('GET', url);
  request.onreadystatechange = function () {
    /*jshint evil: true */
    if (request.readyState === 4 && request.status === 200) {
      if (window.JSON) {
        response = JSON.parse(request.responseText);
      } else {
        response = eval('(' + request.responseText + ')');
      }
      cb(response);
    }
  };
  request.send();
};

L.UtfGrid = L.Class.extend({
  includes: L.Mixin.Events,
  options: {
    subdomains: 'abc',

    minZoom: 0,
    maxZoom: 18,
    tileSize: 256,

    resolution: 4,

    useJsonP: true,
    pointerCursor: true
  },

  //The thing the mouse is currently on
  _mouseOn: null,

  initialize: function (url, options) {
    L.Util.setOptions(this, options);

    this._url = url;
    this._cache = {};

    //Find a unique id in window we can use for our callbacks
    //Required for jsonP
    var i = 0;
    while (window['lu' + i]) {
      i++;
    }
    this._windowKey = 'lu' + i;
    window[this._windowKey] = {};

    var subdomains = this.options.subdomains;
    if (typeof this.options.subdomains === 'string') {
      this.options.subdomains = subdomains.split('');
    }
  },

  onAdd: function (map) {
    this._map = map;
    this._container = this._map._container;

    this._update();

    var zoom = this._map.getZoom();

    if (zoom > this.options.maxZoom || zoom < this.options.minZoom) {
      return;
    }

    map.on('click', this._click, this);
    map.on('mousemove', this._move, this);
    map.on('moveend', this._update, this);
  },

  onRemove: function () {
    var map = this._map;
    map.off('click', this._click, this);
    map.off('mousemove', this._move, this);
    map.off('moveend', this._update, this);
  },

  _click: function (e) {
    this.fire('click', this._objectForEvent(e));
  },
  _move: function (e) {
    var on = this._objectForEvent(e);

    if (on.data !== this._mouseOn) {
      if (this._mouseOn) {
        this.fire('mouseout', { latlng: e.latlng, data: this._mouseOn });
        if (this.options.pointerCursor) {
          this._container.style.cursor = '';
        }
      }
      if (on.data) {
        this.fire('mouseover', on);
        if (this.options.pointerCursor) {
          this._container.style.cursor = 'pointer';
        }
      }

      this._mouseOn = on.data;
    } else if (on.data) {
      this.fire('mousemove', on);
    }
  },

  _objectForEvent: function (e) {
    var map = this._map,
        point = map.project(e.latlng),
        tileSize = this.options.tileSize,
        resolution = this.options.resolution,
        x = Math.floor(point.x / tileSize),
        y = Math.floor(point.y / tileSize),
        gridX = Math.floor((point.x - (x * tileSize)) / resolution),
        gridY = Math.floor((point.y - (y * tileSize)) / resolution),
      max = map.options.crs.scale(map.getZoom()) / tileSize;

    x = (x + max) % max;
    y = (y + max) % max;

    var data = this._cache[map.getZoom() + '_' + x + '_' + y];
    if (!data) {
      return { latlng: e.latlng, data: null };
    }

    var idx = this._utfDecode(data.grid[gridY].charCodeAt(gridX)),
        key = data.keys[idx],
        result = data.data[key];

    if (!data.data.hasOwnProperty(key)) {
      result = null;
    }

    return { latlng: e.latlng, data: result};
  },

  //Load up all required json grid files
  //TODO: Load from center etc
  _update: function () {

    var bounds = this._map.getPixelBounds(),
        zoom = this._map.getZoom(),
        tileSize = this.options.tileSize;

    if (zoom > this.options.maxZoom || zoom < this.options.minZoom) {
      return;
    }

    var nwTilePoint = new L.Point(
        Math.floor(bounds.min.x / tileSize),
        Math.floor(bounds.min.y / tileSize)),
      seTilePoint = new L.Point(
        Math.floor(bounds.max.x / tileSize),
        Math.floor(bounds.max.y / tileSize)),
        max = this._map.options.crs.scale(zoom) / tileSize;

    //Load all required ones
    for (var x = nwTilePoint.x; x <= seTilePoint.x; x++) {
      for (var y = nwTilePoint.y; y <= seTilePoint.y; y++) {

        var xw = (x + max) % max, yw = (y + max) % max;
        var key = zoom + '_' + xw + '_' + yw;

        if (!this._cache.hasOwnProperty(key)) {
          this._cache[key] = null;

          if (this.options.useJsonP) {
            this._loadTileP(zoom, xw, yw);
          } else {
            this._loadTile(zoom, xw, yw);
          }
        }
      }
    }
  },

  _loadTileP: function (zoom, x, y) {
    var head = document.getElementsByTagName('head')[0],
        key = zoom + '_' + x + '_' + y,
        functionName = 'lu_' + key,
        wk = this._windowKey,
        self = this;

    var url = L.Util.template(this._url, L.Util.extend({
      s: L.TileLayer.prototype._getSubdomain.call(this, { x: x, y: y }),
      z: zoom,
      x: x,
      y: y,
      cb: wk + '.' + functionName
    }, this.options));

    var script = document.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', url);

    window[wk][functionName] = function (data) {
      self._cache[key] = data;
      delete window[wk][functionName];
      head.removeChild(script);
    };

    head.appendChild(script);
  },

  _loadTile: function (zoom, x, y) {
    var url = L.Util.template(this._url, L.Util.extend({
      s: L.TileLayer.prototype._getSubdomain.call(this, { x: x, y: y }),
      z: zoom,
      x: x,
      y: y
    }, this.options));

    var key = zoom + '_' + x + '_' + y;
    var self = this;
    L.Util.ajax(url, function (data) {
      self._cache[key] = data;
    });
  },

  _utfDecode: function (c) {
    if (c >= 93) {
      c--;
    }
    if (c >= 35) {
      c--;
    }
    return c - 32;
  }
});


L.utfGrid = function (url, options) {
  return new L.UtfGrid(url, options);
};


module.exports = L.UtfGrid;

},{}],9:[function(require,module,exports){
/* global L */
'use strict';


/**
 * Simple extension to control in order to align generated markup with
 * HazDev template styles.
 *
 */
var HazDevLayers = L.Control.Layers.extend({
  _addItem: function (obj) {
    var checked,
        container,
        fragment,
        input,
        label;

    fragment = document.createDocumentFragment();
    label = document.createElement('label');
    checked = this._map.hasLayer(obj.layer);

    if (obj.overlay) {
      input = document.createElement('input');
      input.type = 'checkbox';
      input.className = 'leaflet-control-layers-selector';
      input.defaultChecked = checked;
    } else {
      input = this._createRadioElement('leaflet-base-layers', checked);
    }

    input.layerId = L.stamp(obj.layer);
    input.id = 'leaflet-layer-control-selector-' + input.layerId;

    L.DomEvent.on(input, 'click', this._onInputClick, this);


    label.innerHTML = obj.name;
    label.setAttribute('for', input.id);

    fragment.appendChild(input);
    fragment.appendChild(label);

    container = obj.overlay ? this._overlaysList : this._baseLayersList;
    container.appendChild(fragment);

    return fragment;
  }
});


L.Control.HazDevLayers = HazDevLayers;

L.control.hazDevLayers = function (baseLayers, overlays, options) {
  return new HazDevLayers(baseLayers, overlays, options);
};


module.exports = L.control.hazDevLayers;

},{}],10:[function(require,module,exports){
/* global L */
'use strict';


// Copyright 2012 Ardhi Lukianto
// https://github.com/ardhi/Leaflet.MousePosition
var MousePosition = L.Control.extend({
  options: {
    position: 'bottomright',
    separator: ' : ',
    emptyString: 'Unavailable',
    lngFirst: false,
    numDigits: 3,
    lngFormatter: function(n) { return [Math.abs(n).toFixed(3), '&deg;',
            (n<0?'W':'E')].join(''); },
    latFormatter: function(n) { return [Math.abs(n).toFixed(3), '&deg;',
            (n<0?'S':'N')].join(''); }
  },

  onAdd: function (map) {
    this._container = L.DomUtil.create('div',
        'leaflet-control-background leaflet-control-mouseposition');
    L.DomEvent.disableClickPropagation(this._container);
    map.on('mousemove', this._onMouseMove, this);
    this._container.innerHTML=this.options.emptyString;
    return this._container;
  },

  onRemove: function (map) {
    map.off('mousemove', this._onMouseMove);
  },

  _onMouseMove: function (e) {
    var lng = L.Util.formatNum(e.latlng.lng, this.options.numDigits);
    // need to correct for rollover of map if user scrolls
    if(lng >= 0) {
      lng=((lng+180)%360)-180;
    } else {
      lng=(((lng+180)+(Math.ceil(Math.abs(lng+180)/360)*360))%360)-180;
    }
    var lat = L.Util.formatNum(e.latlng.lat, this.options.numDigits);
    if (this.options.lngFormatter) {
      lng = this.options.lngFormatter(lng);
    }
    if (this.options.latFormatter) {
      lat = this.options.latFormatter(lat);
    }
    var value = this.options.lngFirst ?
            lng + this.options.separator + lat :
            lat + this.options.separator + lng;
    this._container.innerHTML = value;
  }
});


L.Control.MousePosition = MousePosition;

L.control.mousePosition = function (options) {
  return new MousePosition(options);
};


module.exports = L.control.mousePosition;

},{}],11:[function(require,module,exports){
/* global L */
'use strict';


var Xhr = require('util/Xhr');


/**
 * A Leaflet GeoJSON layer that loads its data asynchronously after the layer
 * is added to the map (in onAdd).
 *
 * @param options {Object}
 *        all options are passed to L.GeoJSON.
 * @param options.url {String}
 *        url containing data to load.
 */
var AsynchronousGeoJson = L.GeoJSON.extend({

  initialize: function (options) {
    this._url = options.url;
    this._data = null;

    L.GeoJSON.prototype.initialize.call(this, [], options);
  },

  onAdd: function (map) {
    var _this;

    if (this._data === null) {
      // flag that data is being loaded
      this._data = 'loading';
      // scope for Xhr callbacks
      _this = this;
      Xhr.ajax({
        url: this._url,
        success: function (data) {
          // parse if needed
          data = (typeof data === 'string' ? JSON.parse(data) : data);
          // flag that data is loaded
          _this._data = data;
          // add data to layer (and map if layer still visible)
          _this.addData(data);
        },
        error: function () {
          // failed to load, clear loading in case re-added
          _this._data = null;
        }
      });
    }

    // always add layer, data added asynchronously
    L.GeoJSON.prototype.onAdd.call(this, map);
  }

});


L.AsynchronousGeoJson = AsynchronousGeoJson;

L.asynchronousGeoJSON = function (options) {
  return new AsynchronousGeoJson(options);
};


module.exports = L.asynchronousGeoJson;

},{"util/Xhr":"util/Xhr"}],12:[function(require,module,exports){
'use strict';


var TileProvider = require('leaflet/layer/TileProvider'),
    Util = require('util/Util');


var _CARTODB,
    _DEFAULTS,
    _ESRI,
    _PROVIDER_INFO;


_CARTODB = 'cartodb';
_ESRI = 'esri';
_PROVIDER_INFO = {};

_DEFAULTS = {
  provider: _ESRI
};

_PROVIDER_INFO[_CARTODB] = {
  url: 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}@2x.png',
  options: {
    subdomains: 'abcd',
    attribution: '<a href="https://www.openstreetmap.org/copyright">' +
        'OpenStreetMap</a> &copy; <a href="https://cartodb.com/attributions">' +
        'CartoDB</a>'
  }
};

_PROVIDER_INFO[_ESRI] = {
  url: 'https://{s}.arcgisonline.com/ArcGIS/rest/services/' +
      'Canvas/World_Light_Gray_Base/MapServer/tile/{z}/{y}/{x}.jpg',
  options: {
    subdomains: ['server', 'services'],
    attribution: 'Sources: Esri, DeLorme, HERE, MapmyIndia,  &copy; ' +
        'OpenStreetMap contributors, and the GIS community'
  }
};


/**
* Factory for Grayscale base layer.
*/
var Grayscale = function (options) {
  try {
    return TileProvider.create(
      _PROVIDER_INFO,
      Util.extend({}, _DEFAULTS, options)
    );
  } catch (e) {
    return TileProvider.create(
      _PROVIDER_INFO,
      _DEFAULTS
    );
  }
};


Grayscale.CARTODB = _CARTODB;
Grayscale.ESRI = _ESRI;


module.exports = Grayscale;

},{"leaflet/layer/TileProvider":19,"util/Util":"util/Util"}],13:[function(require,module,exports){
/* global L */
'use strict';

var Util = require('util/Util');


var _HISTORIC_SEISMICITY_URL = 'https://earthquake.usgs.gov/arcgis/rest' +
    '/services/eq/catalog_2015/MapServer/tile/{z}/{y}/{x}';


/**
 * Historic seismicity layer.
 *
 *
 * @param options {Object}
 *     Any options that could be provided to an L.tileLayer
 */
var HistoricSeismicity = function (options) {
  options = Util.extend({
    tileUrl: _HISTORIC_SEISMICITY_URL
  }, options);

  return L.tileLayer(options.tileUrl, options);
};


module.exports = HistoricSeismicity;

},{"util/Util":"util/Util"}],14:[function(require,module,exports){
/* global L */
'use strict';


var UtfGrid = require('leaflet/UtfGrid'),
    Util = require('util/Util');


var CLASSES = 'leaflet-mouseover-tooltip';


L.MouseOverLayer = L.LayerGroup.extend({

  _initialized: false, // Flag to tell if constructor has finished

  /**
   * @param options {Object}
   *      tileUrl: URL to image tiles
   *      dataUrl: URL to UtfGrid tiles (requires callback={cb})
   *      tileOpts: Options to be used on L.TileLayer for image tiles
   *      dataOpts: Options to be used on L.UtfGrid for grid tiles
   *      tiptext: Template string to be used for auto-tooltipping on hover
   */
  initialize: function (options) {

    // Create the two layers
    this._tileLayer = new L.TileLayer(options.tileUrl, options.tileOpts);
    this._dataLayer = new UtfGrid(options.dataUrl, options.dataOpts);

    if (typeof options.tiptext === 'string') {
      this._tiptext = options.tiptext;
      this._tooltip = L.DomUtil.create('span', CLASSES);
      this.on('mouseover', this._onMouseOver, this);
      this.on('mouseout', this._onMouseOut, this);
    }

    // Call parent constructor
    L.LayerGroup.prototype.initialize.call(this, []);
    this.addLayer(this._tileLayer);
    if (!Util.isMobile()) {
  this.addLayer(this._dataLayer);
    }

    this._initialized = true;
  },

  // --------------------------------------------------
  // Delegate event handling to the data layer
  // --------------------------------------------------

  on: function () {
    UtfGrid.prototype.on.apply(this._dataLayer, arguments);
  },

  off: function () {
    UtfGrid.prototype.off.apply(this._dataLayer, arguments);
  },

  // --------------------------------------------------
  // Override these methods inherited from LayerGroup
  // --------------------------------------------------

  onAdd: function (map) {
    L.LayerGroup.prototype.onAdd.apply(this, arguments);

    if (this._tooltip) {
      map.getPanes().popupPane.appendChild(this._tooltip);
    }
  },

  onRemove: function () {
    L.LayerGroup.prototype.onRemove.apply(this, arguments);

    if (this._tooltip && this._tooltip.parentNode) {
      this._tooltip.parentNode.removeChild(this._tooltip);
    }
  },

  // --------------------------------------------------
  // Suppress these methods inherited from LayerGroup
  // --------------------------------------------------

  addLayer: function () {
    if (!this._initialized) {
      L.LayerGroup.prototype.addLayer.apply(this, arguments);
    } else {
      try {console.log('MouseOverLayer::addLayer - Immutable object');}
      catch (e) { /* Ignore */ }
    }
  },
  removeLayer: function () {
    if (!this._initialized) {
      L.LayerGroup.prototype.removeLayer.apply(this, arguments);
    } else {
      try {console.log('MouseOverLayer::removeLayer - Immutable object');}
      catch (e) { /* Ignore */ }
    }
  },
  clearLayers: function () {
    if (!this._initialized) {
      L.LayerGroup.prototype.clearLayers.apply(this, arguments);
    } else {
      try {console.log('MouseOverLayer::clearLayers - Immutable object');}
      catch (e) { /* Ignore */ }
    }
  },

  // --------------------------------------------------
  // Auto hover tooltip helper methods
  // --------------------------------------------------

  _onMouseOver: function (evt) {
    // Update text
    this._tooltip.innerHTML = L.Util.template(this._tiptext, evt.data);

    // Update position
    L.DomUtil.setPosition(this._tooltip, this._map.latLngToLayerPoint(
        evt.latlng));

    // Show the tooltip
    this._tooltip.style.display = 'block';
  },

  _onMouseOut: function () {
    // Hide the tooltip
    this._tooltip.style.display = '';
  }
});


L.mouseOverLayer = function (options) {
  return new L.MouseOverLayer(options);
};


module.exports = L.mouseOverLayer;

},{"leaflet/UtfGrid":8,"util/Util":"util/Util"}],15:[function(require,module,exports){
'use strict';


var TileProvider = require('leaflet/layer/TileProvider'),
    Util = require('util/Util');

var _DEFAULTS,
    _ESRI,
    _MAPQUEST,
    _PROVIDER_INFO;

_ESRI = 'esri';
_MAPQUEST = 'mapquest';
_PROVIDER_INFO = {};

_DEFAULTS = {
  provider: _ESRI
};

_PROVIDER_INFO[_ESRI] = {
  url: 'https://{s}.arcgisonline.com/ArcGIS/rest/services/' +
      'World_Imagery/MapServer/tile/{z}/{y}/{x}',
  options: {
    subdomains: ['server', 'services'],
    attribution: 'Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, ' +
        'USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the ' +
        'GIS User Community'
  }
};

_PROVIDER_INFO[_MAPQUEST] = {
  url: 'https://otile{s}-s.mqcdn.com/tiles/1.0.0/sat/{z}/{x}/{y}.jpg',
  options: {
    subdomains: '1234',
    attribution: 'Data, imagery and map information provided by MapQuest,' +
        ' <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' +
        ' and contributors,' +
        ' <a href="https://wiki.openstreetmap.org/wiki/Legal_FAQ#3a.' +
        '_I_would_like_to_use_OpenStreetMap_maps.' +
        '_How_should_I_credit_you.3F">' +
        'ODbL</a>'
  }
};


/**
* Factory for Satellite base layer.
*/
var Satellite = function (options) {
  try {
    return TileProvider.create(
      _PROVIDER_INFO,
      Util.extend({}, _DEFAULTS, options)
    );
  } catch (e) {
    return TileProvider.create(
      _PROVIDER_INFO,
      _DEFAULTS
    );
  }
};


Satellite.ESRI = _ESRI;
Satellite.MAPQUEST = _MAPQUEST;


module.exports = Satellite;

},{"leaflet/layer/TileProvider":19,"util/Util":"util/Util"}],16:[function(require,module,exports){
'use strict';


var TileProvider = require('leaflet/layer/TileProvider'),
    Util = require('util/Util');


var _DEFAULTS,
    _ESRI,
    _MAPQUEST,
    _PROVIDER_INFO;


_ESRI = 'esri';
_MAPQUEST = 'mapquest';
_PROVIDER_INFO = {};

_DEFAULTS = {
  provider: _ESRI
};

_PROVIDER_INFO[_ESRI] = {
  url: 'https://{s}.arcgisonline.com/ArcGIS/rest/services/' +
      'World_Street_Map/MapServer/tile/{z}/{y}/{x}',
  options: {
    subdomains: ['server', 'services'],
    attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, ' +
        'Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, ' +
        'Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the ' +
        'GIS User Community'
  }
};

_PROVIDER_INFO[_MAPQUEST] = {
  url: 'https://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.jpg',
  options: {
    subdomains: '1234',
    attribution: 'Data, imagery and map information provided by MapQuest,' +
        ' <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>' +
        ' and contributors,' +
        ' <a href="https://wiki.openstreetmap.org/wiki/' +
        'Legal_FAQ#3a._I_would_like_to_use_OpenStreetMap_maps.' +
        '_How_should_I_credit_you.3F">' +
        'ODbL</a>'
  }
};


/**
* Factory for Street base layer.
*/
var Street = function (options) {
  try {
    return TileProvider.create(
      _PROVIDER_INFO,
      Util.extend({}, _DEFAULTS, options)
    );
  } catch (e) {
    return TileProvider.create(
      _PROVIDER_INFO,
      _DEFAULTS
    );
  }
};


Street.ESRI = _ESRI;
Street.MAPQUEST = _MAPQUEST;


module.exports = Street;

},{"leaflet/layer/TileProvider":19,"util/Util":"util/Util"}],17:[function(require,module,exports){
/* global L */
'use strict';


var _PLATES_URL = 'https://earthquake.usgs.gov/basemap/tiles/plates';


var TectonicPlates = function (options) {
  options = options || {};

  return L.tileLayer(_PLATES_URL + '/{z}/{x}/{y}.png', options);
};


L.tectonicPlates = TectonicPlates;

module.exports = TectonicPlates;

},{}],18:[function(require,module,exports){
'use strict';


var TileProvider = require('leaflet/layer/TileProvider'),
    Util = require('util/Util');


var _DEFAULTS,
    _ESRI,
    _NATGEO,
    _PROVIDER_INFO;


_ESRI = 'esri';
_NATGEO = 'natgeo';
_PROVIDER_INFO = {};

_DEFAULTS = {
  provider: _ESRI
};

_PROVIDER_INFO[_ESRI] = {
  url: 'https://{s}.arcgisonline.com/ArcGIS/rest/services/' +
      'World_Topo_Map/MapServer/tile/{z}/{y}/{x}',
  options: {
    subdomains: ['server', 'services'],
    attribution: 'Tiles &copy; Esri &mdash; Esri, DeLorme, NAVTEQ, TomTom, ' +
        'Intermap, iPC, USGS, FAO, NPS, NRCAN, GeoBase, Kadaster NL, ' +
        'Ordnance Survey, Esri Japan, METI, Esri China (Hong Kong), and the ' +
        'GIS User Community'
  }
};

_PROVIDER_INFO[_NATGEO] = {
  url: 'https://{s}.arcgisonline.com/arcgis/rest/services/' +
      'NatGeo_World_Map/MapServer/tile/{z}/{y}/{x}',
  options: {
    subdomains: ['server', 'services'],
    attribution: 'Content may not reflect National Geographic\'s ' +
          'current map policy. Sources: National Geographic, Esri, ' +
          'DeLorme, HERE, UNEP-WCMC, USGS, NASA, ESA, METI, NRCAN, ' +
          'GEBCO, NOAA, increment P Corp.'
  }
};



/**
 * Factory for Terrain base layer.
 */
var Terrain = function (options) {
  try {
    return TileProvider.create(
      _PROVIDER_INFO,
      Util.extend({}, _DEFAULTS, options)
    );
  } catch (e) {
    return TileProvider.create(
      _PROVIDER_INFO,
      _DEFAULTS
    );
  }
};


Terrain.ESRI = _ESRI;
Terrain.NATGEO = _NATGEO;


module.exports = Terrain;

},{"leaflet/layer/TileProvider":19,"util/Util":"util/Util"}],19:[function(require,module,exports){
/* global L */
'use strict';


var Util = require('util/Util');


/**
 * This class provides a static builder to create TileLayers based on provider
 * info. For clarity, several "types" of maps ("Grayscale", "Terrain", etc...)
 * have their own subclass which essentially just calls the create method
 * implemented here.
 *
 */
var TileProvider = {
  /**
   * Creates a new L.TileLayer based on a map of provider info and
   * user-specified options.
   *
   * @param infoMap {Object}
   *     A map of provider info keyed by provider name.
   *
   * @param options {Object}
   *     User-specified configuration options for an L.tileLayer. Must also
   *     include a "provider" key whose value points to a known provider name
   *     in the infoMap.
   *
   * @throws {Error}
   *     If the infoMap does not contain the user-specified options.provider.
   *
   * @return {L.TileLayer}
   *     A new L.TileLayer based on the configured information.
   */
  create: function (infoMap, options) {
    var layerOptions,
        layerUrl,
        provider;

    provider = infoMap[options.provider];
    layerUrl = provider.url;
    layerOptions = Util.extend({}, provider.options, options);

    if (layerOptions.hasOwnProperty('provider')) {
      delete layerOptions.provider;
    }

    return L.tileLayer(layerUrl, layerOptions);
  }
};


module.exports = TileProvider;

},{"util/Util":"util/Util"}],20:[function(require,module,exports){
/* global L */
'use strict';


var MouseOverLayer = require('leaflet/layer/MouseOverLayer'),
    Util = require('util/Util');


var _FAULTS_URL = 'https://earthquake.usgs.gov/basemap/tiles/faults';


var UsFault = function (options) {
  options = Util.extend({
    tileUrl: _FAULTS_URL + '/{z}/{x}/{y}.png',
    dataUrl: _FAULTS_URL + '/{z}/{x}/{y}.grid.json?callback={cb}',
    tiptext: '{NAME}'
  }, options);

  return MouseOverLayer(options);
};


L.usFault = UsFault;

module.exports = UsFault;

},{"leaflet/layer/MouseOverLayer":14,"util/Util":"util/Util"}],21:[function(require,module,exports){
'use strict';

/**
 * Utility class to get the confidence for a location.
 * Confidence for a location is 1 to 5.
 */
var ConfidenceCalculator = {

  /**
   * Compute Confidence given latitude and longitude. Latitude and longitude
   * must be strings to keep accuracy.
   * Confidence is based on the number of digits past the decimal.
   *
   * @params latititude {String}
   * @params longitude {String}
   *
   */
  computeFromCoordinates: function (latitude, longitude) {
    if (typeof latitude !== 'string' || typeof longitude !== 'string') {
      return ConfidenceCalculator.NOT_COMPUTED;
    }

    var latitudePieces = latitude.split('.'),
        longitudePieces = longitude.split('.'),
        minDecimals;

    if (latitudePieces.length === 1 || longitudePieces.length === 1) {
      minDecimals = 0;
    } else {
      minDecimals = Math.min(latitudePieces[1].length,
          longitudePieces[1].length);
    }


    if (minDecimals >= 5) {
      return ConfidenceCalculator.HIGH_CONFIDENCE;
    } else if (minDecimals >= 4) {
      return ConfidenceCalculator.ABOVE_AVERAGE_CONFIDENCE;
    } else if (minDecimals >= 3) {
      return ConfidenceCalculator.AVERAGE_CONFIDENCE;
    } else if (minDecimals >= 2) {
      return ConfidenceCalculator.BELOW_AVERAGE_CONFIDENCE;
    } else if (minDecimals >= 1) {
      return ConfidenceCalculator.LOW_CONFIDENCE;
    } else if (minDecimals >= 0) {
      return ConfidenceCalculator.NO_CONFIDENCE;
    } else {
      return ConfidenceCalculator.NOT_COMPUTED;
    }

  },

  /**
   * Compute Confidence given a zoom level.
   * @params zoom {number} indicates the zoom level of the map.
   */
  computeFromPoint: function (zoom) {
    if (zoom > 16) {
      return ConfidenceCalculator.HIGH_CONFIDENCE;
    } else if (zoom > 12) {
      return ConfidenceCalculator.ABOVE_AVERAGE_CONFIDENCE;
    } else if (zoom > 8) {
      return ConfidenceCalculator.AVERAGE_CONFIDENCE;
    } else if (zoom > 4) {
      return ConfidenceCalculator.BELOW_AVERAGE_CONFIDENCE;
    } else {
      return ConfidenceCalculator.LOW_CONFIDENCE;
    }
  },

  /**
   * returns rounded value based on confidence value.
   *
   * @param  {string | number} value
   *           value to be rounded
   * @param  {number} confidence
   *           confidence value
   * @return {number} rounded value
   *
   */
  roundLocation: function (value, confidence) {
    var rounded,
        decimals = confidence;

    if (confidence === ConfidenceCalculator.NOT_COMPUTED) {
      decimals = 0;
    }

    rounded = parseFloat(value).toFixed(decimals);
    return parseFloat(rounded);
  },

  /**
   * Compute zoom level given a confidence.
   * @params confidence {number} indicates the confidence level
   */
  computeZoomFromConfidence: function (confidence) {
    if (confidence === ConfidenceCalculator.HIGH_CONFIDENCE) {
      return 16;
    } else if( confidence === ConfidenceCalculator.ABOVE_AVERAGE_CONFIDENCE) {
      return 13;
    } else if( confidence === ConfidenceCalculator.AVERAGE_CONFIDENCE) {
      return 9;
    } else if( confidence === ConfidenceCalculator.BELOW_AVERAGE_CONFIDENCE) {
      return 5;
    } else if( confidence === ConfidenceCalculator.LOW_CONFIDENCE) {
      return 1;
    } else {
      return 1;
    }
  },

  computeZoomFromGeocode: function (result) {
    var confidence = this.computeFromGeocode(result);
    return this.computeZoomFromConfidence(confidence);
  },

  /**
   * Compute Confidence given a accuracy in meters.
   * used by GeoLocate.
   * @params accuracy {number} indicates the accuracy in meters at 95%
   *         confidence.
   */
  computeFromGeolocate: function (accuracy) {
    if (accuracy > 100000) {
      return ConfidenceCalculator.LOW_CONFIDENCE;
    } else if (accuracy > 10000) {
      return ConfidenceCalculator.BELOW_AVERAGE_CONFIDENCE;
    } else if (accuracy > 1000) {
      return ConfidenceCalculator.AVERAGE_CONFIDENCE;
    } else if (accuracy > 100) {
      return ConfidenceCalculator.ABOVE_AVERAGE_CONFIDENCE;
    } else {
      return ConfidenceCalculator.HIGH_CONFIDENCE;
    }
  },

  /**
   * Compute Confidence given a geocode result location with an extent.
   *
   * @params geocodeLocation {object}
   *      an esri response via the ArcGIS REST API
   *
   * @see https://developers.arcgis.com/en/features/geocoding/
   */
  computeFromGeocode: function (geocodeLocation) {
    var confidence,
        extent,
        max;

    extent = geocodeLocation.extent;

    // find the largest dimension of the extent
    if (extent) {
      max = Math.max(Math.abs(extent.xmax - extent.xmin),
          Math.abs(extent.ymax - extent.ymin));

      // calculate confidence based on the location's extent
      if (max < 0.001) {
        confidence = ConfidenceCalculator.HIGH_CONFIDENCE;
      } else if (max < 0.01) {
        confidence = ConfidenceCalculator.ABOVE_AVERAGE_CONFIDENCE;
      } else if (max < 0.1) {
        confidence = ConfidenceCalculator.AVERAGE_CONFIDENCE;
      } else if (max < 1) {
        confidence = ConfidenceCalculator.BELOW_AVERAGE_CONFIDENCE;
      } else if (max < 10) {
        confidence = ConfidenceCalculator.LOW_CONFIDENCE;
      } else if (max >= 10) {
        confidence = ConfidenceCalculator.NO_CONFIDENCE;
      }
    }

    if (!(confidence === ConfidenceCalculator.HIGH_CONFIDENCE ||
        confidence === ConfidenceCalculator.ABOVE_AVERAGE_CONFIDENCE ||
        confidence === ConfidenceCalculator.AVERAGE_CONFIDENCE ||
        confidence === ConfidenceCalculator.BELOW_AVERAGE_CONFIDENCE ||
        confidence === ConfidenceCalculator.LOW_CONFIDENCE ||
        confidence === ConfidenceCalculator.NO_CONFIDENCE)) {
      // confidence did not match any value, bail
      confidence = ConfidenceCalculator.NOT_COMPUTED;
    }

    return confidence;
  }
};

// ----------------------------------------------------------------------
// Public Static Variables
// ----------------------------------------------------------------------

/** Constant used to indicate high degree of confidence. */
ConfidenceCalculator.HIGH_CONFIDENCE = 5;

/** Constant used to indicate above average confidence. */
ConfidenceCalculator.ABOVE_AVERAGE_CONFIDENCE = 4;

/** Constant used to indicate moderate degree of confidence. */
ConfidenceCalculator.AVERAGE_CONFIDENCE = 3;

/** Constant used to indicate below average confidence. */
ConfidenceCalculator.BELOW_AVERAGE_CONFIDENCE = 2;

/** Constant used to indicate low degree of confidence. */
ConfidenceCalculator.LOW_CONFIDENCE = 1;

/** Constant used to indicate very low degree of confidence. */
ConfidenceCalculator.NO_CONFIDENCE = 0;

/**
 * Constant used to indicate confidence was not computed or an error occurred
 * while computing the confidence
 */
ConfidenceCalculator.NOT_COMPUTED = -1;


module.exports = ConfidenceCalculator;

},{}],22:[function(require,module,exports){
/* global L */
'use strict';

var ConfidenceCalculator = require('locationview/ConfidenceCalculator');


var CLASS_NAME = 'location-coordinate-control',
    CLASS_ENABLED = 'location-control-enabled',
    CLASS_INPUT = 'expandable',
    CLASS_SUBMIT = 'location-control-submit';

var METHOD = 'coordinate';

var DEFAULTS = {
  'method': METHOD,
  'position': 'topleft',
  'defaultEnabled': false,
  'iconClass': 'location-control-icon',
  'helpText': 'Enter Coordinates',
  'infoText': '<b>Enter coordinates</b>, latitude and longitude.'
};

var CoordinateControl =  L.Control.extend({
  includes: L.Mixin.Events,

  initialize: function (options) {
    L.Util.setOptions(this, L.Util.extend({}, DEFAULTS, options));
  },

  onAdd: function (map) {
    var options = this.options,
        stop = L.DomEvent.stopPropagation,
        container,
        toggle,
        control;

    container = document.createElement('div');
    container.classList.add('location-control');
    container.classList.add(CLASS_NAME);
    container.innerHTML = [
      '<a class="', options.iconClass, '"></a>',
      '<span class="help">', options.helpText, '</span>',
      '<div class="', CLASS_INPUT, '">',
        '<input name="latitude" title="latitude" class="latitude" ',
            'placeholder="Latitude" />',
        '<input name="longitude" title="longitude" class="longitude" ',
            'placeholder="Longitude" />',
        '<button type="search" class="', CLASS_SUBMIT, '">Search</button>',
      '</div>'
    ].join('');

    toggle = container.querySelector('a');
    control = container.querySelector('.' + CLASS_INPUT);

    this._container = container;
    this._toggle = toggle;
    this._control = control;
    this._latitude = control.querySelector('.latitude');
    this._longitude = control.querySelector('.longitude');
    this._submit = container.querySelector('.' + CLASS_SUBMIT);
    this._map = map;

    if (this.options.defaultEnabled) {
      this.enable();
    }


    L.DomEvent.addListener(toggle, 'click', this.toggle, this);
    // Bind to a submit button click
    L.DomEvent.addListener(this._submit, 'click', this._onSubmit, this);
    // Bind event for the "enter" key
    L.DomEvent.addListener(control, 'keypress', this._onKeyPress, this);
    // stops map from zooming on double click
    L.DomEvent.addListener(container, 'click', stop);
    L.DomEvent.addListener(container, 'dblclick', stop);
    L.DomEvent.addListener(container, 'keydown', stop);
    L.DomEvent.addListener(container, 'keyup', stop);
    L.DomEvent.addListener(container, 'keypress', stop);
    L.DomEvent.addListener(container, 'mousedown', stop);
    L.DomEvent.addListener(this._longitude, 'touchstart', stop);
    L.DomEvent.addListener(this._latitude, 'touchstart', stop);

    return container;
  },

  toggle: function () {
    // if options is not defined, then toggle the control
    if (L.DomUtil.hasClass(this._container, CLASS_ENABLED)) {
      this.disable();
    } else {
      this.enable();
    }
  },

  enable: function () {
    L.DomUtil.addClass(this._container, CLASS_ENABLED);
    this._latitude.focus();
    this.fire('enabled');
  },

  disable: function () {
    L.DomUtil.removeClass(this._container, CLASS_ENABLED);

    this.fire('disabled');
  },

  onRemove: function () {
    var stop = L.DomEvent.stopPropagation,
        container = this._container,
        toggle = this._toggle,
        control = this._control;

    L.DomEvent.removeListener(toggle, 'click', this.toggle);
    L.DomEvent.removeListener(this._submit, 'click', this._onSubmit);
    L.DomEvent.removeListener(control, 'keypress', this._onKeyPress);
    L.DomEvent.removeListener(container, 'click', stop);
    L.DomEvent.removeListener(container, 'dblclick', stop);
    L.DomEvent.removeListener(container, 'keydown', stop);
    L.DomEvent.removeListener(container, 'keyup', stop);
    L.DomEvent.removeListener(container, 'keypress', stop);
    L.DomEvent.removeListener(container, 'mousedown', stop);
    L.DomEvent.removeListener(this._longitude, 'touchstart', stop);
    L.DomEvent.removeListener(this._latitude, 'touchstart', stop);

    this._map = null;
    this._control = null;
    this._toggle = null;
    this._container = null;
    this._latitude = null;
    this._longitude = null;
    this._submit = null;
  },

  setLocation: function (location, options) {
    if (location === null) {
      // reset location
      this._latitude.value = '';
      this._longitude.value = '';
    } else {
      // update lat/lon inputs
      this._latitude.value = ConfidenceCalculator.
          roundLocation(location.latitude, location.confidence);
      this._longitude.value = ConfidenceCalculator.
          roundLocation(location.longitude, location.confidence);
    }
    if (!(options && options.silent)) {
      this.fire('location', {'location': location});
    }
  },

  _onSubmit: function () {
    var latitude = this._latitude.value,
        longitude = this._longitude.value,
        location = this._getCoordinateLocation(latitude, longitude);

    // fire a location change
    this.setLocation(location);
    this._latitude.blur();
    this._longitude.blur();
  },

  _getCoordinateLocation: function (latitude, longitude) {
    var confidence = ConfidenceCalculator.
            computeFromCoordinates(latitude, longitude);

    return {
      'place': null,
      'longitude': parseFloat(longitude),
      'latitude': parseFloat(latitude),
      'method': METHOD,
      'confidence': confidence
    };
  },

  _onKeyPress: function (keyPress) {
    if(keyPress.keyCode === 13) {
      this._onSubmit();
    }
  }

});

// expose the coordinate control method type
CoordinateControl.METHOD = METHOD;


module.exports = CoordinateControl;

},{"locationview/ConfidenceCalculator":21}],23:[function(require,module,exports){
/* global L */
'use strict';

var Geocoder = require('locationview/Geocoder');


var CLASS_NAME = 'location-geocode-control',
    CLASS_ENABLED = 'location-control-enabled',
    CLASS_INPUT = 'expandable',
    CLASS_SUBMIT = 'location-control-submit';

var METHOD = 'geocode';

var DEFAULT_OPTIONS = {
  method: METHOD,
  position: 'topleft',
  defaultLocation: null,
  defaultEnabled: false,
  iconClass: 'location-control-icon',
  helpText: 'Search for Address',
  infoText: '<b>Search</b> for a location using an <b>address</b>.'
};

var GeocodeControl = L.Control.extend({
  includes: L.Mixin.Events,

  initialize: function (options) {
    L.Util.setOptions(this, L.Util.extend({}, DEFAULT_OPTIONS, options));
    this._geocoder = new Geocoder();
    this._geocodeSuccess = this._geocodeSuccess.bind(this);
    this._geocodeError = this._geocodeError.bind(this);
  },

  setLocation: function (location, options) {
    this._location = location;

    if (!location || !location.hasOwnProperty('place')) {
      this._address.value = '';
    } else {
      this._address.value = location.place;
    }

    if (!(options && options.silent)) {
      this.fire('location', {'location': location});
    }
  },

  getLocation: function () {
    return this._location;
  },

  onAdd: function (map) {
    var options = this.options,
        stop = L.DomEvent.stopPropagation,
        container,
        control,
        toggle;

    container = document.createElement('div');
    container.classList.add('location-control');
    container.classList.add(CLASS_NAME);
    container.innerHTML = [
      '<a class="', options.iconClass, '"></a>',
      '<span class="help">', options.helpText, '</span>',
      '<div class="', CLASS_INPUT, '">',
        '<input name="address" title="address" class="address" ',
            'placeholder="Address"/>',
        '<button type="search" class="', CLASS_SUBMIT, '">Search</button>',
      '</div>'
    ].join('');

    toggle = container.querySelector('a');
    control = container.querySelector('.' + CLASS_INPUT);

    this._container = container;
    this._toggle = toggle;
    this._control = control;
    this._address = control.querySelector('.address');
    this._submit = container.querySelector('.' + CLASS_SUBMIT);
    this._map = map;

    L.DomEvent.addListener(this._address, 'keyup', this._onKeyUp, this);
    L.DomEvent.addListener(this._submit, 'click', this._onSearchClick, this);
    L.DomEvent.addListener(toggle, 'click', this.toggle, this);
    L.DomEvent.addListener(container, 'click', stop);
    L.DomEvent.addListener(container, 'dblclick', stop);
    L.DomEvent.addListener(container, 'keydown', stop);
    L.DomEvent.addListener(container, 'keyup', stop);
    L.DomEvent.addListener(container, 'keypress', stop);
    L.DomEvent.addListener(container, 'mousedown', stop);
    L.DomEvent.addListener(this._address, 'touchstart', stop);

    return container;
  },

  onRemove: function () {
    var stop = L.DomEvent.stopPropagation,
        container = this._container,
        toggle = this._toggle;

    L.DomEvent.removeListener(this._address, 'keyup', this._onKeyUp);
    L.DomEvent.removeListener(this._submit, 'click', this._onSearchClick);
    L.DomEvent.removeListener(toggle, 'click', this.toggle);
    L.DomEvent.removeListener(container, 'click', stop);
    L.DomEvent.removeListener(container, 'dblclick', stop);
    L.DomEvent.removeListener(container, 'keydown', stop);
    L.DomEvent.removeListener(container, 'keyup', stop);
    L.DomEvent.removeListener(container, 'keypress', stop);
    L.DomEvent.removeListener(container, 'mousedown', stop);
    L.DomEvent.removeListener(this._address, 'touchstart', stop);
  },

  _doGeocode: function (textAddress) {
    this._setLoading(true);
    this._geocoder.forward(textAddress,
        this._geocodeSuccess, this._geocodeError);
  },

  _onKeyUp: function (keyEvent) {
    if (keyEvent.keyCode === 13 && this._address.value !== '') {
      this._doGeocode(this._address.value);
    }
  },

  _onSearchClick: function (/*clickEvent*/) {
    if (this._address.value !== '') {
      this._doGeocode(this._address.value);
    }
  },

  toggle: function (/*clickEvent*/) {
    if (L.DomUtil.hasClass(this._container, CLASS_ENABLED)) {
      this.disable();
    } else {
      this.enable();
    }
  },

  enable: function () {
    L.DomUtil.addClass(this._container, CLASS_ENABLED);
    this._address.focus();

    this.fire('enabled');
  },

  disable: function () {
    L.DomUtil.removeClass(this._container, CLASS_ENABLED);

    this.fire('disabled');
  },

  _geocodeSuccess: function (loc) {
    this._setLoading(false);
    this.setLocation(loc);
    this._address.blur();
  },

  _geocodeError: function (statusCode, statusMessage) {
    this._setLoading(false);
    this.fire('locationError', {
      code: statusCode,
      message: statusMessage
    });
  },

  _setLoading: function (loading) {
    if (loading) {
      L.DomUtil.addClass(this._container, 'loading');
      this._address.disabled = true;
      this._submit.disabled = true;
    } else {
      L.DomUtil.removeClass(this._container, 'loading');
      this._address.disabled = false;
      this._submit.disabled = false;
      this._address.focus();
    }
  }
});

module.exports = GeocodeControl;

},{"locationview/Geocoder":24}],24:[function(require,module,exports){
'use strict';


var ConfidenceCalculator = require('locationview/ConfidenceCalculator'),
    Util = require('util/Util');


// Static incrementor for uniqueness
var GEOCODE_REQUEST_ID = 0;
var METHOD_GEOCODE = 'geocode';

// Forward and reverse Url should conform to ESRI API
var DEFAULTS = {
  // API endpoint for forward geocode searches
  forwardUrl: 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find',

   // Radial distance in meters for revserse geocode searches
  reverseRadius: 5000,

  // API endpoint for reverse geocode searches
  reverseUrl: 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode',
};


/**
 * Creates a new geocoder object.
 *
 * @param options {Object}
 *      Configuration options. See DEFAULTS for details.
 *      {forwardUrl} and/or {reverseUrl}.
 */
var Geocoder = function (params) {
  var _this,
      _initialize,

      _forwardUrl,
      _reverseRadius,
      _reverseUrl,

      _buildLocationResult,
      _buildPlaceName,
      _getCallbackName;


  _this = {};

  _initialize = function (params) {
    params = Util.extend({}, DEFAULTS, params);

    _forwardUrl = params.forwardUrl;
    _reverseUrl = params.reverseUrl;
    _reverseRadius = params.reverseRadius;
  };


  /**
   * Private static method.
   *
   * Creates a {location} object from the given {geocodeResponse} and
   * {originalRequest}.
   *
   * @param geocodeResponse {Object}
   *      The first location object returned by the JSONP request.
   * @param originalRequest {Object}
   *      The parameters used to create the original JSONP request.
   *
   * @return {Object}
   *      A location object for use with LocationView and LocationControl
   *      components.
   */
  _buildLocationResult = function (geocodeResponse, originalRequest) {
    var location,
        providedLocation,
        result;

    location = {
      method: METHOD_GEOCODE,
      place: null,
      latitude: null,
      longitude: null,
      confidence: null
    };

    if (originalRequest.location) {
      // reverse lookup
      result = geocodeResponse.address;
      providedLocation = originalRequest.location.split(',');

      location.place = result.Match_addr;
      location.latitude = geocodeResponse.location.y;
      location.longitude = geocodeResponse.location.x;
      location.confidence = ConfidenceCalculator.computeFromCoordinates(
          providedLocation[1], providedLocation[0]);
    } else {
      // forward lookup
      result = geocodeResponse.locations[0];

      location.place = originalRequest.text || result.name;
      location.latitude = result.feature.geometry.y;
      location.longitude = result.feature.geometry.x;
      location.confidence = ConfidenceCalculator.computeFromGeocode(result);
    }

    return location;
  };

  /**
   *
   * @param responseLocation {Object}
   *      A location object returned from the geocoding api
   *
   * @return {String}
   *      A placename
   */
  _buildPlaceName = function (responseLocation) {
    var placename;

    placename = [];

    if (responseLocation.street) {
      placename.push(responseLocation.street);
    }

    if (responseLocation.adminArea5) {
      placename.push(responseLocation.adminArea5);
    }

    if (responseLocation.adminArea3) {
      placename.push(responseLocation.adminArea3);
    }

    if (responseLocation.postalCode) {
      placename.push(responseLocation.postalCode);
    }

    return placename.join(', ');
  };

  /**
   * Private static method.
   *
   * Computes a unique string suitable for use in creating a new global
   * callback method.
   *
   * @return {String}
   *      A unique string.
   */
  _getCallbackName = function () {
    var callback = 'geocode_' + (new Date()).getTime() + '_' +
        GEOCODE_REQUEST_ID;

    GEOCODE_REQUEST_ID += 1;
    return callback;
  };


  /**
   * Performs asynchronous forward geocode requests.
   *
   * @param addressString {String}
   *      The address string to geocode.
   * @param successCallback {Function}
   *      The callback method to execute on success. This callback should expect
   *      a {location} object as its singal parameter.
   * @param errorCallback {Function}
   *      The callback method to execute on error. This callback should expect
   *      {statusCode} and {statusMessage} parameters.
   */
  _this.forward = _this.geocode = function (addressString, successCallback,
      errorCallback) {
    var request = {
      text: addressString
    };

    _this.submitRequest(request, _forwardUrl, successCallback, errorCallback);
  };

  /**
   * Performs asynchronous reverse geocode requests.
   *
   * @param latitude {String}
   *      The latitude of the coordinate to reverse geocode.
   * @param longitude {String}
   *      The longitude of the coordinate to reverse geocode.
   * @param successCallback {Function}
   *      The callback method to execute on success. This callback should expect
   *      a {location} object as its singal parameter.
   * @param errorCallback {Function}
   *      The callback method to execute on error. This callback should expect
   *      {statusCode} and {statusMessage} parameters.
   */
  _this.reverse = _this.reverseGeocode = function (latitude, longitude,
      successCallback, errorCallback) {
    var request = {
      location: '' + longitude + ',' + latitude,
      distance: _reverseRadius
    };

    _this.submitRequest(request, _reverseUrl, successCallback, errorCallback);
  };

  /**
   * Private method.
   *
   * Executes the JSONP request. Called internally by {forward} and {reverse}
   * methods.
   *
   * @param params {Object}
   *      Parameters for the request.
   * @param url {String}
   *      The webservice URL against which to perform the request.
   * @param successCallback {Function}
   *      The callback method to execute on success. This callback should expect
   *      a {location} object as its singal parameter.
   * @param errorCallback {Function}
   *      The callback method to execute on error. This callback should expect
   *      {statusCode} and {statusMessage} parameters.
   */
  _this.submitRequest = function (params, url, successCallback, errorCallback) {

    var script = document.createElement('script'),
        insertAt = document.querySelector('script'),
        request = ['f=pjson'],
        callbackName = _getCallbackName(),
        key = null, cleanup = null, cleanedUp = false;


    request.push('callback=' + callbackName);
    request.push('f=pjson');

    // build up the full request URL based on the input parameters
    for (key in params) {
      request.push(key + '=' + params[key]);
    }

    // callback method used to clean up memory following the JSONP response
    cleanup = function () {
      if (cleanedUp) {
        return;
      }

      window[callbackName] = null;
      delete window[callbackName];

      script.parentNode.removeChild(script);
      script = null;

      cleanedUp = true;
    };

    // JSONP callback method (attached to global window)
    window[callbackName] = function (response) {
      var error;

      if (( // failed forward lookup
            !response.hasOwnProperty('locations') ||
            response.locations.length === 0
          ) &&
          // failed reverse lookup
          !response.hasOwnProperty('address')) {    // failed reverse lookup
        error = response.error || {};

        // Failure
        errorCallback(error.code || 404,
            (error.details && error.details.length) ? error.details[0] :
                error.message || 'No location found.');
      } else {
        // Success I guess...
        successCallback(_buildLocationResult(response, params));
        cleanup();
      }

    };

    // fire off the JSONP request
    script.src = url + '?' + request.join('&');
    script.onLoad = cleanup;
    script.onError = cleanup;
    insertAt.parentNode.insertBefore(script, insertAt);
  };


  _initialize(params);
  params = null;
  return _this;
};


module.exports = Geocoder;

},{"locationview/ConfidenceCalculator":21,"util/Util":"util/Util"}],25:[function(require,module,exports){
/* global L */
'use strict';


var ConfidenceCalculator = require('locationview/ConfidenceCalculator');


var CLASS_NAME = 'location-geolocation-control';
var METHOD = 'geolocation';
var ENABLED_CLASS = 'location-control-enabled';


var DEFAULTS = {
  'method': METHOD,
  'geolocation': navigator.geolocation,
  'position': 'topleft',
  'iconClass': 'location-control-icon',
  'helpText': 'Use Current Location',
  'infoText': 'Attempt to automatically locate my <b>current location</b>.'
};



/**
 * @params geolocation {object} optional api to replace navigator.geolocation
 *         should have a getCurrentPosition call.
 */
var GeolocationControl = L.Control.extend({
  includes: L.Mixin.Events,

  initialize: function (options) {
    L.Util.setOptions(this, L.Util.extend({}, DEFAULTS, options));
    this._geolocateSuccess = this._geolocateSuccess.bind(this);
    this._geolocateError = this._geolocateError.bind(this);
  },

  onAdd: function (map) {
    var options = this.options,
        stop = L.DomEvent.stopPropagation,
        container,
        toggle;

    container = document.createElement('div');
    container.classList.add('location-control');
    container.classList.add(CLASS_NAME);
    container.innerHTML = [
      '<a class="', options.iconClass, '"></a>',
      '<span class="help">', options.helpText, '</span>'
    ].join('');

    toggle = container.querySelector('a');

    this._map = map;
    this._container = container;
    this._toggle = toggle;

    L.DomEvent.addListener(toggle, 'click', this.toggle, this);
    L.DomEvent.addListener(container, 'click', stop);
    L.DomEvent.addListener(container, 'dblclick', stop);
    L.DomEvent.addListener(container, 'keydown', stop);
    L.DomEvent.addListener(container, 'keyup', stop);
    L.DomEvent.addListener(container, 'keypress', stop);
    L.DomEvent.addListener(container, 'mousedown', stop);

    return container;
  },

  onRemove: function () {
    var stop = L.DomEvent.stopPropagation,
        container = this._container,
        toggle = this._toggle;

    L.DomEvent.removeListener(toggle, 'click', this.toggle);
    L.DomEvent.removeListener(container, 'click', stop);
    L.DomEvent.removeListener(container, 'dblclick', stop);
    L.DomEvent.removeListener(container, 'keydown', stop);
    L.DomEvent.removeListener(container, 'keyup', stop);
    L.DomEvent.removeListener(container, 'keypress', stop);
    L.DomEvent.removeListener(container, 'mousedown', stop);
    this._container = null;
    this._toggle = null;
    this._map = null;
  },

  doGeolocate: function () {
    var geolocation = this.options.geolocation;

    this._container.classList.add(ENABLED_CLASS);

    if (geolocation) {
      geolocation.getCurrentPosition(this._geolocateSuccess,
        this._geolocateError);
    } else {
      this._geolocateError({
        code: 0,
        message: 'Geolocation not supported'
      });
    }

    this.fire('enabled');
  },

  _geolocateSuccess: function (position) {
    this._container.classList.remove(ENABLED_CLASS);

    this.setLocation({
        place: null,
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
        method: METHOD,
        confidence: ConfidenceCalculator.computeFromGeolocate(
          position.coords.accuracy)
    });
  },

  _geolocateError: function (error) {
    this._container.classList.remove(ENABLED_CLASS);

    this.fire('locationError', error);
  },

  setLocation: function (location, options) {
    // API method, this control has nothing to do
    if (!(options && options.silent)) {
      this.fire('location', {'location': location});
    }
  },

  toggle: function (clickEvent) {
    this.enable();
    L.DomEvent.stop(clickEvent);
  },

  enable: function () {
    this.doGeolocate();
  },

  disable: function () {
    // API method, this control has nothing to do
  }

});


GeolocationControl.METHOD = METHOD;


module.exports = GeolocationControl;

},{"locationview/ConfidenceCalculator":21}],26:[function(require,module,exports){
/* global L */
'use strict';


var ConfidenceCalculator = require('locationview/ConfidenceCalculator'),
    CoordinateControl = require('locationview/CoordinateControl'),
    GeocodeControl = require('locationview/GeocodeControl'),
    GeolocationControl = require('locationview/GeolocationControl'),
    PointControl = require('locationview/PointControl');


var CLASS_NAME = 'location-location-control',
    CLASS_ENABLED = CLASS_NAME + '-enabled';


var DEFAULTS = {
  'location': null,
  'position': 'bottomleft',
  'el': null,
  'iconClass': CLASS_NAME + '-icon location-control-icon',
  'helpText': 'Show Location Options'
};

var LOCATION_DEFAULTS = {
  'place': null,
  'latitude': 0,
  'longitude': 0,
  'method': 'unspecified',
  'confidence': ConfidenceCalculator.NOT_COMPUTED
};


var LocationControl = L.Control.extend({
  includes: L.Mixin.Events,

  initialize: function (options) {
    var controls;

    options = L.Util.extend({}, DEFAULTS, options);
    L.Util.setOptions(this, options);

    this._el = this.options.el || document.body;
    this._location = this.options.location;

    controls = [];
    if (options.includeGeolocationControl) {
      controls.push(options.geolocationControl || new GeolocationControl());
    }
    if (options.includeGeocodeControl) {
      controls.push(options.geocodeControl || new GeocodeControl());
    }
    if (options.includeCoordinateControl) {
      controls.push(options.coordinateControl || new CoordinateControl());
    }
    if (options.includePointControl) {
      controls.push(options.pointControl || new PointControl());
    }
    this._controls = controls;
  },

  _eachControl: function (callback) {
    var controls = this._controls,
        control,
        i, len;

    for (i = 0, len = controls.length; i < len; i++) {
      control = controls[i];
      callback(control, i, controls);
    }
  },

  onAdd: function (map) {
    var options = this.options,
        stop = L.DomEvent.stopPropagation,
        container,
        toggle,
        details;

    this._map = map;
    this._enabled = null;

    this._eachControl(function (control) {
      map.addControl(control);
      control.on('location', this.setLocation, this);
      control.on('locationError', this._onLocationError, this);
      control.on('enabled', this._onControlEnabled, this);
    }.bind(this));
    this.on('enabled', this._onControlEnabled, this);

    // Create Information Control (i) button
    container = document.createElement('div');
    container.classList.add('location-control');
    container.classList.add(CLASS_NAME);
    container.innerHTML = [
      '<a class="', options.iconClass, '">i</a>',
      '<span class="help">', options.helpText, '</span>',
    ].join('');
    toggle = container.querySelector('a');

    this._container = container;
    this._toggle = toggle;

    // create overlay with control information
    this._createInformationMenu();
    details = this._details;
    this._el.appendChild(details);


    L.DomEvent.addListener(toggle, 'click', this.toggle, this);
    L.DomEvent.addListener(details, 'click', stop);
    L.DomEvent.addListener(details, 'dblclick', stop);
    L.DomEvent.addListener(details, 'keydown', stop);
    L.DomEvent.addListener(details, 'keyup', stop);
    L.DomEvent.addListener(details, 'keypress', stop);
    L.DomEvent.addListener(details, 'mousedown', stop);
    L.DomEvent.addListener(container, 'click', stop);
    L.DomEvent.addListener(container, 'dblclick', stop);
    L.DomEvent.addListener(container, 'keydown', stop);
    L.DomEvent.addListener(container, 'keyup', stop);
    L.DomEvent.addListener(container, 'keypress', stop);
    L.DomEvent.addListener(container, 'mousedown', stop);

    return container;
  },

  onRemove: function (map) {
    var stop = L.DomEvent.stopPropagation,
        container = this._container,
        toggle = this._toggle,
        details = this._details;

    this._eachControl(function (control) {
      map.removeControl(control);
      control.off('location', this.setLocation, this);
      control.off('locationError', this._onLocationError, this);
      control.off('enabled', this._onControlEnabled, this);
    }.bind(this));
    this.off('enabled', this._onControlEnabled, this);

    L.DomEvent.removeListener(toggle, 'click', this.toggle);
    L.DomEvent.removeListener(details, 'click', stop);
    L.DomEvent.removeListener(details, 'dblclick', stop);
    L.DomEvent.removeListener(details, 'keydown', stop);
    L.DomEvent.removeListener(details, 'keyup', stop);
    L.DomEvent.removeListener(details, 'keypress', stop);
    L.DomEvent.removeListener(details, 'mousedown', stop);
    L.DomEvent.removeListener(container, 'click', stop);
    L.DomEvent.removeListener(container, 'dblclick', stop);
    L.DomEvent.removeListener(container, 'keydown', stop);
    L.DomEvent.removeListener(container, 'keyup', stop);
    L.DomEvent.removeListener(container, 'keypress', stop);
    L.DomEvent.removeListener(container, 'mousedown', stop);

    this._el.removeChild(details);
    this._details = null;
    this._container = null;
    this._toggle = null;
    this._map = null;
  },

  /**
   * Create a help/info menu with detailed descriptions of each control
   *
   * @return {[type]} [description]
   */
  _createInformationMenu: function () {
    var stop = L.DomEvent.stopPropagation,
        panel,
        list;

    panel = document.createElement('div');
    panel.classList.add('information-list-mask');
    panel.innerHTML = '<ul class="information-list"></ul>';
    list = panel.querySelector('.information-list');

    this._eachControl(function (control, index) {
      var controlOptions = control.options,
          controlEl = control.__infoEl;

      if (!controlEl) {
        controlEl = document.createElement('li');
        controlEl.setAttribute('data-index', index);
        controlEl.innerHTML = [
          '<span title="', controlOptions.helpText, '"',
              ' class="location-control-icon ',
              controlOptions.iconClass, '-', controlOptions.method,
              '"></span>',
          '<p>', controlOptions.infoText, '</p>'
        ].join('');
        L.DomEvent.addListener(controlEl, 'click', control.enable, control);
        control.__infoEl = controlEl;
      }

      list.appendChild(controlEl);
    });

    // create div for information menu
    this._details = panel;

    // stop interaction with map when the information menu is visible
    L.DomEvent.on(panel, 'mousedown', stop);
    L.DomEvent.on(panel, 'dblclick', stop);
    L.DomEvent.on(panel, 'wheel', stop);
  },

  toggle: function () {
    if (!this._el.classList.contains(CLASS_ENABLED)) {
      this.enable();
    } else {
      this.disable();
    }
  },

  enable: function () {
    this._el.classList.add(CLASS_ENABLED);

    this.fire('enabled');
  },

  disable: function () {
    this._el.classList.remove(CLASS_ENABLED);

    this.fire('disabled');
  },

  _onControlEnabled: function (e) {
    var target = null;

    if (e) {
      target = e.target;
    }

    this._eachControl(function (control) {
      if (control !== target) {
        control.disable();
      }
    });

    if (target !== this) {
      // hide details
      this.disable();
    }
  },

  setLocation: function (e, options) {
    var zoomLevel,
        location = e;

    if (e) {
      if (e.type === 'location') {
        location = e.location;
      }
    }

    if (location !== null) {
      location = {
        place: location.place || LOCATION_DEFAULTS.place,
        latitude: location.latitude || LOCATION_DEFAULTS.latitude,
        longitude: location.longitude || LOCATION_DEFAULTS.longitude,
        confidence: location.confidence || LOCATION_DEFAULTS.confidence,
        method: location.method || LOCATION_DEFAULTS.method
      };
    }

    this._location = location;
    this._eachControl(function (control) {
      control.setLocation(location, {'silent': true});
    });

    if (location) {
      zoomLevel = ConfidenceCalculator.computeZoomFromConfidence(
          location.confidence);
      // do not zoom the user out
      if (zoomLevel < this._map._zoom) {
        zoomLevel = this._map._zoom;
      }

      // center the map on the new point
      this._centerMapOnPoint(location, zoomLevel);

    } else {
      // enable the location control
      this.enable();
    }

    if (!(options && options.silent)) {
      this.fire('location', {'location':location});
    }
  },

  getLocation: function () {
    return this._location;
  },

  /**
   * Check to see if point is currently visible with map bounds.
   * If the point is within the map bounds do not pan the map.
   * Center when the new location is not visible or the map
   * is being zoomed-in.
   *
   * @param  {object} location, leaflet location object
   * @param  {integer} newZoomLevel, current map zoom level
   *
   */
  _centerMapOnPoint: function (location, newZoomLevel) {
    var centerMap = false,
        oldZoomLevel = this._map._zoom,
        mapBounds = this._map.getBounds(),
        newLocation = [location.latitude, location.longitude];

    if (!mapBounds.contains(newLocation) || newZoomLevel > oldZoomLevel) {
      centerMap = true;
    }

    if (centerMap) {
      this._map.setView({
          lon: location.longitude,
          lat: location.latitude
        },
        newZoomLevel
      );
    }

    return centerMap;
  },

  _onLocationError: function (error) {
    // TODO, make this better
    window.alert(error.message);
  }

});

module.exports = LocationControl;

},{"locationview/ConfidenceCalculator":21,"locationview/CoordinateControl":22,"locationview/GeocodeControl":23,"locationview/GeolocationControl":25,"locationview/PointControl":28}],27:[function(require,module,exports){
/* global L */
'use strict';


var Events = require('util/Events'),
    LocationControl = require('locationview/LocationControl'),
    ModalView = require('mvc/ModalView'),
    Util = require('util/Util');


var DEFAULTS = {
  autoOpen: false,
  includePointControl: true,       // Manages location via pin on map
  includeCoordinateControl: true,  // Manages location via lat/lng input
  includeGeocodeControl: true,     // Manages location via address input
  includeGeolocationControl:       // Manages location via auto-detect (W3C)
      navigator && 'geolocation' in navigator,
  callback: function (/*location*/) {}
};


/**
 * Helper method to get URLs for any ArcGIS Online map tiles.
 *
 * @param serviceName {String}
 *        The name of the map tile service for which to return a URL template.
 *
 * @return {String}
 *         The service URL template for use in an L.TileLayer.
 */
var __get_arcgisonline_url = function (serviceName) {
  var urlPrefix = '//server.arcgisonline.com/ArcGIS/rest/services/',
      urlSuffix = '/MapServer/tile/{z}/{y}/{x}';

  return urlPrefix + serviceName + urlSuffix;
};


/**
 * @constructor
 * Creates a new LocationView.
 *
 * @param params {Object}
 *        An object containing configuration params. See DEFAULTS for
 *        detailed documentation on what can be specified.
 */
var LocationView = function (params) {
  var _this,
      _initialize,

      _callback,
      _includeCoordinateControl,
      _includeGeocodeControl,
      _includeGeolocationControl,
      _includePointControl,
      _locationControl,
      _map,
      _mapContainer,
      _modal,

      _createMap,
      _createModal,
      _onLocation;


  _this = Events();

  _initialize = function () {
    params = Util.extend({}, DEFAULTS, params || {});

    _callback = params.callback;
    _includePointControl = params.includePointControl;
    _includeGeolocationControl = params.includeGeolocationControl;
    _includeGeocodeControl = params.includeGeocodeControl;
    _includeCoordinateControl = params.includeCoordinateControl;

    _createMap();   // Defines this._map as a Leaflet map
    _createModal(); // Defines this._modal as a ModalView

    if (params.autoOpen) {
      _this.show();
    }

    params = null;
  };

  /**
   * @PrivateInitializer
   * Called during construction. Creates and initializes the map component.
   *
   * Defines:
   *      _map {L.Map}
   *      _mapContainer {DomElement}
   *      _locationControl {LocationControl}
   *
   */
  _createMap = function () {
    var layerControl = new L.Control.Layers();

    _mapContainer = document.createElement('div');
    _mapContainer.classList.add('locationview-map');

    _map = new L.Map(_mapContainer, {
      zoomControl: !Util.isMobile(),
      attributionControl: false
    });

    _map.fitBounds([[70.0, -170.0], [-50.0, 170.0]]);

    layerControl.addBaseLayer(new L.TileLayer(
        __get_arcgisonline_url('NatGeo_World_Map'))
        .addTo(_map), 'Topography');
    layerControl.addBaseLayer(new L.TileLayer(
        __get_arcgisonline_url('Canvas/World_Light_Gray_Base')), 'Grayscale');
    layerControl.addBaseLayer(new L.TileLayer(
        __get_arcgisonline_url('World_Imagery')), 'Satellite');

    // TODO :: Use a real location control
    _locationControl = new LocationControl({
      el: _mapContainer,
      includePointControl: _includePointControl,
      includeCoordinateControl: _includeCoordinateControl,
      includeGeocodeControl: _includeGeocodeControl,
      includeGeolocationControl: _includeGeolocationControl
    });
    _locationControl.enable();
    _map.addControl(layerControl);          // Layer switcher
    _map.addControl(_locationControl); // Methods to set locations
  };

  /**
   * @PrivateInitializer
   * Called during construction. Creates and initializes the modal component.
   *
   * Defines:
   *      this._modal {ModalView}
   *
   */
  _createModal = function () {
    _modal = new ModalView(_mapContainer, {
      title: 'Specify a Location',
      classes: ['locationview'],
      buttons: [
        {
          text: 'Use this Location',
          classes: ['locationview-button'],
          callback: function () {
            _callback(_locationControl.getLocation());
            _modal.hide();
          }
        }
      ]
    });
    _locationControl.on('location', _onLocation);
    /* Called initially to disable the button if you enter the location view
     * with no location information, or enable it if location information exists
     */
    _onLocation();
  };


  /**
   * @PrivateInitializer
   * Toggles the "Use this Location" button in the footer of the modal view to
   * to be disabled when the location is null and enabled otherwise.
   *
   */
  _onLocation = function (e) {
    var button = _modal.el.querySelector('.locationview-button'),
        location;

    if (e) {
      if (e.type === 'location') {
        location = e.location;
      }
    }

    _this.trigger('location', location);

    if (location) {
      button.disabled = false;
      button.innerHTML = 'Use this Location';
      button.classList.add('locationview-button-enabled');
      button.classList.remove('locationview-button-disabled');
    } else {
      button.disabled = true;
      button.innerHTML = 'No Location Selected';
      button.classList.add('locationview-button-disabled');
      button.classList.remove('locationview-button-enabled');
    }
  };


  /**
   * @APIMethod
   * Hides the LocationView.
   *
   */
  _this.hide = function () {
    _modal.hide();
  };

  /**
   * @APIMethod
   * Shows the LocationView. If no options are specified, there is no default
   * location displayed and the map will show roughly one instance of the
   * entire world.
   *
   * @param options {Object}
   *        Configuration options for default extent and location when the
   *        LocationView is shown.
   *
   *        extent {Array{Array{Number}}}
   *             An array defining the map extent. The first element of this
   *             array is an array containing numbers representing the
   *             latitude and longitude of the top-left corner of the extent.
   *             The second element of this array is an array containing
   *             numbers representing the latitude and longitude of the bottom
   *             right corner of the extent.
   *        location {Object}
   *             A location object to use as the starting location. This
   *             location will be displayed initially and also returned if the
   *             user does not change it. If null, any previously set location
   *             is cleared.
   */
  _this.show = function (options) {
    _modal.show();
    _this.updateMap(options);
  };

  /**
   * @APIMethod
   * Sets initial map display when showing the map.
   *
   * @param options {Object}
   *        Options for setting initial map display properties when showing
   *        the location view. See LocationView.show for more details.
   */
  _this.updateMap = function (options) {
    options = options || {};
    _map.invalidateSize();

    if (options.hasOwnProperty('location')) {
      _locationControl.setLocation(options.location);
      _locationControl.disable();
    }

    if (options.hasOwnProperty('extent')) {
      _map.fitBounds(options.extent);
    }
  };


  _initialize();
  return _this;
};


module.exports = LocationView;

},{"locationview/LocationControl":26,"mvc/ModalView":37,"util/Events":"util/Events","util/Util":"util/Util"}],28:[function(require,module,exports){
/* global L */
'use strict';

var ConfidenceCalculator = require('locationview/ConfidenceCalculator');


var CLASS_NAME = 'location-point-control';
var CLASS_ENABLED = 'location-control-enabled';
var CLASS_LOCATION = CLASS_NAME + '-active';
var METHOD = 'point';

var DEFAULT_OPTIONS = {
  method: METHOD,
  position: 'topleft',
  defaultLocation: null,
  defaultEnabled: false,
  iconClass: 'location-control-icon',
  helpText: 'Drop Pin',
  infoText: '<b>Drop pin</b> on the map to specify a location.'
};


var PointControl = L.Control.extend({
  includes: L.Mixin.Events,

  initialize: function (options) {
    options = L.Util.extend({}, DEFAULT_OPTIONS, options);
    L.Util.setOptions(this, options);

    this._isEnabled = options.defaultEnabled;
    this._marker = new L.Marker([0, 0], {draggable: true});
    this._marker.bindPopup();
    this.setLocation(options.defaultLocation);
  },

  setLocation: function (location, options) {
    var map = this._map,
        marker = this._marker;

    if (location !== null) {
      // update marker
      marker.setLatLng(new L.LatLng(location.latitude, location.longitude));
      marker.setPopupContent(this._formatLocation(location));
      // add marker
      if (map && !marker._map) {
        marker.addTo(map);
      }
    } else {
      // clear popup content
      marker.setPopupContent('');
      // remove marker
      if (map && marker._map) {
        map.removeLayer(marker);
      }
    }

    if (!(options && options.hasOwnProperty('silent') && options.silent)) {
      this.fire('location', {'location': location});
    }
  },

  getLocation: function () {
    if (!this._marker._map) {
      return null;
    }
    return this._createPointLocation(this._marker.getLatLng());
  },

  onAdd: function (map) {
    var options = this.options,
        stop = L.DomEvent.stopPropagation,
        container,
        toggle;

    container = document.createElement('div');
    container.classList.add('location-control');
    container.classList.add(CLASS_NAME);
    container.innerHTML = [
      '<a class="', options.iconClass, '"></a>',
      '<span class="help">', options.helpText, '</span>'
    ].join('');

    toggle = container.querySelector('a');

    this._map = map;
    this._container = container;
    this._toggle = toggle;

    // If enabled, bind map click handlers
    if (this.options.defaultEnabled) {
      this.enable();
    }

    // Enable/disable control if user clicks on it
    L.DomEvent.addListener(toggle, 'click', this.toggle, this);
    L.DomEvent.addListener(container, 'click', stop);
    L.DomEvent.addListener(container, 'dblclick', stop);
    L.DomEvent.addListener(container, 'keydown', stop);
    L.DomEvent.addListener(container, 'keyup', stop);
    L.DomEvent.addListener(container, 'keypress', stop);
    L.DomEvent.addListener(container, 'mousedown', stop);
    this._marker.on('dragend', this._onDragEnd, this);

    return container;
  },

  onRemove: function (map) {
    var stop = L.DomEvent.stopPropagation,
        container = this._container,
        toggle = this._toggle;

    if (this._isEnabled) {
      this.disable();
    }

    L.DomEvent.removeListener(toggle, 'click', this.toggle);
    L.DomEvent.removeListener(container, 'click', stop);
    L.DomEvent.removeListener(container, 'dblclick', stop);
    L.DomEvent.removeListener(container, 'keydown', stop);
    L.DomEvent.removeListener(container, 'keyup', stop);
    L.DomEvent.removeListener(container, 'keypress', stop);
    L.DomEvent.removeListener(container, 'mousedown', stop);
    this._marker.off('dragend', this._onDragEnd, this);

    map.removeLayer(this._marker);

    this._map = null;
    this._container = null;
    this._toggle = null;
  },

  _bindMapEventHandlers: function () {
    this._map.on('click', this._onClick, this);
    this._map.on('boxzoomstart', this._onBoxZoomStart, this);
  },

  _unbindMapEventHandlers: function () {
    this._map.off('click', this._onClick, this);
    this._map.off('boxzoomstart', this._onBoxZoomStart, this);
  },

  /**
   * Map event listener. This listener is only active when this control is
   * enabled. The _{un}bindMapEventHandlers methods will add and remove the
   * listener that activates this method call.
   *
   * @param mouseEvent {MouseEvent}
   */
  _onClick: function (mouseEvent) {
    if (this._boxZoomStarted === true) {
      this._boxZoomStarted = false;
      return;
    }
    this.setLocation(this._createPointLocation(mouseEvent.latlng));
  },

  _onDragEnd: function () {
    this.setLocation(this._createPointLocation(this._marker.getLatLng()));
  },

  _onBoxZoomStart: function () {
    this._boxZoomStarted = true;
  },

  _createPointLocation: function (latlng) {
    return {
      place: null,
      latitude: latlng.lat,
      longitude: latlng.lng,
      method: METHOD,
      confidence: this._computeConfidence()
    };
  },

  _computeConfidence: function () {
    return ConfidenceCalculator.computeFromPoint(this._map.getZoom());
  },

  toggle: function (clickEvent) {
    if (this._isEnabled) {
      this.disable();
    } else {
      this.enable();
    }
    L.DomEvent.stop(clickEvent);
  },

  enable: function () {
    var mapContainer = this._map.getContainer();

    L.DomUtil.addClass(this._container, CLASS_ENABLED);
    L.DomUtil.addClass(mapContainer, CLASS_LOCATION);

    this._bindMapEventHandlers();
    this._isEnabled = true;
    this._boxZoomStarted = false;

    this.fire('enabled');
  },

  disable: function () {
    var mapContainer = this._map ? this._map.getContainer() : null;

    L.DomUtil.removeClass(this._container, CLASS_ENABLED);
    L.DomUtil.removeClass(mapContainer, CLASS_LOCATION);

    this._unbindMapEventHandlers();
    this._isEnabled = false;

    this.fire('disabled');
  },

  _formatLocation: function (location) {
    var lat = location.latitude,
        lng = location.longitude,
        confidence = location.confidence,
        place = location.place,
        latStr = (lat < 0.0) ? '&deg;S' : '&deg;N',
        lngStr = (lng < 0.0) ? '&deg;W' : '&deg;E',
        buf = [];

    lat = ConfidenceCalculator.roundLocation(Math.abs(lat), confidence);
    lng = ConfidenceCalculator.roundLocation(Math.abs(lng), confidence);

    if (place !== null) {
      buf.push('<p>', place, '</p>');
    }
    buf.push(lat, latStr, ', ', lng, lngStr);
    return buf.join('');
  }
});

module.exports = PointControl;

},{"locationview/ConfidenceCalculator":21}],29:[function(require,module,exports){
'use strict';

var Util = require('util/Util'),
    View = require('mvc/View');


// Default values used by constructor.
var _DEFAULTS = {
  // label - The question being asked
  label: null,
  // multiSelect - false = radio buttons, true = or checkboxes, radio is default
  multiSelect: false,
  // selectedAnswer - Any answers that should be selected by default
  selectedAnswer: null,
  // answers - Array of answers, each with attributes:
  //      value - The "value" for the input
  //      label - The answer to show the user
  //      otherValue - Optional extra value for more info
  //      otherLabel - Question to ask associate with otherValue
  answers: null
};

var _ID_SEQUENCE = 0;


// ----------------------------------------------------------------------
// Initialization Methods
// ----------------------------------------------------------------------

/**
 * Class: QuestionView
 * Creates a new QuestionView.
 *
 * @param options {Object}
 *        An object containing configuration options. See _DEFAULTS above for
 *        detailed documentation on what can be specified.
 */
var QuestionView = function (options) {
  var _this,
      _initialize,

      _answerIndex,
      _answerList,
      _options,

      _addAnswer,
      _addAnswers,
      _onBlur,
      _onChange;


  _this = View(options);
  /**
   * @constructor
   *
   */
  _initialize = function (options) {
    var section = document.createElement('section');

    _options = Util.extend({}, _DEFAULTS, options);
    _answerIndex = [];

    section.classList.add('question');

    section.appendChild(_addAnswers());

    _this.setAnswers(_options.selectedAnswer);

    _this.el.innerHTML = '';
    _this.el.appendChild(section);
  };


  /**
   * Wrap a single answer in appropriate html.
   *
   * @param answer {Object}
   *        qId {Integer} Unique identifier for the question
   *        ul {Document.Element} Container element for the answers
   *
   * @return String
   *         Contains an answer wrapped in appropriate HTML.
   *
   */
  _addAnswer = function (answer, qId, ul) {
    var _label = answer.label,
        _otherLabel = answer.otherLabel,
        _otherValue = answer.otherValue,
        _value = answer.value,
        answerId = 'answer-' + (++_ID_SEQUENCE),
        inputType = (_options.multiSelect ? 'checkbox' : 'radio'),
        li = document.createElement('li'),
        label = document.createElement('label'),
        input = document.createElement('input'),
        answerText = document.createTextNode(_label);

    input.type = inputType;
    input.name = qId;
    input.id = answerId;
    input.value = _value;

    label.setAttribute('for', answerId);
    label.classList.add('answer');
    label.appendChild(answerText);

    li.appendChild(input);
    li.appendChild(label);

    if (typeof _otherLabel === 'string') {
      var textbox = document.createElement('input');
      textbox.type = 'text';
      textbox.name = qId + '-other';
      textbox.id = answerId + '-other';
      textbox.value = _otherValue;
      textbox.classList.add('question-other');
      textbox.placeholder = _otherLabel;
      li.appendChild(textbox);
    }
    ul.appendChild(li);
  };

  /**
   * Add all answers to the list of answers.
   *
   * @return String
   *         Contains a list of answer options wrapped in appropriate HTML.
   *
   */
  _addAnswers = function () {
    var answers = _options.answers,
        answerElement,
        questionId = 'question-' + (++_ID_SEQUENCE),
        legend = document.createElement('legend'),
        ul = document.createElement('ul'),
        answerIndex = _answerIndex,
        answer,
        i,
        len;

    ul.classList.add('question-answers');
    _answerList = document.createElement('fieldset');
    _answerList.name = questionId;
    legend.textContent = options.label;
    _answerList.appendChild(legend);

    if (answers !== null) {
      for (i=0, len=answers.length; i<len; i++) {
        _addAnswer(answers[i], questionId, ul);
      }
      _answerList.appendChild(ul);

      // Keep track of answers with array of answer objects.
      for (i=0, len=answers.length; i<len; i++) {
        answer = answers[i];

        answerIndex[answer.value] = i;
      }

      answerElement = _answerList.getElementsByTagName('li');
      for (i=0, len=answerElement.length; i<len; i++) {
        var inputs = answerElement[i].getElementsByTagName('input');
        inputs[0].addEventListener('change', _onChange);
        if (inputs[1] !== undefined) {
          inputs[1].addEventListener('blur', _onBlur);
        }
      }
    }

    return _answerList;
  };

  /**
   * Event listener for "other" inputs.
   * Text boxes.
   *      If the value in the text box changes, save the change.
   *
   */
  _onBlur = function (ev) {
    var _target = ev.target,
        answers = _options.answers,
        answerElement = _answerList.getElementsByTagName('li'),
        i,
        len = answerElement.length;

    for (i=0; i<len; i++) {
      var inputs = answerElement[i].getElementsByTagName('input');
      if (inputs[1] === _target) {
        if (answers[i].otherValue !== _target.value) {
          answers[i].otherValue = _target.value;
          _this.trigger('change', _this);
        }
        break;
      }
    }
  };

  /**
   * Event listener for "other" inputs.
   * Radio buttons & check boxes.
   *       Enable or disable text boxes associated with "other".
   *       Put focus in text box when associated radio/checkbox is selected.
   *
   */
  _onChange = function (ev) {
    var _target = ev.target,
        answerElement = _answerList.getElementsByTagName('li'),
        i,
        len = answerElement.length,
        checked;

    for (i=0; i<len; i++) {
      var inputs = answerElement[i].getElementsByTagName('input');
      // If there is an "other" input textbox
      if (inputs[1] !== undefined) {
        checked = inputs[0].checked;
        inputs[1].disabled = !checked;
        // If the "other" input checkbox for this textbox is target
        if (inputs[0] === _target && checked) {
          inputs[1].focus();
          inputs[1].setSelectionRange(0, inputs[1].value.length);
        }
      }
    }
    _this.trigger('change', _this);
  };


// ----------------------------------------------------------------------
// Public Methods
// ----------------------------------------------------------------------


  /**
   * Clear all answers.
   *       Uncheck all check boxes and radio buttons.
   *       Disable all text boxes for "other" fields.
   */
  _this.clearAnswers = function () {
    var answerElement = _answerList.getElementsByTagName('li'),
        i,
        len = answerElement.length;

    for (i=0; i<len; i++) {
      var inputs = answerElement[i].getElementsByTagName('input');
      inputs[0].checked = false;
      // If there is an "other" input textbox
      if (inputs[1] !== undefined) {
        inputs[1].disabled = true;
      }
    }
  };

  /**
   * Clean up event listeners, remove list of answers
   *
   */
  _this.destroy = function () {
    var answerElement = _answerList.getElementsByTagName('li'),
        i,
        len = answerElement.length;

    _answerList = null;
    for (i=0; i<len; i++) {
      var inputs = answerElement[i].getElementsByTagName('input');
      inputs[0].removeEventListener('change', _onChange);
      if (inputs[1] !== undefined) {
        inputs[1].removeEventListener('blur', _onBlur);
      }
      inputs = null;
    }
    answerElement = null;
  };

  /**
   * Return list of answers.
   *
   * @return {Object|Array}
   *         Null if no answers are selected
   *         An object containing a single answer if only 1 is selected
   *         An array of answer objects if there is more than 1
   */
  _this.getAnswers = function () {
    var currentAnswer = [],
        answerElement = _answerList.getElementsByTagName('li'),
        checkedAnswer,
        i,
        len = answerElement.length;

    for (i=0; i<len; i++) {
      var inputs = answerElement[i].getElementsByTagName('input');
      if (inputs[0].checked) {
        if (inputs[1] !== undefined) {
          checkedAnswer = {
            value: inputs[0].value,
            label: answerElement[i].innerText,
            otherValue: inputs[1].value,
            otherLabel: inputs[1].placeholder
          };
        } else {
          checkedAnswer = {
            value: inputs[0].value,
            label: answerElement[i].innerText
          };
        }
        currentAnswer.push(
          checkedAnswer
        );
      }
    }

    if (currentAnswer.length === 0) {
      return null;
    } else if (_options.multiSelect) {
      return currentAnswer;
    } else {
      return currentAnswer[0];
    }
  };

  /**
   * Sets input.checked on input elements.
   * Assumes a string for the "value" of a single answer.
   *
   * @param {String}
   *        The "value" of the selected answer.
   */
  _this.selectAnswers = function (answer) {
    var inputs;

    if (typeof answer !== 'undefined') {
      inputs = answer.getElementsByTagName('input');
      if (inputs[0]) {
        inputs[0].checked = true;
        // If there is an "other" input textbox
        if (inputs[1] !== undefined) {
          inputs[1].disabled = false;
        }
      }
    }
  };

  /**
   * Finds all of the selected answers.
   * Calls selectAnswer with each of them.
   *
   * Assumes a string for the value of a single answer if multiSelect:false
   * Assumes an array of answer values if multiSelect:true
   *
   * @param {String|Array}
   *        A string containing the "value" of the selected answer.
   *        The list of currently selected answers as strings.
   */
  _this.setAnswers = function (selectedAnswer) {
    var answerElement,
        answer,
        i,
        len;

    if (_answerList !== null) {
      answerElement = _answerList.getElementsByTagName('li');

      // Make sure everything is unchecked first
      _this.clearAnswers();

      if (selectedAnswer === null) {
        return;
      }

      if (typeof selectedAnswer === 'string') {
        answer = answerElement[_answerIndex[selectedAnswer]];
        _this.selectAnswers(answer);
      } else {  // Array of strings
        for (i=0, len=selectedAnswer.length; i<len; i++) {
          answer = answerElement[_answerIndex[selectedAnswer[i]]];
          _this.selectAnswers(answer);
        }
      }
    }
  };

  _initialize(options);
  options = null;
  return _this;
};

module.exports = QuestionView;

},{"mvc/View":"mvc/View","util/Util":"util/Util"}],30:[function(require,module,exports){
'use strict';

var Vector = require('./Vector');


// static methods that operate on arrays
var __col,
    __diagonal,
    __get,
    __identity,
    __index,
    __jacobi,
    __multiply,
    __row,
    __set,
    __stringify,
    __transpose;


/**
 * Extract a column from this matrix.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @param col {Number}
 *        index of column, in range [0,n)
 * @throws Error if column out of range.
 * @return {Array<Number>} column elements.
 */
__col = function (data, m, n, col) {
  var row,
      values = [];
  if (col < 0 || col >= n) {
    throw new Error('column ' + col + ' out of range [0,' + n + ')');
  }
  if (n === 1) {
    // only one column in matrix
    return data;
  }
  values = [];
  for (row = 0; row < m; row++) {
    values.push(data[__index(m, n, row, col)]);
  }
  return values;
};

/**
 * Get array of elements on the diagonal.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @return {Array<Number>} elements on the diagonal.
 */
__diagonal = function (data, m, n) {
  var len = Math.min(m, n),
      diag = [],
      i;
  for (i = 0; i < len; i++) {
    diag.push(data[__index(m, n, i, i)]);
  }
  return diag;
};

/**
 * Get the value of an element of this matrix.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @param row {Number}
 *        row of element, in range [0,m)
 * @param col {Number}
 *        column of element, in range [0,n)
 * @throws Error if row or col are out of range.
 * @return {Number} value.
 */
__get = function (data, m, n, row, col) {
  return data[__index(m, n, row, col)];
};

/**
 * Create an identity Matrix.
 *
 * @param n {Number}
 *        number of rows and columns.
 * @return identity matrix of size n.
 */
__identity = function (n) {
  var values = [],
      row,
      col;
  for (row = 0; row < n; row++) {
    for (col = 0; col < n; col++) {
      values.push((row === col) ? 1 : 0);
    }
  }
  return values;
};

/**
 * Get the index of an element of this matrix.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @param row {Number}
 *        row of element, in range [0,m)
 * @param col {Number}
 *        column of element, in range [0,n)
 * @return {Number} index.
 */
__index = function (m, n, row, col) {
  return n * row + col;
};

/**
 * Jacobi eigenvalue algorithm.
 *
 * Ported from:
 *     http://users-phys.au.dk/fedorov/nucltheo/Numeric/now/eigen.pdf
 *
 * An iterative method for eigenvalues and eigenvectors,
 * only works on symmetric matrices.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @param maxRotations {Number}
 *        maximum number of rotations.
 *        Optional, default 100.
 * @return {Array<Vector>} array of eigenvectors, magnitude is eigenvalue.
 */
__jacobi = function (data, m, n, maxRotations) {
  var a,
      aip,
      aiq,
      api,
      app,
      app1,
      apq,
      aqi,
      aqq,
      aqq1,
      c,
      changed,
      e,
      i,
      ip,
      iq,
      p,
      phi,
      pi,
      q,
      qi,
      rotations,
      s,
      v,
      vector,
      vectors,
      vip,
      viq;

  if (m !== n) {
    throw new Error('Jacobi only works on symmetric, square matrices');
  }

  // set a default max
  maxRotations = maxRotations || 100;
  a = data.slice(0);
  e = __diagonal(data, m, n);
  v = __identity(n);
  rotations = 0;

  do {
    changed = false;

    for (p=0; p<n; p++) {
      for (q=p+1; q<n; q++) {
        app = e[p];
        aqq = e[q];
        apq = a[n * p + q];
        phi = 0.5 * Math.atan2(2 * apq, aqq - app);
        c = Math.cos(phi);
        s = Math.sin(phi);
        app1 = c * c * app - 2 * s * c * apq + s * s * aqq;
        aqq1 = s * s * app + 2 * s * c * apq + c * c * aqq;

        if (app1 !== app || aqq1 !== aqq) {
          changed = true;
          rotations++;

          e[p] = app1;
          e[q] = aqq1;
          a[n * p + q] = 0;

          for (i = 0; i < p; i++) {
            ip = n * i + p;
            iq = n * i + q;
            aip = a[ip];
            aiq = a[iq];
            a[ip] = c * aip - s * aiq;
            a[iq] = c * aiq + s * aip;
          }
          for (i = p + 1; i < q; i++) {
            pi = n * p + i;
            iq = n * i + q;
            api = a[pi];
            aiq = a[iq];
            a[pi] = c * api - s * aiq;
            a[iq] = c * aiq + s * api;
          }
          for (i = q + 1; i < n; i++) {
            pi = n * p + i;
            qi = n * q + i;
            api = a[pi];
            aqi = a[qi];
            a[pi] = c * api - s * aqi;
            a[qi] = c * aqi + s * api;
          }
          for (i = 0; i < n; i++) {
            ip = n * i + p;
            iq = n * i + q;
            vip = v[ip];
            viq = v[iq];
            v[ip] = c * vip - s * viq;
            v[iq] = c * viq + s * vip;
          }
        }
      }
    }
  } while (changed && (rotations < maxRotations));

  if (changed) {
    throw new Error('failed to converge');
  }

  vectors = [];
  for (i = 0; i < n; i++) {
    // i-th vector is i-th column
    vector = Vector(__col(v, m, n, i));
    vector.eigenvalue = e[i];
    vectors.push(vector);
  }

  return vectors;
};

/**
 * Multiply this matrix by another matrix.
 *
 * @param data1 {Array<Number>}
 *        first matrix data.
 * @param m1 {Number}
 *        number of rows in first matrix.
 * @param n1 {Number}
 *        number of columns in first matrix.
 * @param data2 {Array<Number>}
 *        second matrix data.
 * @param m2 {Number}
 *        number of rows in second matrix.
 * @param n2 {Number}
 *        number of columns in second matrix.
 * @throws Error if n1 !== m2
 * @return result of multiplication (original matrix is unchanged).
 */
__multiply = function (data1, m1, n1, data2, m2, n2) {
  var col,
      col2,
      row,
      row1,
      values;

  if (n1 !== m2) {
    throw new Error('wrong combination of rows and cols');
  }
  values = [];
  for (row = 0; row < m1; row++) {
    row1 = __row(data1, m1, n1, row);
    for (col = 0; col < n2; col++) {
      col2 = __col(data2, m2, n2, col);
      // result is dot product
      values.push(Vector.dot(row1, col2));
    }
  }
  return values;
};

/**
 * Extract a row from this matrix.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @param row {Number}
 *        index of row, in range [0,m)
 * @throws Error if row out of range.
 * @return {Array<Number>} row elements.
 */
__row = function (data, m, n, row) {
  var col,
      values;
  if (row < 0 || row >= m) {
    throw new Error('row ' + row + ' out of range [0,' + m + ')');
  }
  values = [];
  for (col = 0; col < n; col++) {
    values.push(data[__index(m, n, row, col)]);
  }
  return values;
};

/**
 * Set the value of an element of this matrix.
 *
 * NOTE: this method modifies the contents of this matrix.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @param row {Number}
 *        row of element, in range [0,m)
 * @param col {Number}
 *        column of element, in range [0,n)
 * @param value {Number}
 *        value to set.
 * @throws Error if row or col are out of range.
 */
__set = function (data, m, n, row, col, value) {
  data[__index(m, n, row, col)] = value;
};

/**
 * Display matrix as a string.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @return {String} formatted matrix.
 */
__stringify = function (data, m, n) {
  var lastRow = m - 1,
      lastCol = n - 1,
      buf = [],
      row,
      col;

  buf.push('[');
  for (row = 0; row < m; row++) {
    for (col = 0; col < n; col++) {
      buf.push(
          data[n * row + col],
          (col !== lastCol || row !== lastRow) ? ', ' : '');
    }
    if (row !== lastRow) {
      buf.push('\n ');
    }
  }
  buf.push(']');
  return buf.join('');
};

/**
 * Transpose this matrix.
 *
 * @param data {Array<Number>}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 * @return transposed matrix (original matrix is unchanged).
 */
__transpose = function (data, m, n) {
  var values = [],
      row,
      col;
  for (col = 0; col < n; col++) {
    for (row = 0; row < m; row++) {
      values.push(data[__index(m, n, row, col)]);
    }
  }
  return values;
};


/**
 * Construct a new Matrix object.
 *
 * If m and n are omitted, Matrix is assumed to be square and
 * data length is used to compute size.
 *
 * If m or n are omitted, data length is used to compute omitted value.
 *
 * @param data {Array}
 *        matrix data.
 * @param m {Number}
 *        number of rows.
 * @param n {Number}
 *        number of columns.
 */
var Matrix = function (data, m, n) {
  var _this,
      _initialize,
      // variables
      _data,
      _m,
      _n;


  _this = {};

  _initialize = function (data, m, n) {
    _data = data;
    _m = m;
    _n = n;

    if (m && n) {
      // done
      return;
    }

    // try to compute size based on data
    if (!m && !n) {
      var side = Math.sqrt(data.length);
      if (side !== parseInt(side, 10)) {
        throw new Error('matrix m,n unspecified, and matrix not square');
      }
      _m = side;
      _n = side;
    } else if (!m) {
      _m = data.length / n;
      if (_m !== parseInt(_m, 10)) {
        throw new Error('wrong number of data elements');
      }
    } else if (!n) {
      _n = data.length / m;
      if (_n !== parseInt(_n, 10)) {
        throw new Error('wrong number of data elements');
      }
    }
  };

  /**
   * Add matrices.
   *
   * @param that {Matrix}
   *        matrix to add.
   * @throws Error if dimensions do not match.
   * @return result of addition (original matrix is unchanged).
   */
  _this.add = function (that) {
    if (_m !== that.m() || n !== that.n()) {
      throw new Error('matrices must be same size');
    }
    return Matrix(Vector.add(_data, that.data()), _m, _n);
  };

  /**
   * Get a column from this matrix.
   *
   * @param col {Number}
   *        zero-based column index.
   * @return {Array<Number>} array containing elements from column.
   */
  _this.col = function (col) {
    return __col(_data, _m, _n, col);
  };

  /**
   * Access the wrapped array.
   */
  _this.data = function () {
    return _data;
  };

  /**
   * Get the diagonal from this matrix.
   *
   * @return {Array<Number>} array containing elements from diagonal.
   */
  _this.diagonal = function () {
    return __diagonal(_data, _m, _n);
  };

  /**
   * Get a value from this matrix.
   *
   * @param row {Number}
   *        zero-based index of row.
   * @param col {Number}
   *        zero-based index of column.
   * @return {Number} value at (row, col).
   */
  _this.get = function (row, col) {
    return __get(_data, _m, _n, row, col);
  };

  /**
   * Compute the eigenvectors of this matrix.
   *
   * NOTE: Matrix should be 3x3 and symmetric.
   *
   * @param maxRotations {Number}
   *        default 100.
   *        maximum number of iterations.
   * @return {Array<Vector>} eigenvectors.
   *         Magnitude of each vector is eigenvalue.
   */
  _this.jacobi = function (maxRotations) {
    return __jacobi(_data, _m, _n, maxRotations);
  };

  /**
   * Get the number of rows in matrix.
   *
   * @return {Number}
   *         number of rows.
   */
  _this.m = function () {
    return _m;
  };

  /**
   * Multiply matrices.
   *
   * @param that {Matrix}
   *        matrix to multiply.
   * @return {Matrix} result of multiplication.
   */
  _this.multiply = function (that) {
    return Matrix(__multiply(_data, _m, _n, that.data(), that.m(), that.n()),
        // use that.N
        _m, that.n());
  };

  /**
   * Get number of columns in matrix.
   *
   * @return {Number} number of columns.
   */
  _this.n = function () {
    return _n;
  };

  /**
   * Multiply each element by -1.
   *
   * @return {Matrix} result of negation.
   */
  _this.negative = function () {
    return Matrix(Vector.multiply(_data, -1), _m, _n);
  };

  /**
   * Get a row from this matrix.
   *
   * @param row {Number}
   *        zero-based index of row.
   * @return {Array<Number>} elements from row.
   */
  _this.row = function (row) {
    return __row(_data, _m, _n, row);
  };

  /**
   * Set a value in this matrix.
   *
   * @param row {Number}
   *        zero-based row index.
   * @param col {Number}
   *        zero-based column index.
   * @param value {Number}
   *        value to set.
   */
  _this.set = function (row, col, value) {
    __set(_data, _m, _n, row, col, value);
  };

  /**
   * Subtract another matrix from this matrix.
   *
   * @param that {Matrix}
   *        matrix to subtract.
   * @throws Error if dimensions do not match.
   * @return result of subtraction (original matrix is unchanged).
   */
  _this.subtract = function (that) {
    if (_m !== that.m() || n !== that.n()) {
      throw new Error('matrices must be same size');
    }
    return Matrix(Vector.subtract(_data, that.data()), _m, _n);
  };

  /**
   * Display matrix as a string.
   *
   * @return {String} formatted matrix.
   */
  _this.toString = function () {
    return __stringify(_data, _m, _n);
  };

  /**
   * Transpose matrix.
   *
   * Columns become rows, and rows become columns.
   *
   * @return {Matrix} result of transpose.
   */
  _this.transpose = function () {
    return Matrix(__transpose(_data, _m, _n),
        // swap M and N
        _n, _m);
  };

  _initialize(data, m, n);
  data = null;
  return _this;
};


// expose static methods.
Matrix.col = __col;
Matrix.diagonal = __diagonal;
Matrix.get = __get;
Matrix.identity = __identity;
Matrix.index = __index;
Matrix.jacobi = __jacobi;
Matrix.multiply = __multiply;
Matrix.row = __row;
Matrix.set = __set;
Matrix.stringify = __stringify;
Matrix.transpose = __transpose;


module.exports = Matrix;

},{"./Vector":31}],31:[function(require,module,exports){
'use strict';


// static methods that operate on arrays
var __add,
    __angle,
    __azimuth,
    __cross,
    __dot,
    __equals,
    __magnitude,
    __multiply,
    __plunge,
    __unit,
    __rotate,
    __subtract,
    __x,
    __y,
    __z;


/**
 * Add two vectors.
 *
 * @param v1 {Array<Number>}
 *        the first vector.
 * @param v2 {Array<Number>}
 *        the second vector.
 * @return {Array<Number>}
 *         result of addition.
 * @throws {Error} when vectors are different lengths.
 */
__add = function (v1, v2) {
  var i,
      v;
  if (v1.length !== v2.length) {
    throw new Error('vectors must be same length');
  }
  v = [];
  for (i = 0; i < v1.length; i++) {
    v.push(v1[i] + v2[i]);
  }
  return v;
};


/**
 * Compute the angle between two vectors.
 *
 * @param v1 {Array<Number>}
 *        the first vector.
 * @param v2 {Array<Number>}
 *        the second vector.
 * @return {Number}
 *         angle between vectors in radians.
 */
__angle = function (v1, v2) {
  return Math.acos(__dot(v1, v2) / (__magnitude(v1) * __magnitude(v2)));
};

/**
 * Compute the azimuth of a vector.
 *
 * @param v1 {Array<Number>}
 *        the first vector.
 * @param v2 {Array<Number>}
 *        the second vector.
 * @return {Number}
 *         angle between vectors in radians.
 */
__azimuth = function (v1) {
  if (v1.length < 2) {
    throw new Error('azimuth requires at least 2 dimensions');
  }
  if (v1[0] === 0 && v1[1] === 0) {
    // if vector is zero, or vertical, azimuth is zero.
    return 0;
  }
  return (Math.PI / 2) - Math.atan2(v1[1], v1[0]);
};

/**
 * Compute vector cross product.
 *
 * Note: only computes cross product in 3 dimensions.
 *
 * @param v1 {Array<Number>}
 *        the first vector.
 * @param v2 {Array<Number>}
 *        the second vector.
 * @return {Array<Number>}
 *         the 3 dimensional cross product.
 *         the resulting vector follows the right-hand rule: if the fingers on
 *         your right hand point to v1, and you close your hand to get to v2,
 *         the resulting vector points in the direction of your thumb.
 */
__cross = function (v1, v2) {
  if (v1.length !== v2.length || v1.length < 3) {
    throw new Error('cross product requires at least 3 dimensions');
  }
  return [
    v1[1] * v2[2] - v2[1] * v1[2],
    v1[2] * v2[0] - v2[2] * v1[0],
    v1[0] * v2[1] - v2[0] * v1[1]
  ];
};

/**
 * Compute vector dot product.
 *
 * @param v1 {Array<Number}
 *        the first vector.
 * @param v2 {Array<Number>}
 *        the second vector.
 * @return {Number}
 *         the dot product.
 */
__dot = function (v1, v2) {
  var i,
      sum;
  sum = 0;
  for (i = 0; i < v1.length; i++) {
    sum += v1[i] * v2[i];
  }
  return sum;
};

/**
 * Check if two vectors are equal.
 *
 * @param v1 {Array<Number>}
 *        the first vector.
 * @param v2 {Array<Number>}
 *        the second vector.
 * @return {Boolean}
 *         true if vectors are same length and all elements are equal.
 */
__equals = function (v1, v2) {
  var i;
  if (v1.length !== v2.length) {
    return false;
  }
  for (i = 0; i < v1.length; i++) {
    if (v1[i] !== v2[i]) {
      return false;
    }
  }
  return true;
};

/**
 * Compute length of vector.
 *
 * @param v1 {Array<Number>}
 *        vector.
 * @return {Number}
 *         magnitude of vector.
 */
__magnitude = function (v1) {
  var i,
      sum;
  sum = 0;
  for (i = 0; i < v1.length; i++) {
    sum += v1[i] * v1[i];
  }
  return Math.sqrt(sum);
};

/**
 * Multiply vector by a constant.
 *
 * @param v1 {Array<Number>}
 *        vector to multiply.
 * @param n {Number}
 *        number to multiply by.
 * @return {Array<Number}
 *         result of multiplication.
 */
__multiply = function (v1, n) {
  var i,
      v;

  v = [];
  for (i = 0; i < v1.length; i++) {
    v.push(v1[i] * n);
  }
  return v;
};

/**
 * Compute angle from plane z=0 to vector.
 *
 * @param v {Array<Number>}
 *        the vector.
 * @return {Number}
 *         angle from plane z=0 to vector.
 *         angle is positive when z > 0, negative when z < 0.
 */
__plunge = function (v) {
  if (v.length < 3) {
    throw new Error('__azimuth: vector must have at least 3 dimensions');
  }
  return Math.asin(v[2] / __magnitude(v));
};

/**
 * Rotate a vector around an axis.
 *
 * From "6.2 The normalized matrix for rotation about an arbitrary line",
 *      http://inside.mines.edu/~gmurray/ArbitraryAxisRotation/
 *
 * @param v1 {Array<Number>}
 *        the "point" to rotate.
 * @param axis {Array<Number>}
 *        direction vector of rotation axis.
 * @param theta {Number}
 *        angle of rotation in radians.
 * @param origin {Array<Number>}
 *        default [0, 0, 0].
 *        origin of axis of rotation.
 */
__rotate = function (v1, axis, theta, origin) {
  var a,
      au,
      av,
      aw,
      b,
      bu,
      bv,
      bw,
      c,
      cu,
      cv,
      cw,
      cosT,
      sinT,
      u,
      uu,
      ux,
      uy,
      uz,
      v,
      vv,
      vx,
      vy,
      vz,
      w,
      ww,
      wx,
      wy,
      wz,
      x,
      y,
      z;

  origin = origin || [0, 0, 0];
  a = origin[0];
  b = origin[1];
  c = origin[2];
  u = axis[0];
  v = axis[1];
  w = axis[2];
  x = v1[0];
  y = v1[1];
  z = v1[2];

  cosT = Math.cos(theta);
  sinT = Math.sin(theta);
  au = a * u;
  av = a * v;
  aw = a * w;
  bu = b * u;
  bv = b * v;
  bw = b * w;
  cu = c * u;
  cv = c * v;
  cw = c * w;
  uu = u * u;
  ux = u * x;
  uy = u * y;
  uz = u * z;
  vv = v * v;
  vx = v * x;
  vy = v * y;
  vz = v * z;
  ww = w * w;
  wx = w * x;
  wy = w * y;
  wz = w * z;

  return [
    (a * (vv + ww) - u * (bv + cw - ux - vy - wz)) * (1 - cosT) +
        x * cosT + (-cv + bw - wy + vz) * sinT,
    (b * (uu + ww) - v * (au + cw - ux - vy - wz)) * (1 - cosT) +
        y * cosT + (cu - aw + wx - uz) * sinT,
    (c * (uu + vv) - w * (au + bv - ux - vy - wz)) * (1 - cosT) +
        z * cosT + (-bu + av - vx + uy) * sinT
  ];
};

/**
 * Subtract two vectors.
 *
 * @param v1 {Array<Number>}
 *        the first vector.
 * @param v2 {Array<Number>}
 *        the vector to subtract.
 * @return {Array<Number>}
 *         result of subtraction.
 * @throws {Error} when vectors are different lengths.
 */
__subtract = function (v1, v2) {
  var i,
      v;

  if (v1.length !== v2.length) {
    throw new Error('__subtract: vectors must be same length');
  }
  v = [];
  for (i = 0; i < v1.length; i++) {
    v.push(v1[i] - v2[i]);
  }
  return v;
};

/**
 * Convert vector to length 1.
 *
 * Same as __multiply(v1, 1 / __magnitude(v1))
 *
 * @param v1 {Array<Number>}
 *        the vector.
 * @return {Array<Number>}
 *         vector converted to length 1.
 * @throws {Error} if vector magnitude is 0.
 */
__unit = function (v1) {
  var mag = __magnitude(v1);
  if (mag === 0) {
    throw new Error('__unit: cannot convert zero vector to unit vector');
  }
  return __multiply(v1, 1 / mag);
};

/**
 * Get, and optionally set, the x component of a vector.
 *
 * @param v {Array<Number>}
 *        the vector.
 * @param value {Number}
 *        default undefined.
 *        when defined, set x component.
 * @return {Number}
 *         the x component.
 */
__x = function (v, value) {
  if (typeof value === 'number') {
    v[0] = value;
  }
  return v[0];
};

/**
 * Get, and optionally set, the y component of a vector.
 *
 * @param v {Array<Number>}
 *        the vector.
 * @param value {Number}
 *        default undefined.
 *        when defined, set y component.
 * @return {Number}
 *         the y component.
 */
__y = function (v, value) {
  if (typeof value === 'number') {
    v[1] = value;
  }
  return v[1];
};

/**
 * Get, and optionally set, the z component of a vector.
 *
 * @param v {Array<Number>}
 *        the vector.
 * @param value {Number}
 *        default undefined.
 *        when defined, set z component.
 * @return {Number}
 *         the z component.
 */
__z = function (v, value) {
  if (typeof value === 'number') {
    v[2] = value;
  }
  return v[2];
};


/**
 * A vector object that wraps an array.
 *
 * This is a convenience object to call the static methods on the wrapped array.
 * Only the methods x(), y(), and z() modify data; other methods return new
 * Vector objects without modifying the existing object.
 *
 * @param data {Array<Number>}
 *        array to wrap.
 */
var Vector = function (data) {
  var _this,
      _initialize,
      // variables
      _data;

  if (data && typeof data.data === 'function') {
    // copy existing object
    data = data.data().slice(0);
  }


  _this = {
    _isa_vector: true
  };

  _initialize = function (data) {
    _data = data;
  };

  /**
   * Add two vectors.
   *
   * @param that {Vector|Array<Number>}
   *        vector to add.
   * @return {Vector}
   *         result of addition.
   */
  _this.add = function (that) {
    that = (that._isa_vector ? that.data() : that);
    return Vector(__add(_data, that));
  };

  /**
   * Compute angle between vectors.
   *
   * @param that {Vector|Array<Number>}
   *        vector to compute angle between.
   * @return {Number} angle between vectors in radians.
   */
  _this.angle = function (that) {
    that = (that._isa_vector ? that.data() : that);
    return __angle(_data, that);
  };

  /**
   * Compute azimuth of this vector.
   *
   * @return {Number} azimuth of this vector in radians.
   */
  _this.azimuth = function () {
    return __azimuth(_data);
  };

  /**
   * Compute the cross product between vectors.
   *
   * @param that {Vector|Array<Number>}
   *        the vector to cross.
   * @return {Vector} result of the cross product.
   */
  _this.cross = function (that) {
    that = (that._isa_vector ? that.data() : that);
    return Vector(__cross(_data, that));
  };

  /**
   * Access the wrapped array.
   *
   * @return {Array<Number>}
   *         the wrapped array.
   */
  _this.data = function () {
    return _data;
  };

  /**
   * Compute dot product between vectors.
   *
   * @param that {Vector|Array<Number>}
   *        vector to dot.
   * @return {Number} result of dot product.
   */
  _this.dot = function (that) {
    that = (that._isa_vector ? that.data() : that);
    return __dot(_data, that);
  };

  /**
   * Check if two vectors are equal.
   *
   * @param that {Vector|Array<Number>}
   *        vector to compare.
   * @return {Boolean} true if equal, false otherwise.
   */
  _this.equals = function (that) {
    that = (that._isa_vector ? that.data() : that);
    return __equals(_data, that);
  };

  /**
   * Compute length of this vector.
   *
   * @return {Number} length of vector.
   *         Square root of the sum of squares of all components.
   */
  _this.magnitude = function () {
    return __magnitude(_data);
  };

  /**
   * Multiply this vector by a number.
   *
   * @param n {Number}
   *        number to multiply.
   * @return {Vector} result of multiplication.
   */
  _this.multiply = function (n) {
    return Vector(__multiply(_data, n));
  };

  /**
   * Same as multiply(-1).
   */
  _this.negative = function () {
    return _this.multiply(-1);
  };

  /**
   * Compute plunge of this vector.
   *
   * Plunge is the angle between this vector and the plane z=0.
   *
   * @return {Number} plunge in radians.
   *         positive when z>0, negative when z<0.
   */
  _this.plunge = function () {
    return __plunge(_data);
  };

  /**
   * Rotate this vector around an arbitrary axis.
   *
   * @param axis {Vector|Array<Number>}
   *        direction of axis of rotation.
   * @param theta {Number}
   *        angle of rotation in radians.
   * @param origin {Vector|Array<Number>}
   *        origin of axis of rotation.
   * @return {Vector} result of rotation.
   */
  _this.rotate = function (axis, theta, origin) {
    axis = (axis._isa_vector ? axis.data() : axis);
    origin = (origin && origin._isa_vector ? origin.data() : origin);
    return Vector(__rotate(_data, axis, theta, origin));
  };

  /**
   * Subtract another vector.
   *
   * @param that {Vector|Array<Number>}
   *        vector to subtract.
   * @return {Vector} result of subtraction.
   */
  _this.subtract = function (that) {
    that = (that._isa_vector ? that.data() : that);
    return Vector(__subtract(_data, that));
  };

  /**
   * Convert vector to string.
   *
   * @return {String} wrapped array converted to string.
   */
  _this.toString = function () {
    return '' + _data;
  };

  /**
   * Convert this vector to length 1.
   *
   * @return {Vector} vector / |vector|.
   */
  _this.unit = function () {
    return Vector(__unit(_data));
  };

  /**
   * Get or set x component.
   *
   * @param value {Number}
   *        when defined, set x component to value.
   * @return {Number} x component value.
   */
  _this.x = function (value) {
    return __x(_data, value);
  };

  /**
   * Get or set y component.
   *
   * @param value {Number}
   *        when defined, set y component to value.
   * @return {Number} y component value.
   */
  _this.y = function (value) {
    return __y(_data, value);
  };

  /**
   * Get or set z component.
   *
   * @param value {Number}
   *        when defined, set z component to value.
   * @return {Number} z component value.
   */
  _this.z = function (value) {
    return __z(_data, value);
  };


  _initialize(data);
  data = null;
  return _this;
};


// expose static methods
Vector.add = __add;
Vector.angle = __angle;
Vector.azimuth = __azimuth;
Vector.cross = __cross;
Vector.dot = __dot;
Vector.magnitude = __magnitude;
Vector.multiply = __multiply;
Vector.plunge = __plunge;
Vector.rotate = __rotate;
Vector.subtract = __subtract;
Vector.unit = __unit;
Vector.x = __x;
Vector.y = __y;
Vector.z = __z;


module.exports = Vector;

},{}],32:[function(require,module,exports){
'use strict';
/**
 * A Lightweight collection, inspired by backbone.
 *
 * Lazily builds indexes to avoid overhead until needed.
 */

var Events = require('../util/Events'),
    Util = require('../util/Util');


/**
 * Create a new Collection.
 *
 * @param data {Array}
 *      When omitted a new array is created.
 */
var Collection = function (data) {

  var _this,
      _initialize,

      _data,
      _ids,
      _selected,

      _isSilent;


  _this = Events();

  _initialize = function () {
    _data = data || [];
    _ids = null;
    _selected = null;

    data = null;
  };

  /**
   * Whether "silent" option is true.
   *
   * @param options {Object}
   * @param options.silent {Boolean}
   *        default false.
   * @return {Boolean} true if options.silent is true.
   */
  _isSilent = function (options) {
    return options && options.silent === true;
  };

  /**
   * Add objects to the collection.
   *
   * Calls wrapped array.push, and clears the id cache.
   *
   * @param {Object…}
   *      a variable number of objects to append to the collection.
   * @deprecated see #addAll()
   */
  _this.add = function () {
    _this.addAll(Array.prototype.slice.call(arguments, 0));
  };

  /**
   * Add objects to the collection.
   *
   * Calls wrapped array.push, and clears the id cache.
   *
   * @param toadd {Array<Object>}
   *        objects to be added to the collection.
   */
   _this.addAll = function (toadd, options) {
     _data.push.apply(_data, toadd);
     _ids = null;
     if (!_isSilent(options)) {
       _this.trigger('add', toadd);
     }
   };

  /**
   * Get the wrapped array.
   *
   * @return
   *      the wrapped array.
   */
  _this.data = function () {
    return _data;
  };

  /**
   * Deselect current selection.
   */
  _this.deselect = function (options) {
    if (_selected !== null) {
      var oldSelected = _selected;
      _selected = null;
      if (!_isSilent(options)) {
        _this.trigger('deselect', oldSelected);
      }
    }
  };

  /**
   * Free the array and id cache.
   *
   * @param options {Object}
   *        passed to #deselect().
   */
  _this.destroy = Util.compose(function (options) {
    _data = null;
    _ids = null;
    _selected = null;
    if (!_isSilent(options)) {
      _this.trigger('destroy');
    }
    return options;
  }, _this.destroy);

  /**
   * Get an object in the collection by ID.
   *
   * Uses getIds(), so builds map of ID to INDEX on first access O(N).
   * Subsequent access should be O(1).
   *
   * @param id {Any}
   *      if the collection contains more than one object with the same id,
   *      the last element with that id is returned.
   */
  _this.get = function (id) {
    var ids = _this.getIds();

    if (ids.hasOwnProperty(id)) {
      // use cached index
      return _data[ids[id]];
    } else {
      return null;
    }
  };

  /**
   * Get a map from ID to INDEX.
   *
   * @param force {Boolean}
   *      rebuild the map even if it exists.
   */
  _this.getIds = function (force) {
    var i = 0,
        len = _data.length,
        id;

    if (force || _ids === null) {
      // build up ids first time through
      _ids = {};

      for (; i < len; i++) {
        id = _data[i].id;

        if (_ids.hasOwnProperty(id)) {
          throw 'model with duplicate id "' + id + '" found in collection';
        }

        _ids[id] = i;
      }
    }

    return _ids;
  };

  /**
   * Get the currently selected object.
   */
  _this.getSelected = function () {
    return _selected;
  };

  /**
   * Remove objects from the collection.
   *
   * This method calls array.splice to remove item from array.
   * Reset would be faster if modifying large chunks of the array.
   *
   * @param o {Object}
   *      object to remove.
   * @deprecated see #removeAll()
   */
  _this.remove = function (/* o */) {
    // trigger remove event
    _this.removeAll(Array.prototype.slice.call(arguments, 0));
  };

  /**
   * Remove objects from the collection.
   *
   * Reset is faster if modifying large chunks of the array.
   *
   * @param toremove {Array<Object>}
   *        objects to remove.
   * @param options {Object}
   * @param options.silent {Boolean}
   *        default false.
   *        whether to trigger events (false), or not (true).
   */
  _this.removeAll = function (toremove, options) {
    var i,
        len = toremove.length,
        indexes = [],
        ids = _this.getIds(),
        o;

    // select indexes to be removed
    for (i = 0; i < len; i++) {
      o = toremove[i];

      // clear current selection if being removed
      if (o === _selected) {
        _this.deselect();
      }

      // add to list to be removed
      if (ids.hasOwnProperty(o.id)) {
        indexes.push(ids[o.id]);
      } else {
        throw 'removing object not in collection';
      }
    }

    // remove in descending index order
    indexes.sort(function(a,b) { return a-b; });

    for (i = indexes.length-1; i >= 0; i--) {
      _data.splice(indexes[i], 1);
    }

    // reset id cache
    _ids = null;

    if (!_isSilent(options)) {
      // trigger remove event
      _this.trigger('remove', toremove);
    }
  };

  /**
   * Replace the wrapped array with a new one.
   */
  _this.reset = function (data, options) {
    // check for existing selection
    var selectedId = null;
    if (_selected !== null) {
      selectedId = _selected.id;
    }

    // free array and id cache
    _data = null;
    _ids = null;
    _selected = null;

    // set new array
    _data = data || [];

    // notify listeners
    if (!options || options.silent !== true) {
      _this.trigger('reset', data);
    }

    // reselect if there was a previous selection
    if (selectedId !== null) {
      var selected = _this.get(selectedId);
      if (selected !== null) {
        options = Util.extend({}, options, {'reset': true});
        _this.select(selected, options);
      }
    }
  };

  /**
   * Select an object in the collection.
   *
   * @param obj {Object}
   *      object in the collection to select.
   * @throws exception
   *      if obj not in collection.
   */
  _this.select = function (obj, options) {
    // no selection
    if (obj === null) {
      _this.deselect();
      return;
    }
    // already selected
    if (obj === _selected) {
      return;
    }
    // deselect previous selection
    if (_selected !== null) {
      _this.deselect(options);
    }

    if (obj === _this.get(obj.id)) {
      // make sure it's part of this collection…
      _selected = obj;
      if (!options || options.silent !== true) {
        _this.trigger('select', _selected, options);
      }
    } else {
      throw 'selecting object not in collection';
    }
  };

  /**
   * Utility method to select collection item using its id.
   *
   * Selects matching item if it exists, otherwise clears any selection.
   *
   * @param id {?}
   *        id of item to select.
   * @param options {Object}
   *        options passed to #select() or #deselect().
   */
  _this.selectById = function (id, options) {
    var obj = _this.get(id);
    if (obj !== null) {
      _this.select(obj, options);
    } else {
      _this.deselect(options);
    }
  };

  /**
   * Sorts the data.
   *
   * @param method {Function}
   *        javascript sort method.
   * @param options {Object}
   *        passed to #reset()
   */
  _this.sort = function (method, options) {
    _data.sort(method);

    // "reset" to new sort order
    _this.reset(_data, options);
  };

  /**
   * Override toJSON method to serialize only collection data.
   */
  _this.toJSON = function () {
    var json = _data.slice(0),
        item,
        i,
        len;

    for (i = 0, len = json.length; i < len; i++) {
      item = json[i];
      if (typeof item === 'object' &&
          item !== null &&
          typeof item.toJSON === 'function') {
        json[i] = item.toJSON();
      }
    }

    return json;
  };


  _initialize();
  return _this;
};

module.exports = Collection;

},{"../util/Events":"util/Events","../util/Util":"util/Util"}],33:[function(require,module,exports){
'use strict';

var Util = require('../util/Util'),
    View = require('./View');


var _DEFAULTS = {
  // classname added to select box
  className: 'collection-selectbox',
  includeBlankOption: false,
  blankOption: {
    text: 'Please select&hellip;',
    value: '-1'
  },

  // callback to format each collection item
  format: function (item) {
    return item.id;
  },

  // whether to render during initialize
  renderNow: true
};

/**
 * Create a new CollectionSelectBox to select a collection item.
 *
 * @param params {Object}
 * @param params.format {Function(Object)}
 *        callback function to format select box items.
 * @param params.className {String}
 *        Default 'collection-selectbox'.
 *        Class name for select box.
 * @param params.collection {Collection}
 *        the collection to display.
 *        NOTE: the collection should have an existing selection;
 *        otherwise, the first item in the select box will be selected
 *        in the UI and not in the collection.
 * @see mvc/View
 */
var CollectionSelectBox = function (params) {
  var _this,
      _initialize,

      _blankOption,
      _collection,
      _format,
      _getValidOptions,
      _includeBlankOption,
      _selectBox,

      _createBlankOption,
      _defaultGetValidOptions,
      _onChange,
      _onSelect;


  params = Util.extend({}, _DEFAULTS, params);
  _this = View(params);

  /**
   * @constructor
   *
   */
  _initialize = function (params) {
    var el;

    el = _this.el;

    _blankOption = params.blankOption;
    _collection = params.collection;
    _format = params.format;
    _getValidOptions = params.getValidOptions || _defaultGetValidOptions;
    _includeBlankOption = params.includeBlankOption;

    // reuse or create select box
    if (el.nodeName === 'SELECT') {
      _selectBox = el;
    } else {
      _selectBox = el.appendChild(document.createElement('select'));
    }
    _selectBox.classList.add(params.className);

    // bind to events on the collection
    _collection.on('add', _this.render);
    _collection.on('remove', _this.render);
    _collection.on('reset', _this.render);
    _collection.on('select', _onSelect);
    _collection.on('deselect', _onSelect);

    // bind to events on this._selectBox
    _selectBox.addEventListener('change', _onChange);

    // populate select box
    if (params.renderNow) {
      _this.render();
    }
  };

  _createBlankOption = function () {
    return [
    '<option ',
        'value="', _blankOption.value, '">',
      _blankOption.text,
    '</option>'
    ].join('');
  };

  _defaultGetValidOptions = function () {
    return _collection.data().map(function (o) { return o.id; });
  };

  /**
   * Handle selectbox change events.
   */
  _onChange = function () {
    var value;

    value = _selectBox.value;

    if (_includeBlankOption && value === _blankOption.value) {
      _collection.deselect();
    } else {
      _collection.selectById(value);
    }
  };

  /**
   * Handle collection select events.
   */
  _onSelect = function () {
    var selected,
        validOptions;

    selected = _collection.getSelected();
    validOptions = _getValidOptions();

    if (selected) {
      if (validOptions.indexOf(selected.id) === -1) {
        _collection.deselect();
      } else {
        _selectBox.value = selected.id;
      }
    } else if (_includeBlankOption) {
      _selectBox.value = _blankOption.value;
    }
  };


  /**
   * Destroy CollectionSelectBox.
   */
  _this.destroy = Util.compose(function () {
    _collection.off('add', _this.render);
    _collection.off('remove', _this.render);
    _collection.off('reset', _this.render);
    _collection.off('select', _onSelect);
    _collection.off('deselect', _onSelect);

    _selectBox.removeEventListener('change', _onChange);

    _blankOption = null;
    _collection = null;
    _format = null;
    _getValidOptions = null;
    _includeBlankOption = null;
    _selectBox = null;

    _createBlankOption = null;
    _defaultGetValidOptions = null;
    _onChange = null;
    _onSelect = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Update select box items.
   */
  _this.render = function () {
    var data,
        i,
        id,
        len,
        markup,
        selected,
        validOptions;

    data = _collection.data();
    markup = [];
    selected = _collection.getSelected();

    if (_includeBlankOption === true) {
      markup.push(_createBlankOption());
    }

    validOptions = _getValidOptions();

    for (i = 0, len = data.length; i < len; i++) {
      id = data[i].id;

      markup.push('<option value="' + id + '"' +
          (selected === data[i] ? ' selected="selected"' : '') +
          (validOptions.indexOf(id) === -1 ? ' disabled="disabled"' : '') +
          '>' + _format(data[i]) + '</option>');
    }

    _selectBox.innerHTML = markup.join('');
    _onSelect();
  };


  _initialize(params);
  params = null;
  return _this;
};

module.exports = CollectionSelectBox;

},{"../util/Util":"util/Util","./View":"mvc/View"}],34:[function(require,module,exports){
'use strict';

var Util = require('../util/Util'),
    View = require('./View');


var _DEFAULTS = {
  // class name for table
  className: 'collection-table',
  // click on table rows to trigger select in collection
  clickToSelect: false,
  // columns of data to display
  columns: [
    //{
      // class name for header and data cells
      //   className: '',
      // header content for column
      //   title: '',
      // format function for data cells
      //   format: function (item) { return ''; }
      // whether column is header for its row
      //   header: false
    //}
  ],
  emptyMarkup: 'No data to display',
  // whether to render after initialization
  renderNow: true
};


/**
 * Create a CollectionTable to display a collection.
 *
 * @param params {Object}
 * @param params.collection {Collection}
 *        Collection to display.
 * @param params.columns {Array<Object>}
 *        Array of column objects defining display.
 *        Each object should have these properties:
 *        - className {String} class name for header and data cells.
 *        - title {String} markup for header cell.
 *        - format {Function(item)} function to format data cell.
 *        - header {Boolean} default false.
 *          whether column is row header and should use th scope=row (true),
 *          or a regular data cell and should use td (false).
 * @param params.clickToSelect {Boolean}
 *        Default false.  Whether clicking on table rows should select
 *        the corresponding collection item.
 * @see mvc/View
 */
var CollectionTable = function (params) {
  var _this,
      _initialize,

      _className,
      _clickToSelect,
      _collection,
      _columns,
      _emptyMarkup,

      _onClick,
      _onSelect;


  params = Util.extend({}, _DEFAULTS, params);
  _this = View(params);

  _initialize = function () {
    _className = params.className;
    _clickToSelect = params.clickToSelect;
    _collection = params.collection;
    _columns = params.columns;
    _emptyMarkup = params.emptyMarkup;

    // respond to collection events
    _collection.on('add', _this.render);
    _collection.on('remove', _this.render);
    _collection.on('reset', _this.render);
    _collection.on('select', _onSelect);
    _collection.on('deselect', _onSelect);

    // add click handler
    if (_clickToSelect) {
      _this.el.addEventListener('click', _onClick);
    }

    if (params.renderNow) {
      _this.render();
    }
  };


  /**
   * Handle table click events.
   * Listener is only added when options.clickToSelect is true.
   */
  _onClick = function (e) {
    var target = e.target,
        row = Util.getParentNode(target, 'TR', _this.el);

    if (row !== null) {
      if (row.parentNode.nodeName.toUpperCase() === 'TBODY') {
        _collection.selectById(row.getAttribute('data-id'));
      }
    }
  };

  /**
   * Handle collection select and deselect events.
   */
  _onSelect = function () {
    var el = _this.el,
        selected;

    // remove previous selection
    selected = el.querySelector('.selected');
    if (selected) {
      selected.classList.remove('selected');
    }

    // set new selection
    selected = _collection.getSelected();
    if (selected) {
      selected = el.querySelector('[data-id="' + selected.id + '"]');
      selected.classList.add('selected');
    }
  };


  /**
   * Undo initialization and free references.
   */
  _this.destroy = Util.compose(function () {

    _collection.off('add', _this.render);
    _collection.off('remove', _this.render);
    _collection.off('reset', _this.render);
    _collection.off('select', _onSelect);
    _collection.off('deselect', _onSelect);
    _collection = null;

    if (_clickToSelect) {
      _this.el.removeEventListener('click', _onClick);
    }
    _clickToSelect = null;
  }, _this.destroy);

  /**
   * Render the view.
   */
  _this.render = function () {
    var c,
        cLen,
        column,
        data,
        i,
        id,
        iLen,
        item,
        markup;

    data = _collection.data();
    markup = [];

    if (data.length === 0) {
      _this.el.innerHTML = _emptyMarkup;
      return;
    }

    markup.push('<table class="', _className, '"><thead>');
    for (c = 0, cLen = _columns.length; c < cLen; c++) {
      column = _columns[c];
      markup.push('<th class="' + column.className + '">' +
          column.title + '</th>');
    }
    markup.push('</thead><tbody>');
    for (i = 0, iLen = data.length; i < iLen; i++) {
      item = data[i];
      id = ('' + item.id).replace(/"/g, '&quot;');
      markup.push('<tr data-id="' + id + '">');
      for (c = 0, cLen = _columns.length; c < cLen; c++) {
        column = _columns[c];
        markup.push('<' + (column.header ? 'th scope="row"' : 'td') +
            ' class="' + column.className + '">' +
            column.format(item) + '</td>');
      }
      markup.push('</tr>');
    }
    markup.push('</tbody></table>');

    _this.el.innerHTML = markup.join('');
  };


  _initialize();
  return _this;
};

module.exports = CollectionTable;
},{"../util/Util":"util/Util","./View":"mvc/View"}],35:[function(require,module,exports){
'use strict';


var CollectionTable = require('./CollectionTable'),
    DownloadView = require('./DownloadView'),
    SortView = require('./SortView'),
    Util = require('../util/Util'),
    View = require('./View');


/**
 * Create a new DataTable to display a collection.
 *
 * @param params {Object}
 *        all params except "el" are passed to CollectionTable.
 * @param params.sorts {Array<Object>}
 *        sort objects used by SortView.
 * @param params.formatDownload {Function(Collection)}
 *        Optional, default is Tab Separated Values.
 * @param params.columns {Array<Object>}
 *        column objects used by CollectionTable.
 * @param params.columns[X].downloadFormat {Function(Object)}
 *        Optional, default is column.format.
 *        Function used to format a column value for download.
 *        Used by DataTable._formatDownload.
 * @param params.columns[X].downloadTitle {string}
 *        Optional, default is column.title.
 *        column title value for download.
 *        Used by DataTable._formatDownload.
 * @see CollectionTable
 * @see SortView
 * @see DownloadView
 */
var DataTable = function (params) {
  var _this,
      _initialize,

      _collection,
      _collectionTable,
      _columns,
      _downloadButton,
      _downloadView,
      _sorts,
      _sortView,

      _formatDownload;


  _this = View(params);

  /**
   * Initialize the DataTable.
   */
  _initialize = function () {
    var el,
        tools;

    el = _this.el;
    el.innerHTML = '<div class="datatable-tools"></div>' +
        '<div class="datatable-data"></div>';
    el.classList.add('datatable');
    tools = el.querySelector('.datatable-tools');

    _collection = params.collection;
    _columns = params.columns;

    // sort
    _sorts = params.sorts;
    if (_sorts) {
      _sortView = new SortView({
        collection: _collection,
        sorts: _sorts,
        defaultSort: params.defaultSort
      });
      tools.appendChild(_sortView.el);
    }

    // data
    _collectionTable = new CollectionTable(
        Util.extend({}, params, {
          el: el.querySelector('.datatable-data')
        }));

    // download
    _downloadView = new DownloadView({
      collection: _collection,
      help: params.help || 'Copy then paste into a spreadsheet application',
      format: params.formatDownload || _formatDownload
    });

    _downloadButton = document.createElement('button');
    _downloadButton.innerHTML = 'Download';
    _downloadButton.className = 'download';
    _downloadButton.addEventListener('click', _downloadView.show);
    tools.appendChild(_downloadButton);


    params = null;
  };


  /**
   * Callback used to format downloads.
   * This implementation outputs Tab Separated Values.
   */
  _formatDownload = function (collection) {
    var c,
        cLen,
        content,
        column,
        data,
        format,
        i,
        iLen,
        item,
        row;

    content = [];
    data = collection.data();
    row = [];

    for (c = 0, cLen = _columns.length; c < cLen; c++) {
      column = _columns[c];
      row.push(column.downloadTitle || column.title);
    }
    content.push(row.join('\t'));

    for (i = 0, iLen = data.length; i < iLen; i++) {
      item = data[i];
      row = [];
      for (c = 0, cLen = _columns.length; c < cLen; c++) {
        column = _columns[c];
        format = column.downloadFormat || column.format;
        row.push(format(item));
      }
      content.push(row.join('\t'));
    }

    return content.join('\n');
  };


  /**
   * Destroy the DataTable.
   */
  _this.destroy = Util.compose(function () {
    if (_sortView) {
      _sortView.destroy();
      _sortView = null;
    }

    _downloadButton.removeEventListener('click', _downloadView.show);
    _downloadButton = null;

    _downloadView.destroy();
    _downloadView = null;

    _collectionTable.destroy();
    _collectionTable = null;
  }, _this.destroy);


  _initialize();
  return _this;
};

module.exports = DataTable;

},{"../util/Util":"util/Util","./CollectionTable":34,"./DownloadView":36,"./SortView":38,"./View":"mvc/View"}],36:[function(require,module,exports){
'use strict';

var ModalView = require('./ModalView'),
    Util = require('../util/Util'),
    View = require('./View');


var _DEFAULTS = {
  // title of modal dialog.
  title: 'Download',
  // markup to describe download content.
  help: '',
  // callback function to format collection for download.
  format: function (collection) {
    return JSON.stringify(collection);
  }
};


/**
 * Create a DownloadView.
 *
 * @param options {Object}
 * @param options.title {String}
 *        Default 'Download'.
 *        Modal dialog title.
 * @param options.format {Function(Collection)}
 *        Default JSON.stringify.
 *        function to format collection for download.
 * @see mvc/View
 */
var DownloadView = function (params) {
  var _this,
      _initialize,

      _collection,
      _format,
      _modal,
      _textarea,
      _title;


  params = Util.extend({}, _DEFAULTS, params);
  _this = View(params);

  /**
   * Initialize the download view.
   */
  _initialize = function () {
    var el = _this.el;

    _collection = params.collection;
    _format = params.format;
    _title = params.title;

    el.className = 'download-view';
    el.innerHTML = '<div class="help">' + params.help + '</div>' +
        '<textarea class="download" readonly="readonly"></textarea>';
    _textarea = el.querySelector('.download');

    params = null;
  };

  /**
   * Destroy the download view.
   */
  _this.destroy = Util.compose(function () {
    if (_modal) {
      // TODO: hide first?
      _modal.destroy();
      _modal = null;
    }

    _collection = null;
    _format = null;
    _textarea = null;
  }, _this.destroy);

  /**
   * Format collection for download.
   */
  _this.render = function () {
    _textarea.value = _format(_collection);
  };

  /**
   * Show the download view, calls render before showing modal.
   */
  _this.show = function () {
    if (!_modal) {
      _modal = new ModalView(_this.el, {
        title: _title
      });
    }

    _this.render();
    _modal.show();
    _textarea.select();
  };

  _initialize();
  return _this;
};

module.exports = DownloadView;
},{"../util/Util":"util/Util","./ModalView":37,"./View":"mvc/View"}],37:[function(require,module,exports){
'use strict';
/**
 * Generic class for modal dialog views. Modal dialogs present a blocking
 * interface to the user and require user-interaction in order to be closed
 * (i.e. clicking a button etc...).
 *
 * It is important to note that while the interface appears blocked while a
 * modal dialog is open, Javascript continues to execute in the background.
 *
 * Only one modal dialog can be visible at any given time.
 *
 * If a second modal dialog is opened while the first modal dialog is still
 * visible, the first modal dialog is hidden and the second is shown. Upon
 * closing the second modal dialog, the first modal dialog is re-shown (unless
 * the "clear" method is passed to the hide method). This process continues in a
 * last-in, first-out (stack) ordering until all modal dialogs are closed.
 *
 */

var Util = require('../util/Util'),
    View = require('./View');


var __INITIALIZED__ = false,
    _DIALOG_STACK = null,
    _FOCUS_STACK = null,
    _MASK = null,
    _DEFAULTS = {
      closable: true, // Should modal box include little "X' in corner
      destroyOnHide: false,
      title: document.title + ' Says...'
    };

var _static_initialize = function () {
  // Create the dialog stack
  _DIALOG_STACK = [];

  // Create the focus stack
  _FOCUS_STACK = [];

  // Create the modal mask
  _MASK = document.createElement('div');
  _MASK.classList.add('modal');

  __INITIALIZED__ = true;
};

// Note: "this" is a reference to the buttom DOM element and has all the
//       proper attributes set on it such that the implementation below is
//       correct. It does *not* need to use _this (also it's a static method).
var _buttonCallback = function (evt) {
  if (this.info && this.info.callback &&
      typeof this.info.callback === 'function') {
    this.info.callback(evt, this.modal||{});
  }
};

/**
 * Pulls the next element off the focus stack and attempts to set the
 * focus to it.
 *
 */
var _focusNext = function () {
  var node;

  node = _FOCUS_STACK.pop();

  if (node && node instanceof Node && node.focus) {
    node.focus();
  }
};

var ModalView = function (message, params) {
  var _this,
      _initialize,

      _buttons,
      _classes,
      _closable,
      _closeButton,
      _content,
      _destroyOnHide,
      _footer,
      _message,
      _title,
      _titleEl,

      _createButton,
      _createViewSkeleton,
      _onKeyDown,
      _onModalClick;


  params = Util.extend({}, _DEFAULTS, params);
  _this = View(params);

  _initialize = function () {

    _buttons = params.buttons;
    _classes = params.classes;
    _closable = params.closable;
    _destroyOnHide = params.destroyOnHide;
    _message = message;
    _title = params.title;

    _this.el.modal = _this;

    _createViewSkeleton();
    _this.render();

    if (!__INITIALIZED__) {
      _static_initialize();
    }

    params = null;
  };


  _createButton = function (info) {
    var i,
        len,
        button = document.createElement('button'),
        buttonInfo;

    buttonInfo = Util.extend({}, {
      classes: [],
      text: 'Click Me',
      title: '',
      callback: function () {}
    }, info);

    for (i = 0, len = buttonInfo.classes.length; i < len; i++) {
      button.classList.add(buttonInfo.classes[i]);
    }

    button.innerHTML = buttonInfo.text;

    if (buttonInfo.title !== '') {
      button.setAttribute('title', buttonInfo.title);
    }

    button.modal = _this;
    button.info = buttonInfo;

    if (buttonInfo.callback) {
      button.addEventListener('click', _buttonCallback);
    }

    return button;
  };

  _createViewSkeleton = function () {
    var header, i, len;

    Util.empty(_this.el);
    _this.el.classList.add('modal-dialog');

    // Add custom classes to the view
    if (_classes && _classes.length > 0) {
      for (i = 0, len = _classes.length; i < len; i++) {
        _this.el.classList.add(_classes[i]);
      }
    }

    if (_title) {
      header = _this.el.appendChild(document.createElement('header'));
      header.classList.add('modal-header');

      _titleEl = header.appendChild(document.createElement('h3'));
      _titleEl.setAttribute('tabIndex', '-1');
      _titleEl.classList.add('modal-title');


      if (_closable) {
        _closeButton = header.appendChild(document.createElement('span'));
        _closeButton.classList.add('modal-close-link');
        _closeButton.classList.add('material-icons');
        _closeButton.setAttribute('title', 'Close');
        _closeButton.innerHTML = 'close';
        _closeButton.addEventListener('click', _this.hide);
      }
    }  else {
      _this.el.classList.add('no-header');
    }

    _content = _this.el.appendChild(document.createElement('section'));
    _content.setAttribute('tabIndex', '-1');
    _content.classList.add('modal-content');

    if (_buttons && _buttons.length) {
      _footer = _this.el.appendChild(document.createElement('footer'));
      _footer.classList.add('modal-footer');
    } else {
      _this.el.classList.add('no-footer');
    }
  };

  /**
   * This method is bound to the ModalView instance using the
   * Function.prototype.bind method, thus the reference to "this" is correct
   * even though this is a keydown event handler.
   *
   * @param event {KeyEvent}
   *      The event that triggered this call.
   */
  _onKeyDown = function (event) {
    if (event.keyCode === 27) {
      _this.hide();
    }
  };


  _onModalClick = function (event) {
    if (event.target.className === 'modal') {
      _this.hide();
    }
  };

  /**
   * Remove event listeners and free references.
   *
   * You should call hide first.
   */
  _this.destroy = function () {
    var button;

    _MASK.removeEventListener('click', _this.hide);

    if (_buttons && _buttons.length) {
      while (_footer.childNodes.length > 0) {
        button = _footer.firstChild;
        button.removeEventListener('click', _buttonCallback);
        _footer.removeChild(button);
      }
    }

    if (_closeButton) {
      _closeButton.removeEventListener('click', _this.hide);
      _closeButton = null;
    }

    delete _this.el.modal;

    _footer = null;
    _titleEl = null;
    _content = null;
    _destroyOnHide = null;
    _this.el = null;
    _onModalClick = null;
  };

  _this.hide = function (clearAll) {
    var isVisible;

    isVisible = (_this.el.parentNode === _MASK);

    if (clearAll === true) {
      // Remove any/all dialogs attached to _MASK
      Util.empty(_MASK);

      // Clear stack of previous dialogs to return user to normal application.
      _DIALOG_STACK.splice(0, _DIALOG_STACK.length);

      // Clear all but last focus element
      _FOCUS_STACK.splice(1, _FOCUS_STACK.length);

      _focusNext();

      if (isVisible) { // Or rather, was visible
        _this.trigger('hide', _this);

        if (_destroyOnHide) {
          _this.destroy();
        }
      }
    } else if (isVisible) {
      // This modal is currently visible
      _this.el.parentNode.removeChild(_this.el);

      // Check if any other dialogs exist in stack, if so, show it
      if (_DIALOG_STACK.length > 0) {
        _DIALOG_STACK.pop().show();
      }

      _focusNext();
      _this.trigger('hide', _this);

      if (_destroyOnHide) {
        _this.destroy();
      }
    }

    if (!_MASK.firstChild && _MASK.parentNode) {
      // No more dialogs, remove the _MASK
      _MASK.parentNode.removeChild(_MASK);
      _MASK.removeEventListener('click', _onModalClick);

      document.body.classList.remove('backgroundScrollDisable');
      window.removeEventListener('keydown', _onKeyDown);
    }

    return _this;
  };

  _this.render = function (message) {
    var m = message || _message,
        button = null,
        buttons = _buttons || [],
        i, len = buttons.length;

    // Set the modal dialog content
    Util.empty(_content);

    if (typeof m === 'string') {
      _content.innerHTML = m;
    } else if (typeof m === 'function') {
      return _this.render(m(_this));
    } else if (m instanceof Node) {
      _content.appendChild(m);
    }

    // Set the modal dialog title
    if (_title) {
      _titleEl.innerHTML = _title;
    }

    // Clear any old footer content
    if (_buttons && _buttons.length) {
      while (_footer.childNodes.length > 0) {
        button = _footer.firstChild;
        Util.removeEvent(button, 'click', _buttonCallback);
        _footer.removeChild(button);
      }
    }

    // Set new footer content
    for (i = 0; i < len; i++) {
      _footer.appendChild(_createButton(buttons[i]));
    }

    _this.trigger('render', _this);
    return _this;
  };

  _this.setMessage = function (message) {
    _message = message;

    _this.trigger('message', _this);
    return _this;
  };

  _this.setOptions = function (params, extend) {
    if (extend) {
      params = Util.extend({}, {
        buttons: _buttons,
        classes: _classes,
        closable: _closable,
        message: _message,
        title: _title
      }, params);
    }

    _buttons = params.buttons;
    _classes = params.classes;
    _closable = params.closable;
    _message = message;
    _title = params.title;

    _this.trigger('options', _this);
    return _this;
  };

  _this.show = function () {
    var oldChild = null;

    // For accessibility, focus the top of this new dialog
    _FOCUS_STACK.push(document.activeElement || false);

    // Mask already has a dialog in it, add to dialog stack and continue
    while (_MASK.firstChild) {
      oldChild = _MASK.firstChild;
      if (oldChild.modal) {
        _DIALOG_STACK.push(oldChild.modal);
      }
      _MASK.removeChild(oldChild);
    }

    // Add this dialog to the mask
    _MASK.appendChild(_this.el);
    _MASK.addEventListener('click', _onModalClick);

    // Show the mask if not yet visible
    if (!_MASK.parentNode) {
      document.body.appendChild(_MASK);
      document.body.classList.add('backgroundScrollDisable');
      window.addEventListener('keydown', _onKeyDown);
    }


    if (_title) {
      _titleEl.focus();
    } else {
      _content.focus();
    }

    _this.trigger('show', _this);
    return _this;
  };

  _initialize();
  return _this;
};

module.exports = ModalView;

},{"../util/Util":"util/Util","./View":"mvc/View"}],38:[function(require,module,exports){
'use strict';

var Collection = require('./Collection'),
    CollectionSelectBox = require('./CollectionSelectBox'),
    Util = require('../util/Util'),
    View = require('./View');

/**
 * Construct a SortView.
 *
 * Sort objects can specify a custom sort function (sort),
 * or a value to be sorted (sortBy) and sort order (descending).
 *
 * @param options {Object}
 * @param options.sorts {Array<Object>}
 *        array of sort objects, with properties:
 *        - id {String|Number} unique identifier for sort
 *        - title {String} display name for sort
 *        And:
 *        - sort {Function(a, b)} sorting function.
 *        Or:
 *        - sortBy {Function(Object)} return value for sorting.
 *        - descending {Boolean} default false, whether to
 *          sort ascending (true) or descending (false).
 * @param options.defaultSort {ID}
 *        Optional.
 *        If specified, should match "id" of a sort object.
 * @see mvc/View
 */
var SortView = function (params) {
  var _this,
      _initialize,

      _collection,
      _selectView,
      _sortCollection,

      _getSortFunction,
      _onSelect;


  _this = View(params);

  /**
   * Initialize the SortView.
   */
  _initialize = function () {
    var el = _this.el;

    _collection = params.collection;

    el.innerHTML = '<label>Sort by <select></select></label>';
    el.classList.add('sortview');

    _sortCollection = new Collection(params.sorts);
    _sortCollection.on('select', _onSelect, this);

    // initial sort order
    if (params.defaultSort) {
      _sortCollection.select(_sortCollection.get(params.defaultSort));
    } else {
      _sortCollection.select(_sortCollection.data()[0]);
    }

    _selectView = new CollectionSelectBox({
      el: el.querySelector('select'),
      collection: _sortCollection,
      format: function (item) {
        return item.title;
      }
    });

    params = null;
  };


  /**
   * Convert a sortBy function to a sort function.
   *
   * @param sortBy {Function(Object)}
   *        function that returns sort key.
   * @param descending {Boolean}
   *        Default false.
   *        Whether to sort ascending (false) or descending (true).
   * @return {Function(a, b)} sort function.
   */
  _getSortFunction = function (sortBy, descending) {
    var cache = {};

    return function (a, b) {
      var aval = cache[a.id],
          bval = cache[b.id],
          tmp;

      if (!aval) {
        aval = cache[a.id] = sortBy(a);
      }
      if (!bval) {
        bval = cache[b.id] = sortBy(b);
      }

      if (descending) {
        // swap comparison order
        tmp = bval;
        bval = aval;
        aval = tmp;
      }

      if (aval < bval) {
        return -1;
      } else if (aval > bval) {
        return 1;
      } else {
        return 0;
      }
    };
  };

  /**
   * Handle sort collection select event.
   */
  _onSelect = function () {
    var selected = _sortCollection.getSelected(),
        sort;

    if (selected) {
      sort = selected.sort;
      if (!sort) {
        sort = _getSortFunction(selected.sortBy, selected.descending);
      }
      _collection.sort(sort);
    }
  };


  /**
   * Destroy the SortView.
   */
  _this.destroy = Util.compose(function () {
    _sortCollection.off('select', _onSelect, this);
    _sortCollection = null;
    _collection = null;
    _selectView.destroy();
  }, _this.destroy);


  _initialize();
  return _this;
};

module.exports = SortView;
},{"../util/Util":"util/Util","./Collection":32,"./CollectionSelectBox":33,"./View":"mvc/View"}],39:[function(require,module,exports){
'use strict';

var XmlUtil = require('quakeml/XmlUtil'),
    QuakemlEvent = require('quakeml/QuakemlEvent');


/**
 * Create a new Quakeml object.
 *
 * @param options {Object}
 * @param options.xml {String|XMLDocument}
 *        quakeml xml to parse.
 *        If a string, options.xml is parsed using DOMParser.
 * @param options.eventElement {String}
 *        Default 'event'.
 *        The event element inside eventParameters to find.
 *        The first matching element is parsed during _initialize.
 */
var Quakeml = function (options) {
  var _this,
      _initialize,

      _event,
      _updated,
      _quakeml;


  _this = Object.create({});

  /**
   * Initialize the quakeml object.
   */
  _initialize = function (options) {
    var ev,
        eventElement = options.eventElement || 'event',
        eventParameters,
        json,
        quakeml;

    json = XmlUtil.xmlToJson(options.xml);
    quakeml = json['q:quakeml'];
    eventParameters = quakeml.eventParameters;
    ev = eventParameters[eventElement];
    if (typeof ev === 'undefined') {
      throw new Error('Event element ' + eventElement + ' not found');
    }

    _quakeml = quakeml;
    _updated = eventParameters.creationInfo.creationTime;
    _event = QuakemlEvent((Array.isArray(ev) ? ev[0] : ev));
  };


  /**
   * @return {Array<Object>} magnitudes parsed from event element.
   */
  _this.getMagnitudes = function () {
    return _event.getMagnitudes();
  };

  /**
   * @return {Array<Object>} origins parsed from event element.
   */
  _this.getOrigins = function () {
    return _event.getOrigins();
  };

  /**
   * @return {Element} event element from quakeml message.
   */
  _this.getQuakemlEvent = function () {
    return _event.getEvent();
  };

    /**
   * @return {String} iso8601 timestamp when quakeml message was updated.
   */
  _this.getUpdated = function () {
    return _updated;
  };

  _initialize(options);
  options=null;
  return _this;

};


module.exports = Quakeml;

},{"quakeml/QuakemlEvent":40,"quakeml/XmlUtil":41}],40:[function(require,module,exports){
'use strict';

/**
 * Convert an object to an array if needed.
 *
 * @param obj {Any}
 * @return {Array}
 *         if obj is an Object, either
 *           obj, if obj is already an array,
 *           otherwise, [obj]
 *         otherwise, [].
 */
var _array = function (obj) {
  if (Array.isArray(obj)) {
    return obj;
  } else if (typeof obj === 'object' && obj !== null) {
    return [obj];
  } else {
    return [];
  }
};

/**
 * Copy properties from source objects onto dest.
 *
 * @param dest {Object}
 *        destination for copied properties.
 * @param varargs {Object, ...}
 *        source objects, processed in argument order from left to right.
 *        all properties are copied from the source object to dest.
 * @return {Object} dest, after copying source object properties.
 */
var _extend = function (dest /*, varargs */) {
  var src,
      i,
      key;
  for (i = 1; i < arguments.length; i++) {
    src = arguments[i];
    if (typeof src === 'object' && src !== null) {
      for (key in src) {
        dest[key] = src[key];
      }
    }
  }
  return dest;
};

/**
 * Build a lookup index for objects, based on (unique) property value.
 *
 * For Example:
 *     _index([{id: 'a'}, {id: 'b'}], 'id')
 * would return
 *    {
 *      'a': {id: 'a'},
 *      'b': {id: 'b'}
 *    }
 *
 * @param objs {Array<Object>}
 *        objects to index
 * @param key {String}
 *        property to index.
 * @param index {Object}
 *        optional, existing index to extend.
 * @return {Object} indexed data.
 */
var _index = function (objs, key, index) {
  var i,
      len,
      obj;
  index = index || {};
  if (objs) {
    if (!Array.isArray(objs)) {
      objs = [objs];
    }
    for (i = 0, len = objs.length; i < len; i++) {
      obj = objs[i];
      index[obj[key]] = obj;
    }
  }
  return index;
};


/**
 * Construct a new Quakeml Event.
 *
 * @param ev {Element}
 *        Quakeml event(like) element
 */
var QuakemlEvent = function (ev) {
  var _this,
      _initialize,

      _amplitudeIndex,
      _catalog,
      _ev,
      _magnitudes,
      _origins,
      _pickIndex,
      _preferredMagnitudeID,
      _preferredOriginID,
      _stationMagnitudeIndex,

      _parseArrivals,
      _parseOrigins,
      _parseMagnitudeContributions,
      _parseMagnitudes;


  _this = Object.create({});

  /**
   * Initialize this event, by parsing origins and magnitudes.
   */
  _initialize = function (ev) {
    _ev = ev;
    _catalog = _ev['catalog:eventSource'];
    _preferredOriginID = _ev.preferredOriginID || null;
    _preferredMagnitudeID = _ev.preferredMagnitudeID || null;

    _pickIndex = _index(_ev.pick, 'publicID');
    _amplitudeIndex = _index(_ev.amplitude, 'publicID');
    _stationMagnitudeIndex = _index(_ev.stationMagnitude, 'publicID');

    _origins = _parseOrigins(_array(_ev.origin));
    _magnitudes = _parseMagnitudes(_array(_ev.magnitude));
    ev = null;
  };

  /**
   * Parse an array of arrival elements.
   *
   * @param arrivals {Array<Element>}
   *        array of quakeml arrival elements.
   * @return {Array<Object>} parsed arrival objects.
   */
  _parseArrivals = function (arrivals) {
    var a,
        arrival,
        parsed = [],
        pickIndex = _pickIndex;

    for (a = 0; a < arrivals.length; a++) {
      arrival = _extend({}, arrivals[a]);
      if (typeof arrival.pickID === 'string') {
        arrival.pick = pickIndex[arrival.pickID] || null;
      } else {
        arrival.pick = null;
      }
      parsed.push(arrival);
    }
    return parsed;
  };

  /**
   * Parse an array of stationMagnitudeContribution elements.
   *
   * @param contributions {Array<Element>}
   *        array of quakeml stationMagnitudeContribution elements.
   * @return {Array<Object>} parsed stationMagnitudeContribution objects.
   */
  _parseMagnitudeContributions = function (contributions) {
    var amplitudeIndex = _amplitudeIndex,
        c,
        contribution,
        parsed = [],
        stationMagnitude,
        stationMagnitudeIndex = _stationMagnitudeIndex;

    for (c = 0; c < contributions.length; c++) {
      contribution = _extend({}, contributions[c]);
      stationMagnitude = _extend({},
          stationMagnitudeIndex[contribution.stationMagnitudeID]);
      contribution.stationMagnitude = stationMagnitude;
      if (typeof stationMagnitude.amplitudeID === 'string') {
        stationMagnitude.amplitude = _extend({},
            amplitudeIndex[stationMagnitude.amplitudeID]);
      }
      parsed.push(contribution);
    }
    return parsed;
  };

  /**
   * Parse and array of magnitude elements.
   *
   * @param magnitudes {Array<Element>}
   *        array of quakeml magnitude elements.
   * @return {Array<Object>} parsed magnitude objects.
   */
  _parseMagnitudes = function (magnitudes) {
    var m,
        magnitude,
        parsed = [],
        preferredMagnitudeID = _preferredMagnitudeID;

    for (m = 0; m < magnitudes.length; m++) {
      magnitude = _extend({}, magnitudes[m]);
      magnitude.isPreferred = (preferredMagnitudeID === magnitude.publicID);
      magnitude.contributions = _parseMagnitudeContributions(
          _array(magnitude.stationMagnitudeContribution));
      delete magnitude.stationMagnitudeContribution;
      if (magnitude.isPreferred) {
        parsed.unshift(magnitude);
      } else {
        parsed.push(magnitude);
      }
    }
    return parsed;
  };

  /**
   * Parse an array of origin elements.
   *
   * @param origins {Array<Element>}
   *        array of quakeml origin elements.
   * @return {Array<Object>} parsed origin objects.
   */
  _parseOrigins = function (origins) {
    var o,
        origin,
        parsed = [],
        preferredOriginID = _preferredOriginID;

    for (o = 0; o < origins.length; o++) {
      origin = _extend({}, origins[o]);
      origin.isPreferred = (preferredOriginID === origin.publicID);
      origin.arrivals = _parseArrivals(_array(origin.arrival));
      delete origin.arrival;
      if (origin.isPreferred) {
        parsed.unshift(origin);
      } else {
        parsed.push(origin);
      }
    }
    return parsed;
  };

  /**
   * @return {Object} quakeml event element as json object.
   */
  _this.getEvent = function () {
    return _ev;
  };

  /**
   * @return {Array<Object>} magnitudes parsed from event.
   */
  _this.getMagnitudes = function () {
    return _magnitudes;
  };

  /**
   * @return {Array<Object>} origins parsed from event.
   */
  _this.getOrigins = function () {
    return _origins;
  };

  _initialize(ev);
  ev = null;
  return _this;

};

module.exports = QuakemlEvent;

},{}],41:[function(require,module,exports){
'use strict';


var XmlUtil = {

  /**
   * Convert simple xml to a json object.
   * Does not work well for mixed content (text/elements).
   */
  xmlToJson: function (xml) {
    // based on http://davidwalsh.name/convert-xml-json
    var obj = {},
        children = [],
        attrs,
        attr,
        nodes,
        node,
        nodeName,
        nodeValue,
        i,
        len;

    if (typeof xml === 'string') {
      xml = new DOMParser().parseFromString(xml, 'text/xml');
    }

    if (xml.nodeType === 3) {
      return xml.nodeValue;
    }

    if (xml.nodeType === 1) {
      attrs = xml.attributes;
      for (i = 0, len = attrs.length; i < len; i++) {
        attr = attrs.item(i);
        obj[attr.nodeName] = attr.nodeValue;
      }
    }

    if (xml.hasChildNodes()) {
      nodes = xml.childNodes;
      for(i = 0, len = nodes.length; i < len; i++) {
        node = nodes.item(i);
        nodeName = node.nodeName;
        nodeValue = XmlUtil.xmlToJson(node);
        children.push(nodeValue);
        if (typeof(obj[nodeName]) === 'undefined') {
          obj[nodeName] = nodeValue;
        } else {
          if (typeof(obj[nodeName].push) === 'undefined') {
            obj[nodeName] = [obj[nodeName]];
          }
          obj[nodeName].push(nodeValue);
        }
      }
    }

    // clean up '#text' nodes
    if (children.length === 1 &&
        obj['#text'] &&
        Object.keys(obj).length === 1) {
      return obj['#text'];
    }

    return obj;
  }

};


module.exports = XmlUtil;

},{}],"core/AccordionView":[function(require,module,exports){
'use strict';

var Accordion = require('accordion/Accordion'),
    Util = require('util/Util'),
    View = require('mvc/View');


var _DEFAULTS = {
  classes: 'accordion-standard',
  destroyView: true,
  expanded: false,
  toggleElement: 'h3',
  toggleText: 'Show more'
};


/**
 * Wrap a view in an accordion.
 *
 * Any of these options can be changed later by updating this view's model.
 *
 * @param options {Object}
 * @param options.classes {String}
 *     passed to Accordion as classes option.
 * @param options.destroyView {Boolean}
 *     whether to destroy wrapped view when this view is destroyed.
 *     default true.
 * @param options.expanded {Boolean}
 *     whether accordion should be expanded by default.
 *     default false.
 * @param options.toggleElement {String}
 *     passed to Accordion as toggleElement option.
 *     default 'h3'.
 * @param options.toggleText {String}
 *     passed to Accordion as toggleText option.
 *     default 'Show more'.
 */
var AccordionView = function (options) {
  var _this,
      _initialize,

      _accordion;


  _this = View(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _this.model.set({
      classes: options.classes,
      destroyView: options.destroyView,
      expanded: options.expanded,
      toggleElement: options.toggleElement,
      toggleText: options.toggleText,
      view: options.view
    }, {silent: true});
  };


  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }

    if (_accordion) {
      // clean up previous render
      _accordion.destroy();
      _accordion = null;
    }

    if (_this.model.get('destroyView')) {
      _this.model.get('view').destroy();
    }

    _this.el.removeEventListener('click', _this.onClick);
    _this = null;
  }, _this.destroy);

  /**
   * Click handler called when accordion is clicked.
   */
  _this.onClick = function () {
    var view;

    // render view
    view = _this.model.get('view');
    view.render();

    // remove listener
    _this.el.removeEventListener('click', _this.onClick);
  };

  /**
   * Render accordion, and set up click handler to render wrapped view.
   */
  _this.render = function () {
    var classes,
        expanded,
        model,
        toggleElement,
        toggleText,
        view;

    if (_accordion) {
      // clean up previous render
      _accordion.destroy();
      _accordion = null;
      _this.el.removeEventListener('click', _this.onClick);
    }

    model = _this.model.get();
    classes = model.classes;
    expanded = model.expanded;
    toggleElement = model.toggleElement;
    toggleText = model.toggleText;
    view = model.view;

    if (!expanded) {
      classes = classes + ' accordion-closed';
    }

    // create accordion
    _accordion = Accordion({
      el: _this.el,
      accordions: [{
        classes: classes,
        content: view.el,
        toggleElement: toggleElement,
        toggleText: toggleText
      }]
    });

    if (expanded) {
      view.render();
    } else {
      _this.el.addEventListener('click', _this.onClick);
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = AccordionView;

},{"accordion/Accordion":2,"mvc/View":"mvc/View","util/Util":"util/Util"}],"core/Attribution":[function(require,module,exports){
'use strict';


var Collection = require('mvc/Collection'),
    Product = require('pdl/Product'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');


var _CONTRIBUTOR_LINK_CLASS = 'contributor-link';
var _CONTRIBUTOR_LIST_CLASS = 'contributor-list';
var _CONTRIBUTOR_REFERENCE_CLASS = 'contributor-reference';
var _CONTRIBUTOR_DATA_ATTRIBUTE = 'data-id';

var _DEFAULTS = {};


var Attribution = function (options) {
  var _this,
      _initialize,
      // variables
      _contributors,
      _sourceMap,
      _whenReady,
      // methods
      _formatContributorLink,
      _formatContributorList,
      _formatContributorReference,
      _onError,
      _onSuccess,
      _onReady,
      _sortByName;


  _this = {};

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _contributors = [];
    _sourceMap = null;
    _whenReady = [];
  };


  /**
   * Get contributor link.
   *
   * @param id {String}
   *        contributor code.
   * @return {String} formatted link to contributor, or title if contributor
   *         does not have a url.
   */
  _formatContributorLink = function (id) {
    var contributor,
        title,
        url;

    title = null;
    url = null;

    if (id !== null) {
      id = id.toUpperCase();
      contributor = _this.getContributor(id);

      if (contributor) {
        title = contributor.title;
        url = contributor.url;
      }

      if (!title) {
        title = id;
      }
    }

    if (url) {
      return '<a href="' + url + '">' + title + '</a>';
    } else {
      return title;
    }
  };

  /**
   * Format list of contributors.
   *
   * @return {String} formatted list of contributors.
   */
  _formatContributorList = function () {
    var listMarkup = [];

    for (var i = 0; i < _contributors.length; i++) {
      listMarkup.push('<li>' +
          _this.getContributorLink(_contributors[i]) +
          '</li>');
    }

    return listMarkup.join('');
  };

  /**
   * Format contributor reference.
   *
   * Uses abbreviation if contributor has title.
   * Adds superscript with position of contributor in contributors list.
   *
   * @param id {String}
   *        contributor id.
   * @return {String} formatted contributor reference.
   */
  _formatContributorReference = function (id) {
    var buf,
        contributor,
        listPosition,
        title,
        url;

    buf = [];
    title = null;
    url = null;

    if (id !== null) {
      id = id.toUpperCase();
      contributor = _this.getContributor(id);

      if (contributor) {
        title = contributor.title;
        url = contributor.url;
      }

      listPosition = _contributors.indexOf(id.toLowerCase()) + 1;

      if (title) {
        buf.push('<abbr title="' + title + '">');
      }

      buf.push(id);

      if (listPosition > 0) {
        // found in list
        buf.push('<sup>' + listPosition + '</sup>');
      }

      if (title) {
        buf.push('</abbr>');
      }
    }

    return buf.join('');
  };

  /**
   * Attribution load error handler.
   */
  _onError = function () {
    _sourceMap = Collection([]);
    _onReady();
  };

  /**
   * Call any registered callbacks after data loads.
   */
  _onReady = function () {
    _whenReady.forEach(function (callback) {
      callback();
    });
    _whenReady = [];
  };

  /**
   * Attribution load success handler.
   *
   * @param data {Array<Object>}
   */
  _onSuccess = function (data) {
    _sourceMap = Collection(data);
    _this.render();
    _onReady();
  };

  /**
   * Sort function for contributors.
   *
   * @param a {String}
   *        first contributor code.
   * @param b {String}
   *        second contributor code.
   * @return -1, when a before b;
   *         0, when equal;
   *         1, when a after b.
   */
  _sortByName = function (a, b) {
    var aName,
        bName;

    aName = _this.getName(a);
    bName = _this.getName(b);

    if (aName < bName) {
      return -1;
    } else if (aName > bName) {
      return 1;
    } else {
      return 0;
    }
  };

  /**
   * Get a contributor by id.
   *
   * @return {Object}
   *         contributor object, with at least properties "id", "title", "url".
   *         title and url are null when contributor not found.
   */
  _this.getContributor = function (id) {
    var contributor;

    contributor = null;
    id = id.toLowerCase();

    if (_sourceMap !== null) {
      contributor = _sourceMap.get(id);

      // TODO: contributor aliases
      // this requires some additional thought,
      // because sourceMap isn't necessarily set to detect duplicates
    }

    return contributor;
  };

  /**
   * Get list of contributors.
   *
   * @return {Array<String>}
   *         list of contributor codes.
   */
  _this.getContributors = function () {
    return _contributors;
  };

  /**
   * Return formatted html list of contributors
   * (as set by #setContributors(Array)).
   *
   * @return {String} html markup for list.
   */
  _this.getContributorList = function () {
    return '<ol class="contributors ' + _CONTRIBUTOR_LIST_CLASS + '">' +
        _formatContributorList() +
        '</ol>';
  };

  /**
   * Get formatted html for link to contributor.
   *
   * @param id {String}
   *        contributor code.
   * @return {String} html.
   */
  _this.getContributorLink = function (id) {
    return '<span class="' + _CONTRIBUTOR_LINK_CLASS + '"' +
        ' ' + _CONTRIBUTOR_DATA_ATTRIBUTE + '="' + id + '">' +
        _formatContributorLink(id) +
        '</span>';
  };

  /**
   * Get formatted html for reference to contributor.
   * References position as returned by getContributorList.
   *
   * @param id {String}
   *        contributor code.
   * @return {String} html markup for reference to contributor.
   */
  _this.getContributorReference = function (id) {
    return '<span class="' + _CONTRIBUTOR_REFERENCE_CLASS + '"' +
        ' ' + _CONTRIBUTOR_DATA_ATTRIBUTE + '="' + id + '">' +
        _formatContributorReference(id) +
        '</span>';
  };

  /**
   * Get the formatted name for a contributor.
   *
   * @param id {String}
   *        contributor code
   * @return {String}
   *         name for contributor.
   */
  _this.getName = function (id) {
    var contributor,
        title;

    contributor = _this.getContributor(id);
    id = id.toUpperCase();
    title = null;
    if (contributor) {
      title = contributor.title;
    }

    if (title) {
      return title + ' (' + id + ')';
    } else {
      return id;
    }
  };

  /**
   * Finds all the relevant attribution to provide for a given product.
   *
   * @param product {Product}
   *     The product for which to generate attribution.
   *
   * @return {String}
   *     Attribution markup for the given product.
   */
  _this.getProductAttribution = function (product) {
    var source,
        sources,
        type;

    sources = {}; // Keep a unique list

    type = Product.getBaseType(product.get('type'));

    // Put product.source on first
    source = product.get('source');
    sources[source] = _this.getContributorReference(source);

    // Add in additional sources based on product type

    if (type === 'origin' || type === 'phase-data') {
      // Look for origin-source property and magnitude-source property and
      // add them as contributors if new ids
      source = product.getProperty('origin-source');
      source = source ? source.toLowerCase() : null;
      if (source && !sources.hasOwnProperty(source)) {
        sources[source] = _this.getContributorReference(source);
      }

      source = product.getProperty('magnitude-source');
      source = source ? source.toLowerCase() : null;
      if (source && !sources.hasOwnProperty(source)) {
        sources[source] = _this.getContributorReference(source);
      }
    } else if (type === 'focal-mechanism' || type === 'moment-tensor') {
      // Look for beachball-source property and add it as contributor if new id
      source = product.getProperty('beachball-source');
      source = source ? source.toLowerCase() : null;
      if (source && !sources.hasOwnProperty(source)) {
        sources[source] = _this.getContributorReference(source);
      }
    }

    return Object.keys(sources).reduce(function (previous, current) {
          return previous + sources[current];
        }, '');
  };

  /**
   * Set list of contributors.
   *
   * @param contributors {Array<String>}
   *        list of contributors.
   */
  _this.setContributors = function (contributors) {
    var el;

    // copy
    _contributors = contributors.slice(0);
    // convert to lower case
    _contributors = contributors.map(function (s) {
      return s.toLowerCase();
    });
    // sort
    _contributors.sort(_sortByName);

    // update contributor list (if it exists)
    el = document.querySelector('.' + _CONTRIBUTOR_LIST_CLASS);
    if (el) {
      el.innerHTML = _formatContributorList();
    }
  };

  /**
   * Load a contributor list.
   */
  _this.load = function (url) {
    Xhr.ajax({
      url: url,
      error: _onError,
      success: _onSuccess
    });
  };

  /**
   * Re-render contributor links and references.
   */
  _this.render = function () {
    var els;

    els = Array.prototype.slice.call(
        document.querySelectorAll('.' + _CONTRIBUTOR_LINK_CLASS), 0);
    els.forEach(function (link) {
      var id;
      id = link.getAttribute(_CONTRIBUTOR_DATA_ATTRIBUTE);
      if (id) {
        link.innerHTML = _formatContributorLink(id);
      }
    });

    els = Array.prototype.slice.call(
        document.querySelectorAll('.' + _CONTRIBUTOR_REFERENCE_CLASS), 0);
    els.forEach(function (ref) {
      var id;
      id = ref.getAttribute(_CONTRIBUTOR_DATA_ATTRIBUTE);
      if (id) {
        ref.innerHTML = _formatContributorReference(id);
      }
    });
  };

  /**
   * Call a callback, possibly waiting for attribution data to load.
   *
   * @param callback {Function}
   *        function that is called (with no arguments) once attribution data
   *        has loaded (or failed to load).
   */
  _this.whenReady = function (callback) {
    if (_sourceMap === null) {
      // save callback for when ready
      _whenReady.push(callback);
    } else {
      // ready now
      callback();
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = Attribution();

},{"mvc/Collection":32,"pdl/Product":"pdl/Product","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"core/BasicPinView":[function(require,module,exports){
'use strict';


var Attribution = require('core/Attribution'),
    Module = require('core/Module'),
    ProductView = require('core/ProductView'),
    Util = require('util/Util');


var _DEFAULTS = {
  module: {ID: '', TITLE: 'Module Title'}
};


/**
 * This class provides a base class from which others can inherit. It
 * defines a simple API for creating custom "pins" for the executive summary
 * section of the event pages. This class extends a ProductView.
 *
 * Each pin is composed of a header, content, and footer section. The
 * header contains, by convention, the product title that links to the product
 * details. The footer contains, by convention, contributor information for
 * the product. The content is much more free-form and is typically the
 * part that is overridden by implementing sub-classes.
 *
 *
 * @param options {Object}
 *     See constructor documentation for details.
 *
 *
 * @see BasicPinView#renderPinContent
 * @see BasicPinView#renderPinFooter
 * @see BasicPinView#renderPinHeader
 *
 */
var BasicPinView = function (options) {
  var _this,
      _initialize,

      _onClick;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ProductView(options);

  /**
   * Initializes the skeleton layout and stores references to DOM containers
   * for subsequent rendring.
   *
   *
   * @param options {Object}
   *     Configuration options for this view, in addition to what is supported
   *     in a standard ProductView, you may provide...
   * @param options.module {Module}
   *     An object containing an "ID" and "TITLE" property. The ID property is
   *     used to create a link to the product page and the TITLE property is
   *     used as the link text.
   *
   */
  _initialize = function (options) {
    _this.module = options.module || Module;

    _this.el.innerHTML = [
      '<article class="pin-view">',
        '<header class="pin-header"></header>',
        '<section class="pin-content"></section>',
        '<footer class="pin-footer"></footer>',
      '</article>'
    ].join('');

    _this.header = _this.el.querySelector('.pin-header');
    _this.content = _this.el.querySelector('.pin-content');
    _this.footer = _this.el.querySelector('.pin-footer');

    _this.header.classList.add(_this.module.ID + '-pin-header');
    _this.content.classList.add(_this.module.ID + '-pin-content');
    _this.footer.classList.add(_this.module.ID + '-pin-footer');

    _this.el.addEventListener('click', _onClick);
  };


  /**
   * Called when _this.el is clicked
   *
   */
  _onClick = function (e) {
    _this.onClick(e);
  };


  _this.getLinkUrl = function () {
    return '#' + _this.module.ID;
  };

  /**
   * Handle a click on _this.el
   *
   * @param e {MouseEvent}
   *     A MouseEvent object
   */
  _this.onClick = function (e) {
    _this.redirect(_this.getLinkUrl());
    if (e && typeof e.preventDefault === 'function') {
      e.preventDefault();
    }
  };

  /**
   * Update window.location
   *
   */
  _this.redirect = function (url) {
    window.location = url;
  };

  /**
   * Frees resources associated with this view.
   *
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }

    _this.el.removeEventListener('click', _onClick);

    _onClick = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Render the header, content, and footer sections of this pin.
   *
   * @return {BasicPinView}
   *     Returns a reference to this view for method chaining...
   *
   */
  _this.render = function () {
    _this.renderPinHeader();
    _this.renderPinContent();
    _this.renderPinFooter();

    return _this;
  };

  /**
   * @APIMethod
   *
   * Render the content section of the pin. Implementing sub-classes will
   * likely want to override this method.
   *
   */
  _this.renderPinContent = function () {
    _this.content.innerHTML = 'Pin Content';
  };

  /**
   * @APIMethod
   *
   * Render the footer section of the pin.
   *
   */
  _this.renderPinFooter = function () {
    _this.footer.innerHTML = 'Contributed by ' +
        Attribution.getProductAttribution(_this.model);
  };

  /**
   * @APIMethod
   *
   * Render the header section of the pin.
   *
   */
  _this.renderPinHeader = function () {
    var display;

    // Use module ID and TITLE to create a link
    display = _this.module.TITLE;

    _this.header.innerHTML = [
      '<a href="', _this.getLinkUrl(), '">', display, '</a>'
    ].join('');
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = BasicPinView;

},{"core/Attribution":"core/Attribution","core/Module":"core/Module","core/ProductView":"core/ProductView","util/Util":"util/Util"}],"core/ContentView":[function(require,module,exports){
'use strict';

var Util = require('util/Util'),
    View = require('mvc/View'),
    Xhr = require('util/Xhr');


/**
 * View for a specific Content.
 *
 * @param options {Object}
 *     all options are passed to mvc/View.
 */
var ContentView = function (options) {
  var _this,

      _xhr;

  _this = View(options);

  _this.destroy = Util.compose(function () {
    if (_xhr) {
      _xhr.abort();
      _xhr = null;
    }
    _this = null;
  }, _this.destroy);

  /**
   * Asynchronous method to fetch the data associated with _this.model {Content}
   * object. This method proceeds asynchronously regardless of whether
   * _this.model users `bytes` or `url` data. On success the _this.onSuccess
   * callback is invoked, on error, the _this.onError callback is invoked.
   *
   */
  _this.fetchData = function () {
    var data;

    data = _this.model.get('bytes');
    if (data !== null) {
      // force async
      setTimeout(function () {
        if (!_this) {
          // view was destroyed before next tick
          // simulate async abort
          return;
        }
        _this.onSuccess(data, null);
      }, 0);
    } else {
      _xhr = Xhr.ajax({
        url: _this.model.get('url'),
        success: _this.onSuccess,
        error: _this.onError,
        done: function () {
          _xhr = null;
        }
      });
    }
  };

  /**
   *
   * @param status {String}
   *      A description of the error that occurred.
   * @param xhr {XMLHttpRequest} Optional. Default undefined.
   *      The original request that lead to the error.
   */
  _this.onError = function (status/*, xhr*/) {
    _this.el.innerHTML = status;
  };

  /**
   * @APIMethod
   *
   * This method is called when data is successfully fetched from _this.model
   * {Content} object. It should complete the render of the fetched data
   * into _this.el container.
   *
   * @param data {String|JSON}
   *     The data for _this.model {Content} object.
   * @param xhr {XMLHttpRequest} Optional.
   *     The XMLHttpRequest object used to fetch the data. If _this.model
   *     uses `bytes` data, this parameter is `null`.
   */
  _this.onSuccess = function (data/*, xhr*/) {
    _this.el.innerHTML = data;
  };

  /**
   * Called when the model changes. Initially sets a loading message then starts
   * the data fetch process to render the actual content. Relies on browser
   * caches to avoid duplicate HTTP overhead.
   *
   */
  _this.render = function () {
    _this.el.innerHTML = '<p>Loading content&hellip;</p>';
    _this.fetchData();
  };


  options = null;
  return _this;
};


module.exports = ContentView;

},{"mvc/View":"mvc/View","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"core/CooperatorLogo":[function(require,module,exports){
'use strict';

var Util = require('util/Util');


var _DEFAULTS = {
  cooperator: null,
  el: null
};


/**
 * Class to manage cooperator logo.
 *
 * @param options {Object}
 * @param options.cooperator {Object}
 *        optional, default null.
 *        see #setCooperator(cooperator)
 * @param options.el {Element}
 *        optional, default document.querySelector('.cooperators').
 *        if no element found, creates and attempts to add to "site-header".
 */
var CooperatorLogo = function (options) {
  var _this,
      _initialize;


  _this = {};

  _initialize = function (options) {
    var el;

    options = Util.extend({}, _DEFAULTS, options);

    // use configured element, or fall back to template element.
    el = options.el || document.querySelector('.cooperators');
    if (!el) {
      // if template element doesn't exist, create and add to site-header
      el = document.createElement('div');
      el.classList.add('cooperators');
      try {
        document.querySelector('.site-header').appendChild(el);
      } catch (e) {
        // ignore, maybe not in template
      }
    }
    _this.el = el;

    _this.setCooperator(options.cooperator);
  };

  /**
   * Clear existing cooperator list, and replace with specified  cooperator.
   *
   * @param cooperator {Object}
   *        when null, clears cooperator list and returns.
   * @param cooperator.logo {String}
   *        url for cooperator logo.
   * @param cooperator.title {String}
   *        title for cooperator.
   * @param cooperator.url {String}
   *        Optional, when omitted logo will not be linked.
   *        url for link to cooperator.
   */
  _this.setCooperator = function (cooperator) {
    var el,
        img,
        logo,
        title,
        url;

    // remove existing contributor
    Util.empty(_this.el);

    // validate new contributor
    if (!cooperator || !cooperator.logo || !cooperator.title) {
      return;
    }

    logo = cooperator.logo;
    title = cooperator.title;
    url = cooperator.url;

    // create logo
    img = document.createElement('img');
    img.setAttribute('src', logo);
    img.setAttribute('alt', 'in cooperation with ' + title);
    el = img;

    // wrap in link if applicable
    if (url) {
      el = document.createElement('a');
      el.setAttribute('href', url);
      el.appendChild(img);
    }

    // add cooperator class
    el.classList.add('cooperator');

    // add to cooperators section
    _this.el.appendChild(el);
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = CooperatorLogo;
},{"util/Util":"util/Util"}],"core/DownloadView":[function(require,module,exports){
'use strict';


var ContentView = require('core/ContentView'),
    Formatter = require('core/Formatter'),
    Product = require('pdl/Product');


var _NO_CONTENT_MESSAGE = 'No download content available.';


/**
 * This class extends the {ContentView} class and is specifically used
 * for rendering "contents.xml" for a given product. The `options.model` should
 * be of type {Content}.
 *
 *
 * @param options {Object}
 *     An object containing configuration options for this view.
 *
 * @param options.product {Product}
 *     The product for which to render contents.xml.
 * @param options.formatter {Formatter}
 *     The formatter object to use for formatting intrinsic values.
 */
var DownloadView = function (options) {
  var _this,
      _initialize,

      _formatter,
      _product;

  options = options || {};
  _this = ContentView(options);

  /**
   * @Constructor
   *
   * Initializes the view. See class level documentation for details.
   */
  _initialize = function (options) {
    _product = options.product || Product();

    _this.el.classList.add('download-view');
    _formatter = options.formatter || Formatter();
  };


  /**
   * Renders the default error message. Called if an error occurs during the
   * data fetch.
   *
   */
  _this.onError = function (/*status, xhr*/) {
    _this.el.innerHTML = _NO_CONTENT_MESSAGE;
  };

  /**
   * Renders the list of downloads. Called when data is successfully fetched.
   *
   */
  _this.onSuccess = function (responseText, xhr) {
    try {
      _this.el.innerHTML = '<ul class="no-style">' +
        _this.parse(xhr.responseXML).map(_this.renderFile).join('') +
      '</ul>';
    } catch (e) {
      _this.onError('Failed to render content.');
    }
  };

  /**
   * Parses an XMLDocument `data` into an array of file data structures.
   *
   * @param data {XMLDocument}
   *     The data fetched from the server, in XML format.
   */
  _this.parse = function (data) {
    return Array.prototype.map.call(
        data.querySelectorAll('contents > file'), _this.parseFile);
  };

  /**
   * Parse an XMLElement into a structured data object representing a file.
   *
   * @param file {XMLElement}
   *     The file element to parse.
   *
   * @return {Object}
   *     A file object with the following keys:
   *     - `id` {String}
   *     - `title` {String}
   *     - `caption` {String}
   *     - `formats` {Array}
   */
  _this.parseFile = function (file) {
    var caption,
        content,
        el,
        els,
        format,
        formats,
        href,
        i,
        id,
        len,
        title,
        type;

    if (file.getAttribute('refid')) {
      throw new Error('file element with refid');
    }

    id = file.getAttribute('id');
    title = file.getAttribute('title');
    caption = file.querySelector('caption');
    caption = (caption ? caption.textContent : null);
    formats = [];

    els = file.querySelectorAll('format');
    for (i = 0, len = els.length; i < len; i++) {
      el = els[i];
      href = el.getAttribute('href');
      type = el.getAttribute('type');

      try {
        format = {
          href: href,
          type: type,
          url: null,
          length: 0
        };

        content = _product.getContent(href);

        format.url = content.get('url');
        format.length = content.get('length');
      } catch (e) {
        if (console && console.log) {
          console.log(e.stack);
        }
      } finally {
        formats.push(format);
      }
    }

    return {
      id: id,
      title: title,
      caption: caption,
      formats: formats
    };
  };

  /**
   * Creates markup representing the give file object.
   *
   * @param file {Object}
   *     The file object to render.
   *
   * @return {String}
   *     The markup representing the given file object.
   */
  _this.renderFile = function (file) {
    return [
      '<li class="download-file">',
        '<span class="download-title">', file.title ,'</span>',
        '<span class="download-caption">', file.caption, '</span>',
        '<ul class="download-formats">',
          file.formats.map(_this.renderFormat).join(''),
        '</ul>',
      '</li>'
    ].join('');
  };

  /**
   * Creates markup representing the give format object.
   *
   * @param format {Object}
   *     The format object to render.
   *
   * @return {String}
   *     The markup representing the given format object.
   */
  _this.renderFormat = function (format) {
    var extension,
        size;

    extension = format.href.split('.').slice(-1).join('').toUpperCase();
    size = _formatter.fileSize(format.length);

    return [
      '<li class="format">',
        '<a href="', format.url, '" ',
            'title="', extension, ' (', format.href, ')">',
          extension, ' (', size, ')',
        '</a>',
      '</li>'
    ].join('');
  };


  _initialize(options);
  options = null;
  return _this;
};


DownloadView.NO_CONTENT_MESSAGE = _NO_CONTENT_MESSAGE;

module.exports = DownloadView;

},{"core/ContentView":"core/ContentView","core/Formatter":"core/Formatter","pdl/Product":"pdl/Product"}],"core/EventPage":[function(require,module,exports){
'use strict';


var Attribution = require('core/Attribution'),
    CatalogEvent = require('pdl/CatalogEvent'),
    CooperatorLogo = require('core/CooperatorLogo'),
    DYFIFormModule = require('dyfi/DYFIFormModule'),
    DYFIModule = require('dyfi/DYFIModule'),
    Events = require('util/Events'),
    ExecutiveSummaryModule = require('general/ExecutiveSummaryModule'),
    FiniteFaultModule = require('finite-fault/FiniteFaultModule'),
    FocalMechanismModule = require('focal-mechanism/FocalMechanismModule'),
    Formatter = require('core/Formatter'),
    ImpactSummaryModule = require('impact/ImpactSummaryModule'),
    InteractiveMapModule = require('map/InteractiveMapModule'),
    Model = require('mvc/Model'),
    MomentTensorModule = require('moment-tensor/MomentTensorModule'),
    NearbySeismicity = require('core/NearbySeismicity'),
    OafModule = require('oaf/OafModule'),
    OriginModule = require('origin/OriginModule'),
    PAGERModule = require('losspager/PAGERModule'),
    RegionalInfoModule = require('general/RegionalInfoModule'),
    ScientificSummaryModule = require('scientific/ScientificSummaryModule'),
    ShakeMapModule = require('shakemap/ShakeMapModule'),
    Util = require('util/Util'),
    WaveformModule = require('waveform/WaveformModule');


var _DEFAULTS = {
  'event': null, // CatalogEvent
  'config': {
  },
  'defaultModule': ExecutiveSummaryModule.ID,
  'modules': [
    // Overview
    [
      ExecutiveSummaryModule,
      InteractiveMapModule,
      RegionalInfoModule
    ],
    // Impact
    [
      ImpactSummaryModule,
      DYFIFormModule,
      DYFIModule,
      ShakeMapModule,
      PAGERModule
    ],
    // Technical
    [
      ScientificSummaryModule,
      OriginModule,
      MomentTensorModule,
      FocalMechanismModule,
      FiniteFaultModule,
      WaveformModule,
      OafModule
    ]
  ],
  'redirects': {
    // Overview
    'general_summary': ExecutiveSummaryModule.ID,
    'general_map': InteractiveMapModule.ID,
    // Impact
    'impact_summary': ImpactSummaryModule.ID,
    'impact_tellus': DYFIFormModule.ID,
    'impact_dyfi': DYFIModule.ID,
    'impact_shakemap': ShakeMapModule.ID,
    'impact_pager': PAGERModule.ID,
    // Technical
    'scientific_summary': ScientificSummaryModule.ID,
    'scientific_origin': OriginModule.ID,
    'scientific_moment-tensor': MomentTensorModule.ID,
    'scientific_focal-mechanism': FocalMechanismModule.ID,
    'scientific_finite-fault': FiniteFaultModule.ID,
    'scientific_waveforms': WaveformModule.ID
  }
};

var EventPage = function (options) {
  var _this,
      _initialize,

      _config,
      _currentModule,
      _el,
      _event,
      _formatter,
      _hasPrevious,
      _model,
      _modules,
      _navEl,
      _redirects,

      _createNavItem,
      _initializeModules,
      _onHashChange,
      _parseHash,
      _parseLegacyHash;


  _this = Events();

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);
    _redirects = options.redirects;

    _event = options.event || CatalogEvent();
    _config = options.config || {};
    _config.defaultModule = _config.defaultModule || options.defaultModule;
    _config.modules = options.modules || [];

    _formatter = options.formatter || Formatter();
    // whether event page has previously rendered any content
    _hasPrevious = false;

    _this.updateContributors();
    if (_config.hasOwnProperty('ATTRIBUTION_URL')) {
      Attribution.load(_config.ATTRIBUTION_URL);
    }

    _el = options.el || document.createElement('div');
    _navEl = options.nav || document.createElement('nav');

    _this.header = _el.querySelector('.event-header') ||
        document.createElement('div');
    _this.content = _el.querySelector('.event-content') ||
        document.createElement('div');
    _this.footer = _el.querySelector('.event-footer') ||
        document.createElement('div');

    _model = Model({
      'event': _event,
      'config': _config
    });

    // Creates the mapping for later
    _initializeModules();
    _this.renderHeader();
    Attribution.whenReady(_this.onAttributionReady);

    // render module
    Events.on('back', 'onBack', _this);
    Events.on('hashchange', _onHashChange);
    _onHashChange();
  };

  _createNavItem = function (module, isHeader) {
    var link,
        navItem;

    if (isHeader) {
      navItem = document.createElement('header');
      link = navItem.appendChild(document.createElement('a'));
    } else {
      navItem = document.createElement('a');
      link = navItem;
    }

    link.setAttribute('class', 'module-' + module.ID + '-nav');
    link.setAttribute('href', '#' + module.ID);
    link.innerHTML = module.TITLE;

    return navItem;
  };

  /**
   * Builds an navigation for current _event as well as a map of
   * moduleId => module.
   *
   */
  _initializeModules = function () {
    var group,
        i,
        j,
        module,
        modules,
        moduleGroups,
        numGroups,
        numModules,
        types;

    _modules = {};

    types = (_event ? Object.keys(_event.getProducts()) : []);
    moduleGroups = _config.modules;
    numGroups = moduleGroups.length;

    Util.empty(_navEl);

    // Add navigation link to return to Latest Earthquakes
    _this.createMapLink(_navEl);

    for (i = 0; i < numGroups; i++) {
      modules = moduleGroups[i];
      group = null;

      numModules = modules.length;
      for (j = 0; j < numModules; j++) {
        module = modules[j];

        _modules[module.ID] = module;

        if (_this.moduleHasContent(module, types)) {
          if (!group) {
            group = document.createElement('section');
            group.appendChild(_createNavItem(module, true));
          } else {
            group.appendChild(_createNavItem(module));
          }

        }
      }
      if (group) {
        _navEl.appendChild(group);
      }

      group = null;
    }

    // Add navigation link to download event KML
    _this.createKmlLink(_navEl);

    // Add search nearby seismicity link
    _this.createSearchNearbySeismicityLink(_navEl);
  };

  /**
   * Adds KML Link to the bottom of the navigation.
   * @params el {DOMElement}
   *    The element to add the links to.
   */
  _this.createKmlLink = function(el) {
    var link,
        kmlURL;

    if (_event && _config.KML_STUB) {
      kmlURL = _config.KML_STUB.replace('%s',
          _event.getEventId());

      link = document.createElement('a');
      link.setAttribute('class', 'kml-download');
      link.setAttribute('href', kmlURL);
      link.innerHTML = 'Download Event KML';
      el.appendChild(link);
    }
  };

  /**
   * Adds Latest Earthquakes Link to the top of the navigation.
   * @params el {DOMElement}
   *    The element to add the links to.
   */
  _this.createMapLink = function(el) {
    var link;

    if (!_this.isScenarioMode()) {
      link = document.createElement('a');
      link.setAttribute('class', 'latest-earthquakes');
      link.setAttribute('href', '/earthquakes/map/');
      link.innerHTML = 'Latest Earthquakes';
      link.classList.add('up-one-level');
      el.appendChild(link);
    }
  };

  /**
   * Create search nearby seismicity link.
   *
   * @param el {DOMElement}
   *     element to add link to.
   */
  _this.createSearchNearbySeismicityLink = function (el) {
    var link,
        nearbySeismicity,
        url;

    if (_event && !_this.isScenarioMode()) {
      nearbySeismicity = NearbySeismicity();
      url = nearbySeismicity.getNearbySeismicityLink(_event.getSummary());
      nearbySeismicity.destroy();

      link = document.createElement('a');
      link.setAttribute('class', 'search-nearby-seismicity');
      link.setAttribute('href', url);
      link.innerHTML = 'Search Nearby Seismicity';
      el.appendChild(link);
    }
  };


  /**
   * Unbind event listeners and free references.
   */
  _this.destroy = Util.compose(function () {
    if (!_this) {
      return;
    }

    // render module
    Events.off('back', 'onBack', _this);
    Events.off('hashchange', _onHashChange);

    if (_currentModule) {
      _currentModule.destroy();
    }

    if (_model) {
      _model.destroy();
    }

    // functions
    _createNavItem = null;
    _initializeModules = null;
    _onHashChange = null;
    _parseHash = null;
    _parseLegacyHash = null;

    // variables
    _config = null;
    _currentModule = null;
    _el = null;
    _event = null;
    _formatter = null;
    _hasPrevious = false;
    _model = null;
    _modules = null;
    _navEl = null;
    _this = null;
  }, _this.destroy);

  /**
   * Called when attribution information has been loaded,
   * Updates the contributor logo in the header and
   * the contributor list in the banner.
   */
  _this.onAttributionReady = function () {
    var preferredOrigin;

    // Contributor logo in banner
    preferredOrigin = _event ? _event.getPreferredOriginProduct() : null;
    if (preferredOrigin) {
      CooperatorLogo({
        cooperator: Attribution.getContributor(preferredOrigin.get('source'))
      });
    }

    // Add Contributor list in footer
    _this.renderFooter();
  };

  /**
   * Loops over each product and checks for source information. Creates a
   * unique list of contributors and then sets this list on the
   * Attribution so we have a complete list.
   *
   */
  _this.updateContributors = function () {
    var allProducts,
        products,
        product,
        source,
        sources,
        type,
        i,
        length;

    allProducts = _event ? _event.getProducts() : {};
    sources = {};

    for (type in allProducts) {
      products = allProducts[type];
      length = products.length;

      for (i = 0; i < length; i++) {
        product = products[i];


        // check product source
        source = product.get('source');
        if (source) {
          source = source.toLowerCase();

          if (source !== 'admin' && !sources.hasOwnProperty(source)) {
            sources[source] = true;
          }
        }

        source = product.getProperty('origin-source');
        if (source) {
          source = source.toLowerCase();
          if (!sources.hasOwnProperty(source)) {
            sources[source] = source;
          }
        }
        source = product.getProperty('magnitude-source');
        if (source) {
          source = source.toLowerCase();
          if (!sources.hasOwnProperty(source)) {
            sources[source] = source;
          }
        }
        source = product.getProperty('beachball-source');
        if (source) {
          source = source.toLowerCase();
          if (!sources.hasOwnProperty(source)) {
            sources[source] = source;
          }
        }
      }
    }

    Attribution.setContributors(Object.keys(sources));
  };

  /**
   * Check whether event page is in scenario mode.
   *
   * @return {Boolean}
   *     true, when event page is configured to be in scenario mode;
   *     false, otherwise.
   */
  _this.isScenarioMode = function () {
    return (_config.SCENARIO_MODE === true);
  };

  /**
   * Check whether a module has content.
   *
   * If `module` defines a static hasContent method, defer to module.
   * Otherwise, `module` should define a static TYPES property with a list
   * of "base" product types; if event page is in scenario mode, automatically
   * adds "-scenario" suffix to base type.
   *
   * @param module {Module}
   *     the module to check.
   * @param productTypes {Array<String>}
   *     array of product types associated with current event.
   * @return {Boolean}
   *     true, if module should be included in navigation;
   *     false, otherwise.
   */
  _this.moduleHasContent = function (module, productTypes) {
    var i,
        isScenarioMode,
        len,
        type;

    if (module.hasOwnProperty('hasContent') &&
        typeof module.hasContent === 'function') {
      return module.hasContent(_model);
    } else if (module.hasOwnProperty('TYPES') && Array.isArray(module.TYPES)) {
      len = module.TYPES.length;
      isScenarioMode = _this.isScenarioMode();

      for (i = 0; i < len; i++) {
        type = module.TYPES[i];
        if (isScenarioMode) {
          type += '-scenario';
        }

        if (productTypes.indexOf(type) !== -1) {
          return true;
        }
      }
    }

    return false;
  };

  /**
   * Back event listener.
   *
   * Called in response to `back` event on global Events object.
   */
  _this.onBack = function () {
    if (_hasPrevious) {
      // there is a previous module to render
      window.history.back();
    } else {
      window.location.hash = '#' + _config.defaultModule;
    }
  };

  /**
   * Update model and module based on current url.
   *
   * If current url is unexpected/unknown, loads default module.
   * Triggers a render of current module.
   */
  _onHashChange = function () {
    var clearSettings,
        currentNav,
        hash,
        lastNav,
        modelParams,
        module,
        params,
        redirect;

    // parse urls of format "#module?params" where params is in query string format
    hash = _parseHash(window.location.hash || '');
    module = hash.module;
    params = hash.params;

    // verify module is known, otherwise load default (from "config")
    if (!_modules.hasOwnProperty(module)) {
      hash = _parseLegacyHash(window.location.hash || '');
      module = hash.module;
      params = hash.params;

      if (_modules.hasOwnProperty(module)) {
        redirect = '#' + hash.redirect;
      } else {
        redirect = '#' + _config.defaultModule;
      }

      try {
        // Replace the "bad" url so users can go back before the redirect
        window.location.replace(redirect);
      } catch (e) {
        window.location = redirect;
      }

      return;
    }

    if (_currentModule) {
      // can navigate backwards using window.history
      _hasPrevious = true;

      // if current module is different than requested, destroy current module
      if (_currentModule.ID !== module) {
        // Clear these so defaults are invoked
        clearSettings = {};
        clearSettings[_currentModule.ID] = {};
        _model.set(clearSettings, {silent: true});

        _currentModule.destroy();
        _currentModule = null;
      }
    }

    // if no current module, create module with model and module content element
    if (!_currentModule) {
      _currentModule = _modules[module]({
        el: _this.content,
        formatter: _formatter,
        model: _model
      });
    }

    // update module params
    params = Util.extend({}, params);
    modelParams = {};
    modelParams[module] = params;
    // this triggers a render of _currentModule
    _model.set(modelParams);

    // update navigation
    currentNav = _navEl.querySelector('.module-' + _currentModule.ID + '-nav');
    lastNav = _navEl.querySelector('.current-module');
    if (currentNav !== lastNav) {
      if (lastNav) {
        lastNav.classList.remove('current-module');
      }
      currentNav.classList.add('current-module');
    }

    // notify that page was rendered
    _this.trigger('render');

    // scroll to top of page
    window.scroll(0,0);
  };

  /**
   * Parse the module and module parameters from a hash fragment.
   *
   * @param hash {String}
   *        the hash fragment to parse.
   *        e.g. "#module?param1=value1&param2=value2"
   * @return {Object}
   *         module {String} name of module.
   *         params {Object} module parameters.
   */
  _parseHash = function (hash) {
    var module,
        params,
        parts;

    hash = hash.replace('#', '');
    parts = hash.split('?');
    module = parts[0];
    params = {};
    if (parts.length > 1) {
      // rejoin any remaining parts using ?, then split parameters on &
      parts = parts.slice(1).join('?').split('&');
      // parse each parameter
      parts.forEach(function (param) {
        var name,
            parts,
            value;
        // parameter and value are separated by =
        parts = param.split('=');
        name = decodeURIComponent(parts[0]);
        // value may include =, so slice and rejoin
        value = decodeURIComponent(parts.slice(1).join('='));
        params[name] = value;
      });
    }
    return {
      'module': module,
      'params': params
    };
  };

  /**
   * Parse the module and module parameters from a hash fragment.
   *
   * @param hash {String}
   *        the hash fragment to parse.
   * @return {Object}
   *         module {String} name of module.
   *         params {Object} module parameters.
   *         redirect {Object} redirect parameters.
   */
  _parseLegacyHash = function (hash) {
    var module,
        params,
        parts,
        redirect;

    hash = hash.replace('#', '');
    params = {};
    parts = hash.split(':');
    module = parts[0];

    if (_redirects.hasOwnProperty(module)) {
      module = _redirects[module];
    }

    redirect = module;

    if (parts.length > 1) {
      parts = parts.slice(1).join(':').split('_');

      if (parts[0]) {
        params.source = parts[0];
        redirect += '?source=' + parts[0];
      }

      if (parts[1]) {
        params.code = parts[1];
        redirect += '&code=' + parts[1];
      }
    }

    return {
      'module': module,
      'params': params,
      'redirect': redirect
    };
  };

  _this.renderFooter = function () {
    var contributors,
        markup;

    contributors = Attribution.getContributors();
    markup = [];

    if (contributors && contributors.length !== 0) {
      markup.push(
        '<h3>Contributors</h3>',
        Attribution.getContributorList()
      );
    }

    markup.push(
      '<h3>Additional Information</h3>',
      '<ul>'
    );

    if (_this.isScenarioMode()) {
      markup.push('<li><a href="/scenarios/">Earthquake Scenarios</a></li>');
    } else {
      markup.push(
        '<li>',
          '<a href="/data/comcat/">',
            'ANSS Comprehensive Earthquake Catalog (ComCat) Documentation',
          '</a>',
        '</li>');
    }

    markup.push(
      '<li>',
        '<a href="/data/comcat/data-eventterms.php">',
          'Technical terms used on event pages',
        '</a>',
      '</li>',
      '</ul>');

    _this.footer.innerHTML = markup.join('');
  };

  /**
   * Render event page header content.
   *
   */
  _this.renderHeader = function () {
    // Event page header content is generated on server. Do not modify it here.
  };


  _initialize(options);
  options = null;
  return _this;
};

module.exports = EventPage;

},{"core/Attribution":"core/Attribution","core/CooperatorLogo":"core/CooperatorLogo","core/Formatter":"core/Formatter","core/NearbySeismicity":"core/NearbySeismicity","dyfi/DYFIFormModule":"dyfi/DYFIFormModule","dyfi/DYFIModule":"dyfi/DYFIModule","finite-fault/FiniteFaultModule":"finite-fault/FiniteFaultModule","focal-mechanism/FocalMechanismModule":"focal-mechanism/FocalMechanismModule","general/ExecutiveSummaryModule":"general/ExecutiveSummaryModule","general/RegionalInfoModule":"general/RegionalInfoModule","impact/ImpactSummaryModule":"impact/ImpactSummaryModule","losspager/PAGERModule":"losspager/PAGERModule","map/InteractiveMapModule":"map/InteractiveMapModule","moment-tensor/MomentTensorModule":"moment-tensor/MomentTensorModule","mvc/Model":"mvc/Model","oaf/OafModule":"oaf/OafModule","origin/OriginModule":"origin/OriginModule","pdl/CatalogEvent":"pdl/CatalogEvent","scientific/ScientificSummaryModule":"scientific/ScientificSummaryModule","shakemap/ShakeMapModule":"shakemap/ShakeMapModule","util/Events":"util/Events","util/Util":"util/Util","waveform/WaveformModule":"waveform/WaveformModule"}],"core/Formatter":[function(require,module,exports){
'use strict';

var Util = require('util/Util');


// default options
var _DEFAULTS = {
  // decimal places for depth
  depthDecimals: 1,
  // decimal places for distance
  distanceDecimals: 1,
  // content when a value is missing
  empty: '&ndash;',
  // size abbreviations for [bytes, kilobytes, megabytes, gigabytes]
  fileSizes: [' B', ' KB', ' MB', ' GB'],
  // decimal places for latitude/longitude
  locationDecimals: 3,
  // decimal places for magnitude
  magnitudeDecimals: 1
};


var _MILES_PER_KILOMETER = 0.621371;

var _MMI_ARRAY = ['I', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII',
    'IX', 'X', 'XI', 'XII'];

var _MMI_COLORS = [
  '#FFFFFF',  // I
  '#FFFFFF',  // I
  '#ACD8E9',  // II
  '#ACD8E9',  // III
  '#83D0DA',  // IV
  '#7BC87F',  // V
  '#F9F518',  // VI
  '#FAC611',  // VII
  '#FA8A11',  // VIII
  '#F7100C',  // IX
  '#C80F0A',  // X
  '#C80F0A',  // XI
  '#C80F0A'   // XII
];


/**
 * Construct a new Formatter.
 *
 * @param options {Object}
 *        formatter options.
 */
var Formatter = function (options) {
  var _this,
      _initialize,

      _depthDecimals,
      _distanceDecimals,
      _empty,
      _fileSizes,
      _locationDecimals,
      _magnitudeDecimals;

  _this = {};

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _depthDecimals = options.depthDecimals;
    _distanceDecimals = options.distanceDecimals;
    _empty = options.empty;
    _fileSizes = options.fileSizes;
    _locationDecimals = options.locationDecimals;
    _magnitudeDecimals = options.magnitudeDecimals;
  };


  _this.angle = function (angle, decimals) {
    var value;

    if (!angle && angle !== 0) {
      return _empty;
    }

    if (typeof decimals === 'number') {
      value = Number(angle).toFixed(decimals);
    } else {
      value = Math.round(angle);
    }

    return value + '&deg;';
  };

  /**
   * Converts azimuth to a back azimuth (opposite direction).
   *
   * @param azimuth {Number}
   *    azimuth to format
   * @return {Number}
   *    formatted azimuth
   */
  _this.backAzimuth = function(azimuth) {
    if (azimuth >= 180) {
      azimuth = azimuth - 180;
    } else if (azimuth < 180) {
      azimuth = azimuth + 180;
    }

    return azimuth;
  };

  /**
   * Convert azimuth in degree's into compass points.
   * @param azimuth {number}
   *    azimuth to format
   * @return {String}
   *    compass direction
   */
  _this.compassWinds = function(azimuth) {
    var fullwind = 22.5,
        directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE',
            'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];

    // if direction is already in compass points
    if (directions.indexOf(azimuth) > -1) {
      return azimuth;
    }

    return directions[(Math.round((azimuth%360)/fullwind))];
  };

  /**
   * Format a UTC date.
   *
   * @param date {Date}
   *        date to format.
   * @return {String}
   *         formatted date.
   */
  _this.date = function (date) {
    var year,
        month,
        day;

    if (!date || typeof date.getTime !== 'function') {
      return _empty;
    }

    year = date.getUTCFullYear();
    month = date.getUTCMonth() + 1;
    day = date.getUTCDate();

    if (month < 10) {
      month = '0' + month;
    }
    if (day < 10) {
      day = '0' + day;
    }

    return year + '-' + month + '-' + day;
  };

  /**
   * Format a date and time.
   *
   * @param stamp {Date|Number}
   *        Date or millisecond epoch timstamp to format.
   * @param minutesOffset {Number}
   *        UTC offset in minutes.  0 for UTC.
   * @param includeMilliseconds {Boolean}
   *        default false.
   *        whether to output milliseconds.
   * @return {String}
   *         formatted date.
   */
  _this.datetime = function (stamp, minutesOffset, includeMilliseconds) {
    var milliOffset,
        date;

    if (!stamp && stamp !== 0) {
      return _empty;
    } else if (typeof stamp.getTime === 'function') {
      // allow Date objects
      stamp = stamp.getTime();
    }

    minutesOffset = minutesOffset || 0;
    milliOffset = minutesOffset * 60 * 1000;
    date = new Date(stamp + milliOffset);

    return _this.date(date) + ' ' + _this.time(date, includeMilliseconds) +
        ' (UTC' + _this.timezoneOffset(minutesOffset) + ')';
  };

  /**
   * Format a depth.
   *
   * @param depth {Number}
   *        depth to format
   * @param units {String}
   *        Optional.
   *        depth units, if any.
   * @param error {Number}
   *        Optional.
   *        depth error, if any.
   * @return {String} formatted string.
   */
  _this.depth = function (depth, units, error) {
    if (!depth && depth !== 0) {
      return _empty;
    }
    return _this.number(depth, _depthDecimals, _empty, units) +
        _this.uncertainty(error, _depthDecimals, '');
  };

  /**
   * Format a distance (like km or mi).
   *
   * @param distance {Number}
   *     The distance for format.
   * @param units {String}
   *     The units for this distance.
   *
   * @return {String}
   *     A formatted distance string.
   */
  _this.distance = function (distance, units) {
    return _this.number(distance, _distanceDecimals, _empty, units);
  };

  /**
   * Formats DYFI location
   *
   * @param {response}
   *        dyfi response
   *
   * @return {string}
   *         formatted DYFI location
   */
  _this.dyfiLocation = function (response) {
    var country,
        location,
        region,
        zip;

    country = response.country;
    location = response.name;
    region = response.state;
    zip = response.zip;

    return '<span class="dyfi-response-location">' + location + ', ' +
        region + '&nbsp;' + zip + '<br /><small>' + country + '</small></span>';
  };

  /**
   * Format file size using human friendly sizes.
   *
   * @param bytes {Number}
   *        bytes to format.
   * @return {String} formatted string.
   */
  _this.fileSize = function (bytes) {
    var sizeIndex;

    if (!bytes && bytes !== 0) {
      return _empty;
    }

    sizeIndex = 0;
    bytes = Number(bytes);
    while (bytes >= 1024) {
      bytes = bytes / 1024;
      sizeIndex++;
    }
    if (sizeIndex > 0) {
      bytes = bytes.toFixed(1);
    } else {
      bytes = bytes.toFixed(0);
    }
    return bytes + _fileSizes[sizeIndex];
  };

  /**
   * Format an intensity value.
   *
   * @param intensity {Number}
   *     numeric intensity value.
   * @param text {String}
   *     default ''.
   *     content added following the formatted intensity value.
   * @return {String}
   *     formatted intensity.
   */
  _this.intensity = function (intensity, text) {
    var romanNumeral;

    romanNumeral = _this.mmi(intensity);
    text = text || '';

    return '<span class="mmi mmi' + romanNumeral + '">' +
        '<span class="roman"><strong>' + romanNumeral + '</strong></span>' +
        text +
        '</span>';
  };

  /**
   * Convert kilometers to miles.
   *
   * @param km {Number}
   *        kilometers.
   * @return {Number}
   *         miles.
   */
  _this.kmToMi = function (km) {
    if (!km) {
      return km;
    }
    return (km * _MILES_PER_KILOMETER);
  };

  /**
   * Format a latitude
   * @param latitude {Number}
   *        the latitude.
   * @return {String} formatted string.
   */
  _this.latitude = function (latitude) {
    var latDir;

    if (!latitude && latitude !== 0) {
      return _empty;
    }
    latDir = (latitude >= 0 ? 'N' : 'S');

    // already have sign information, abs before rounding
    latitude = Math.abs(latitude);

    // round to configured number of decimals
    if (typeof _locationDecimals === 'number') {
      latitude = latitude.toFixed(_locationDecimals);
    }

    return latitude + '&deg;' + latDir;
  };

  /**
   * Left pads the source string with the pad string until the source string
   * is at least `length` in length. If the source length is already greater
   * than or equal to the desired length, the original source is returned.
   *
   * @param source {String}
   *     The string to pad
   * @param length {Integer}
   *     The desired length
   * @param pad {String} Optional. Default ' ' (single space)
   *     The padding to add to the beginning of the source string until the
   *     desired length is met. Should be a single rendered character.
   *
   * @return {String}
   *     A string padded out to the desired length with the given pad.
   */
  _this.leftPad = function (source, length, pad) {
    var i,
        padLength,
        padding;

    padLength = length - source.length;
    padding = [];

    if (padLength < 1) {
      return source;
    }

    for (i = 0; i < padLength; i++) {
      padding[i] = pad;
    }


    return padding.join('') + source;
  };

  /**
   * Format a latitude and longitude.
   *
   * @param latitude {Number}
   *        the latitude.
   * @param longitude {Number}
   *        the longitude.
   * @return {String} formatted string.
   */
  _this.location = function (latitude, longitude) {
    return _this.latitude(latitude) + '&nbsp;' +
        _this.longitude(longitude);
  };

  /**
   * Format a longitude
   * @param longitude {Number}
   *        the longitude.
   * @return {String} formatted string.
   */
  _this.longitude = function (longitude) {
    var lonDir;

    if (!longitude && longitude !== 0) {
      return _empty;
    }
    lonDir = (longitude >= 0 ? 'E' : 'W');

    // already have sign information, abs before rounding
    longitude = Math.abs(longitude);

    // round to configured number of decimals
    if (typeof _locationDecimals === 'number') {
      longitude = longitude.toFixed(_locationDecimals);
    }

    return longitude + '&deg;' + lonDir;
  };

  /**
   * Format a magnitude.
   *
   * @param magnitude {Number}
   *        magnitude to format.
   * @param type {String}
   *        Optional.
   *        magnitude type.
   * @param error {Number}
   *        Optional.
   *        magnitude error.
   * @return {String} formatted string.
   */
  _this.magnitude = function (magnitude, type, error) {
    return _this.number(magnitude, _magnitudeDecimals, _empty, type) +
        _this.uncertainty(error, _magnitudeDecimals, '');
  };

  /**
   * Translate mmi to a roman numeral
   *
   * @params mmi {number}
   *         Modified Mercal Intensity
   * @params empty {string}
   *         The string to return if mmi is out of range
   *
   * @returns {string}
   *          The Roman Numeral cooresponding to the mmi.
   */
  _this.mmi = function (mmi, empty) {
    mmi = Math.round(mmi);

    return _MMI_ARRAY[mmi] || empty || _empty;
  };

  /**
   * Get the color associated with a given MMI
   *
   * @params mmi {number}
   *    Modified Mercal Intensity.
   * @return {string}
   *    Color Code.
   */
  _this.mmiColor = function (mmi) {
    mmi = Math.round(mmi);
    return _MMI_COLORS[mmi] || null;
  };

  /**
   * Format a number.
   *
   * @param value {Number}
   *        number to format.
   * @param decimals {Number}
   *        Optional, default does not round.
   *        number of decimal places to round.
   * @param empty {Any}
   *        Optional, default none.
   *        value to return if value is empty.
   * @param units {String}
   *        Optional, default none.
   *        units of value.
   * @return {String} formatted string.
   */
  _this.number = function (value, decimals, empty, units) {
    if (!value && value !== 0) {
      return empty || _empty;
    }
    if (typeof decimals === 'number') {
      value = Number(value).toFixed(decimals);
    }
    if (units) {
      value += ' ' + units;
    }
    return value;
  };

  /**
   * Put commas into a number for display.
   *
   * @param x {Number}
   *        number to format.
   *
   * @param empty {Any}
   *        Optional, default none.
   *        value to return if value is empty.
   */
  _this.numberWithCommas = function (x, empty) {
    if (!x && x !== 0) {
      return empty || _empty;
    }

    var parts = x.toString().split('.');

    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');

    return parts.join('.');
  };

  /**
   * Format a UTC time.
   *
   * @param date {Date}
   *        date to format.
   * @param includeMilliseconds {Boolean}
   *        default false.
   *        whether to output milliseconds.
   * @return {String}
   *         formatted time.
   */
  _this.time = function (date, includeMilliseconds) {
    var hours,
        minutes,
        seconds,
        milliseconds;

    if (!date || typeof date.getTime !== 'function') {
      return _empty;
    }

    hours = date.getUTCHours();
    minutes = date.getUTCMinutes();
    seconds = date.getUTCSeconds();
    milliseconds = '';

    if (hours < 10) {
      hours = '0' + hours;
    }
    if (minutes < 10) {
      minutes = '0' + minutes;
    }
    if (seconds < 10) {
      seconds = '0' + seconds;
    }
    if (includeMilliseconds) {
      milliseconds = date.getUTCMilliseconds();
      if (milliseconds < 10) {
        milliseconds = '.00' + milliseconds;
      } else if (milliseconds < 100) {
        milliseconds = '.0' + milliseconds;
      } else {
        milliseconds = '.' + milliseconds;
      }
    }

    return hours + ':' + minutes + ':' + seconds + milliseconds;
  };

  /**
   * Format a UTC timezone offset.
   *
   * @param offset {Number}
   *        UTC offset in minutes.  0 for UTC.
   * @return {String}
   *         formatted timezone offset, or '' when offset is 0.
   */
  _this.timezoneOffset = function (offset) {
    var hours,
        minutes,
        sign;

    if (!offset || offset === 0) {
      return '';
    } else if (offset < 0) {
      sign = '-';
      offset *= -1;
    } else {
      sign = '+';
    }

    hours = parseInt(offset / 60, 10);
    minutes = parseInt(offset % 60, 10);

    if (hours < 10) {
      hours = '0' + hours;
    }
    if (minutes < 10) {
      minutes = '0' + minutes;
    }

    return sign + hours + ':' + minutes;
  };

  /**
   * Format an uncertainty.
   *
   * @param error {Number}
   *        uncertainty to format.
   * @param decimals {Number}
   *        Optional, default does not round.
   *        number of decimal places to round.
   * @param empty {Any}
   *        Optional, default none.
   *        value to return if error is empty.
   * @param units {String}
   *        Optional, default none.
   *        units of error.
   * @return {String} formatted string.
   */
  _this.uncertainty = function (error, decimals, empty, units) {
    if (!error && error !== 0) {
      return empty;
    }
    error = _this.number(error, decimals, null, units);
    return '<span class="uncertainty">&plusmn; ' + error + '</span>';
  };


  _initialize(options);
  options = null;
  return _this;
};


Formatter.MILES_PER_KILOMETER = _MILES_PER_KILOMETER;


module.exports = Formatter;

},{"util/Util":"util/Util"}],"core/LinkProductView":[function(require,module,exports){
'use strict';

var ProductView = require('core/ProductView'),
    Util = require('util/Util');


/**
 * View to display a link product.
 *
 * Uses product properties `text` and `url`.
 *
 * @param options {Object}
 *     passed to ProductView.
 */
var LinkProductView = function (options) {
  var _this;

  _this = ProductView(options);


  /**
   * Render link into this view's element.
   */
  _this.render = function () {
    var el,
        product,
        text,
        url;

    product = _this.model;
    text = product.getProperty('text');
    url = product.getProperty('url');

    if (url) {
      el = document.createElement('a');
      el.setAttribute('href', url);
    } else {
      el = document.createElement('span');
    }
    el.classList.add(product.get('type'));

    if (text) {
      el.innerHTML = text;
    } else {
      el.innerHTML = 'No link text available';
    }

    Util.empty(_this.el);
    _this.el.appendChild(el);
  };


  return _this;
};


module.exports = LinkProductView;

},{"core/ProductView":"core/ProductView","util/Util":"util/Util"}],"core/Module":[function(require,module,exports){
'use strict';

var AccordionView = require('core/AccordionView'),
    Attribution = require('core/Attribution'),
    DownloadView = require('core/DownloadView'),
    Formatter = require('core/Formatter'),
    Product = require('pdl/Product'),
    Util = require('util/Util'),
    View = require('mvc/View');

var _ID,
    _TITLE,
    _TYPES,

    _hasContent;


// Note: These should be overridden by each implementing sub-class.
_ID = 'module';
_TITLE = 'Default Module';
_TYPES = [];

_hasContent = function (/*eventPageModel*/) {
  return true;
};

var _DEFAULTS = {

};


var Module = function (options) {
  var _this,
      _initialize,

      _accordionView,
      _formatter;


  options = Util.extend({}, _DEFAULTS, options);
  _this = View(options);

  _initialize = function (options) {
    var el;

    _this.ID = _ID;
    _this.TITLE = _TITLE;
    _formatter = options.formatter || Formatter();

    el = _this.el;
    el.innerHTML =
      '<div class="module-header"></div>' +
      '<div class="module-content"></div>' +
      '<div class="module-footer"></div>';

    // references to sections for subclass access
    _this.header = el.querySelector('.module-header');
    _this.content = el.querySelector('.module-content');
    _this.footer = el.querySelector('.module-footer');
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (_accordionView) {
      // clean up any previous footer
      _accordionView.destroy();
      _accordionView = null;
    }

    _formatter = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Get a product from the event based on module parameters and event config.
   *
   * Uses module parameters "source", "code", and optionally "updateTime".
   * If "updateTime" is omitted, the latest version from "source" and "code" is
   * returned.  If no product matching "source" and "code" is found, returns
   * preferred product.
   *
   * @param type {String}
   *     product base type.
   *     event configuration determines whether or not to add a scenario suffix.
   * @return {Product}
   *     matching product, or null if not found.
   */
  _this.getProduct = function (type) {
    var code,
        ev,
        params,
        product,
        source,
        updateTime;

    ev = _this.model.get('event');
    params = _this.model.get(_this.ID) || {};
    type = Product.getFullType(type, _this.model.get('config'));
    source = params.source || null;
    code = params.code || null;
    updateTime = params.updateTime || null;
    product = null;

    if (ev && source !== null && code !== null) {
      product = ev.getProductById(type, source, code, updateTime);
    }
    if (ev && product === null) {
      product = ev.getPreferredProduct(type);
    }
    return product;
  };

  /**
   * Get all products of a specific type. If the config.SCENARIO_MODE, then
   * get the -scenario variant of the specified type.
   *
   * @param type {String}
   *     The base type of products to get.
   *
   * @return {Array}
   *     An array of the matching type of product. This might be an empty array.
   */
  _this.getProducts = function (type) {
    var catalogEvent;

    catalogEvent = _this.model.get('event');
    type = Product.getFullType(type, _this.model.get('config'));

    if (catalogEvent) {
      return catalogEvent.getProducts(type);
    } else {
      return [];
    }
  };

  /**
   * Get a product footer. Generalized footer includes only the Downloads.
   *
   */
  _this.getProductFooter = function (options) {
    var content,
        el;

    if (_accordionView) {
      // clean up any previous footer
      _accordionView.destroy();
      _accordionView = null;
    }

    content = options.product.getContent('contents.xml');
    if (content) {
      el = document.createElement('div');

      _this.downloadView = DownloadView({
        model: content,
        product: options.product,
        formatter: _formatter
      });

      _accordionView = AccordionView({
        classes: 'accordion-standard accordion-page-downloads',
        el: el,
        toggleElement: 'h3',
        toggleText: 'Downloads',
        view: _this.downloadView
      });
      _accordionView.render();
    }

    return el;
  };

  /**
   * Get a product header.
   *
   * @param options {Object}
   * @param options.product {Product}
   *     product to summarize.
   * @param options.summaryModule {Module}
   *     default null.
   *     include link to module with all versions of `product`.
   */
  _this.getProductHeader = function (options) {
    var buf,
        el,
        ev,
        numProducts,
        preferred,
        product,
        reviewed,
        type,
        summaryModule;

    product = options.product;
    summaryModule = options.summaryModule;

    buf = [];
    ev = _this.model.get('event');
    type = options.type || product.get('type');
    // can't use var type because it breaks the prefered setting when it uses
    // options.type
    preferred = (ev.getPreferredProduct(product.get('type')) === product);
    reviewed = product.isReviewed();

    if (summaryModule) {
      numProducts = ev.getProducts(type).length;
      buf.push('<a class="back-to-summary-link"' +
          ' href="#'  + summaryModule.ID + '">');
      if (numProducts > 1) {
        buf.push('View alternative ' + _this.TITLE.toLowerCase() + 's' +
            ' (' + numProducts + ' total)');
      } else {
        buf.push('Back to ' + summaryModule.TITLE);
      }
      buf.push('</a>');
    }

    buf.push('<small class="attribution">' +
        'Contributed by ' + Attribution.getProductAttribution(product) +
        ' last updated ' + _formatter.datetime(product.get('updateTime')) +
        '</small>');

    buf.push('<ul class="quality-statements no-style">');
    if (preferred) {
      buf.push('<li class="preferred">' +
          'The data below are the most preferred data available' +
          '</li>');
    } else {
      buf.push('<li class="unpreferred">' +
          'The data below are <strong>NOT</strong>' +
          ' the most preferred data available' +
          '</li>');
    }
    if (reviewed === true) {
      buf.push('<li class="reviewed">' +
          'The data below have been reviewed by a scientist' +
          '</li>');
    } else if (reviewed === false) {
      // only claim product is unreviewed if review-status property was set.
      buf.push('<li class="unreviewed">' +
          'The data below have <strong>NOT</strong>' +
          ' been reviewed by a scientist.' +
          '</li>');
    }
    buf.push('</ul>');

    el = document.createElement('div');
    el.classList.add('product-header');
    el.innerHTML = buf.join('');
    return el;
  };

  /**
   * Render module content.
   */
  _this.render = function () {
    _this.header.innerHTML = '<h3>Module Header</h3>';
    _this.content.innerHTML = '<h3>Module Content</h3>';
    _this.footer.innerHTML = '<h3>Module Footer</h3>';
  };


  _initialize(options);
  options = null;
  return _this;
};


Module.ID = _ID;
Module.TITLE = _TITLE;
Module.TYPES = _TYPES;

Module.hasContent = _hasContent;


module.exports = Module;

},{"core/AccordionView":"core/AccordionView","core/Attribution":"core/Attribution","core/DownloadView":"core/DownloadView","core/Formatter":"core/Formatter","mvc/View":"mvc/View","pdl/Product":"pdl/Product","util/Util":"util/Util"}],"core/NearbySeismicity":[function(require,module,exports){
'use strict';


var Util = require('util/Util');


var _DEFAULTS = {
  mapUrl: '/earthquakes/map/',
  radius: 250
};

var _KM_PER_DEGREE = 111.12;


var NearbySeismicity = function (options) {
  var _this,
      _initialize,

      _mapUrl,
      _radius;


  _this = {};

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _mapUrl = options.mapUrl;
    _radius = options.radius;
  };


  _this.destroy = function () {
    _mapUrl = null;
    _radius = null;

    _initialize = null;
    _this = null;
  };

  /**
   * Generate a link to map/list based on search parameters.
   * @param options {Object}
   * @param options.eventid {String}
   *     event to select in map/list interface.
   *     default null.
   * @param options.params {Object}
   *     api parameters as object properties and values.
   */
  _this.getLatestEarthquakesLink = function (options) {
    var eventid,
        id,
        mapPosition,
        params,
        settings,
        url;

    eventid = options.eventid || null;
    params = options.params;

    id = eventid || ('' + new Date().getTime());
    mapPosition = _this.getMapPosition(params);

    // map/list url settings
    settings = {
      // do not auto update searches
      autoUpdate: false,
      // terrain basemap
      basemap: 'terrain',
      // selected event
      event: eventid,
      // feed needs to match search id
      feed: id,
      // center view based on point and radius
      mapposition: mapPosition,
      // search options
      search: {
        id: id,
        isSearch: true,
        // TODO: use a different name?
        name: 'Search Results',
        params: params
      }
    };

    url = _mapUrl + '#' + encodeURIComponent(JSON.stringify(settings));

    return url;
  };

  /**
   * Compute map position based on parameters.
   *
   * @param params {Object}
   *     search api parameters.
   * @return {Array<Array>}
   *     array representing map extent.
   */
  _this.getMapPosition = function (params) {
    var latitude,
        longitude,
        mapPosition,
        maxLatitude,
        maxLongitude,
        maxRadiusKm,
        minLatitude,
        minLongitude,
        radiusDegrees;

    // set defaults
    maxLatitude = params.maxlatitude || 85;
    maxLongitude = params.maxlongitude || 180;
    minLatitude = params.minlatitude || -85;
    minLongitude = params.minlongitude || -180;

    // compute based on radius search
    latitude = params.latitude;
    longitude = params.longitude;
    maxRadiusKm = params.maxradiuskm;
    if ((latitude || latitude === 0) &&
        (longitude || longitude === 0) &&
        (maxRadiusKm || maxRadiusKm === 0)) {
      radiusDegrees = maxRadiusKm / _KM_PER_DEGREE;
      maxLatitude = latitude + radiusDegrees;
      maxLongitude = longitude + radiusDegrees;
      minLatitude = latitude - radiusDegrees;
      minLongitude = longitude - radiusDegrees;
    }

    // format extent
    mapPosition = [
      [minLatitude, minLongitude],
      [maxLatitude, maxLongitude]
    ];

    return mapPosition;
  };

  /**
   * Convenience method that chains
   * getLatestEarthquakesLink with getNearbySeismicityParams.
   *
   * @param summary {Object}
   *     event summary object, as returned by CatalogEvent#getSummary().
   * @return {String}
   *     url to display nearby seismicity in map/list.
   */
  _this.getNearbySeismicityLink = function (summary) {
    var params;

    params = _this.getNearbySeismicityParams(summary);
    return _this.getLatestEarthquakesLink({
      eventid: summary.id,
      params: params
    });
  };

  /**
   * Get nearby seismicity API search parameters for an event.
   *
   * @param summary {Object}
   *     event summary object, as returned by CatalogEvent#getSummary().
   * @return {Object}
   *     object with search parameters
   */
  _this.getNearbySeismicityParams = function (summary) {
    var endtime,
        latitude,
        longitude,
        magnitude,
        minmagnitude,
        params,
        threeWeeks,
        starttime,
        time;

    latitude = summary.latitude;
    longitude = summary.longitude;
    magnitude = summary.magnitude;
    time = summary.time;

    if (!latitude || !longitude || !time) {
      return false;
    }

    minmagnitude = 1;
    if (magnitude !== null) {
      minmagnitude = Math.max(Math.floor(magnitude) - 3, 1);
    }

    threeWeeks = 3 * 7 * 24 * 60 * 60 * 1000;
    time = new Date(time).getTime();
    starttime = new Date(time - threeWeeks).toISOString();
    endtime = new Date(time + threeWeeks).toISOString();

    params = {
      endtime: endtime,
      latitude: latitude,
      longitude: longitude,
      maxradiuskm: _radius,
      minmagnitude: minmagnitude,
      starttime: starttime
    };

    return params;
  };


  _initialize(options);
  options = null;
  return _this;
};


NearbySeismicity.KM_PER_DEGREE = _KM_PER_DEGREE;


module.exports = NearbySeismicity;

},{"util/Util":"util/Util"}],"core/ProductView":[function(require,module,exports){
'use strict';

var Product = require('pdl/Product'),
    View = require('mvc/View');


/**
 * View for a specific Product.
 *
 * @param options {Object}
 *     all options are passed to mvc/View.
 */
var ProductView = function (options) {
  var _this;

  // Make sure the model used for this view is a pdl/Product
  options = options || {};
  options.model = options.model || Product();

  _this = View(options);

  options = null;
  return _this;
};


module.exports = ProductView;

},{"mvc/View":"mvc/View","pdl/Product":"pdl/Product"}],"core/SummaryModule":[function(require,module,exports){
'use strict';


var LinkProductView = require('core/LinkProductView'),
    Module = require('core/Module'),
    Product = require('pdl/Product'),
    TextProductView = require('core/TextProductView'),
    Util = require('util/Util');


var _DEFAULTS = {

};


/**
 * Abstract module to serve as an extension point for summary-level modules.
 *
 */
var SummaryModule = function (options) {
  var _this,
      _initialize;


  options = Util.extend({}, _DEFAULTS, options);
  _this = Module(options);

  _initialize = function (/*options*/) {
    _this.clearLinks(true);
    _this.clearTexts(true);
  };


  /**
   * Destroys the views in the given views array and potentially re-initializes
   * the views array to an empty array.
   *
   * @param views {Array}
   *     An array of views to clear.
   */
  _this.clearViews = function (views) {
    if (views) {
      views.forEach(function (view) {
        view.destroy();
      });
    }
  };

  /**
   * Clears the views associated with link products.
   *
   * @param init {Boolean} Optional. Default false.
   *     Flag whether to re-initialize the views array. By default the views
   *     array is set to null, if true, initializes views array to empty array.
   *
   * @see #_this.clearViews
   */
  _this.clearLinks = function (init) {
    _this.clearViews(_this.linkViews);

    if (init) {
      _this.linkViews = [];
    } else {
      _this.linkViews = null;
    }
  };

  /**
   * Clears the views associated with text products.
   *
   * @param init {Boolean} Optional. Default false.
   *     Flag whether to re-initialize the views array. By default the views
   *     array is set to null, if true, initializes views array to empty array.
   *
   * @see #_this.clearViews
   */
  _this.clearTexts = function (init) {
    _this.clearViews(_this.textViews, init);

    if (init) {
      _this.textViews = [];
    } else {
      _this.textViews = null;
    }
  };

  /**
   * Helper method for creating a simple TR DOM element potentially with a
   * "preferred" class on it.
   *
   * @param preferred {Boolean}
   *     True if the "preferred" class should be added. False otherwise.
   *
   * @return {DOMElement}
   *     A TR DOM Element.
   */
  _this.createRow = function (preferred) {
    var row;

    row = document.createElement('tr');

    if (preferred) {
      row.classList.add('preferred');
    }

    return row;
  };

  /**
   * Helper method for creating a summary section for a type of product.
   *
   * @param products {Array}
   *     An array of {Product}s to summarize.
   * @param title {String}
   *     The header text to label this summary section.
   * @param labels {Array}
   *     An array of {String}s to use a column header text.
   * @param callback {Function}
   *     A callback function to execute for each product. This callback function
   *     should return a TR DOM element. The callback function expects a
   *     {Product} as its first parameter and an index {Number} as it's second
   *     parameter.
   *
   * @return {DocumentFragment}
   *     A document fragment containing the section summary, this could be
   *     empty if no products or labels are provided.
   */
  _this.createSummary = function (products, title, labels, callback) {
    var fragment,
        header,
        table,
        tbody,
        thead,
        wrapper;

    fragment = document.createDocumentFragment();

    if (products.length && labels.length) {
      header = fragment.appendChild(document.createElement('h3'));
      wrapper = fragment.appendChild(document.createElement('div'));
      table = wrapper.appendChild(document.createElement('table'));
      thead = table.appendChild(document.createElement('thead'));
      tbody = table.appendChild(document.createElement('tbody'));

      header.innerHTML = title;

      wrapper.classList.add('horizontal-scrolling');
      table.classList.add('table-summary');

      thead.innerHTML = '<tr><th scope="col">' +
          labels.join('</th><th scope="col">') + '</th></tr>';

      tbody.appendChild(products.reduce(function (fragment, product, index) {
        fragment.appendChild(callback(product, index));
        return fragment;
      }, document.createDocumentFragment()));
    }

    return fragment;
  };

  /**
   * Free resources associated with this module.
   *
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return; // Already destroyed
    }

    _this.clearLinks();
    _this.clearTexts();

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Generates markup for a catalog column in the summary table. This includes
   * a link to the product details page as well as a preferred checkbox if
   * appropriate.
   *
   * @param module {Module}
   *     The module for which to generate the link.
   * @param product {Product}
   *     The product for which to generate the link.
   * @param preferred {Boolean}
   *     True if the current product is preferred, false otherwise.
   *
   * @return {String}
   *     The markup for the link to the product details page.
   */
  _this.getCatalogMarkup = function (module, product, preferred) {
    var markup,
        type;

    markup = [];
    type = Product.getBaseType(product.get('type'));

    if (preferred) {
      markup.push('<abbr title="Preferred ' + type +
        '" class="material-icons">check</abbr>');
    }

    markup.push('<a href="#' + module.ID + '?source=' + product.get('source') +
        '&amp;code=' + product.get('code') + '">' +
      (product.getProperty('eventsource') || 'N/A').toUpperCase() +
    '</a>');

    return markup.join('');
  };

  /**
   * Creates visualization for link products. Delegates to the
   * {LinkProductView}.
   *
   * @param products {Array}
   *     An array of products to generate visualizations for.
   *
   * @return {DocumentFragment}
   *     A fragment containing the markup for each text product.
   */
  _this.getLinks = function (products) {
    var fragment,
        list;

    fragment = document.createDocumentFragment();

    if (products.length) {
      fragment.appendChild(_this.getLinksHeader());
      list = fragment.appendChild(document.createElement('ul'));

      products.forEach(function (product) {
        var view;

        view = LinkProductView({
          el: list.appendChild(document.createElement('li')),
          model: product
        });
        view.render();

        _this.linkViews.push(view);
      });
    }

    return fragment;
  };

  /**
   * APIMethod.
   *
   * Implementing classes should override this method.
   *
   * @return {DOMElement}
   *     A header to label the links section for this {SummaryModule}. If no
   *     header is desired, return an empty {DocumentFragment}.
   */
  _this.getLinksHeader = function () {
    var header;

    header = document.createElement('h3');
    header.innerHTML = 'Related Links';

    return header;
  };

  /**
   * Creates visualization for text products. Delegates to the
   * {TextProductView}.
   *
   * @param products {Array}
   *     An array of products to generate visualizations for.
   *
   * @return {DocumentFragment}
   *     A fragment containing the markup for each text product.
   */
  _this.getTexts = function (products) {
    var fragment;

    fragment = document.createDocumentFragment();

    products.forEach(function (product) {
      var view;

      view = TextProductView({
        el: fragment.appendChild(document.createElement('div')),
        model: product
      });
      view.render();

      _this.textViews.push(view);
    });

    return fragment;
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = SummaryModule;

},{"core/LinkProductView":"core/LinkProductView","core/Module":"core/Module","core/TextProductView":"core/TextProductView","pdl/Product":"pdl/Product","util/Util":"util/Util"}],"core/TextProductView":[function(require,module,exports){
'use strict';

var ContentView = require('core/ContentView'),
    ProductView = require('core/ProductView'),
    Util = require('util/Util');


var _DEFAULTS = {
  contentPath: ''
};


var TextProductView = function (options) {
  var _this,
      _initialize,

      _content,
      _contentView;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ProductView(options);

  /**
   * Constructor
   *
   * Initializes the view. Checks the configured `contentPath` (empty string
   * by default). If it exists, creates a {ContentView} to which future
   * rendering is delegated.
   *
   * @param options {Object}
   *     Confiuguration options for this view. In addition to options specified
   *     in {ProductView}, this may include the following:
   *
   * @param options.contentPath {String} Optional. Default ''.
   *     The path for the content to render for this TextProductView.
   *
   * @see mvc/View
   */
  _initialize = function (options) {
    _this.el.classList.add(_this.model.get('type'));
    _this.el.classList.add('text-product');

    _content = _this.model.getContent(options.contentPath);

    if (_content) {
      _contentView = ContentView({
        el: _this.el,
        model: _content
      });

      _contentView.onSuccess = _this.onSuccess;
      _contentView.onError = _this.onError;
    }
  };


  /**
   * Frees resources associated with this view. In particular, if a
   * {ContentView} was created, it is destroyed.
   *
   */
  _this.destroy = Util.compose(function () {
    if (_contentView) {
      _contentView.destroy();
    }

    _content = null;
    _contentView = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Callback method if the content fails to fetch its data. Displays a
   * basic error message.
   *
   */
  _this.onError = function () {
    _this.el.innerHTML =
        '<p class="alert error">No text content to render.</p>';
  };

  /**
   * Callback method when the content successfully fetches its data. Displays
   * the result in `_this.el` but replaces paths to relative resources based
   * on other content in `_this.model`.
   *
   * @param data {String}
   *     The data to render.
   */
  _this.onSuccess = function (data) {
    _this.el.innerHTML = _this.replaceRelativePaths(data,
        _this.model.get('contents').data());
  };

  /**
   * If {Content} was found during initialization, delegates to the created
   * {ContentView}, otherwise displays the stock error message.
   *
   * @see ContentView#render
   * @see TextProductView#onError
   */
  _this.render = function () {
    _this.el.innerHTML = '<p class="alert info">Loading content&hellip;</p>';
    if (_contentView) {
      _contentView.render();
    } else {
      _this.onError();
    }
  };

  /**
   * Replace relative paths in text products with fully qualified URLs
   * based on the URLs found in the product's content collection
   *
   * @param bytes {String}
   *    byte data from the text product contents
   *
   * @param contents {Array}
   *    array of content objects to check for relative paths that exist
   *    in the bytes data
   */
  _this.replaceRelativePaths = function (bytes, contents) {
    var content,
        i,
        len;

    len = contents.length;

    for (i = 0; i < len; i++) {
      content = contents[i].get();
      if (content.id !== '') {
        bytes = bytes.replace(new RegExp('"' + content.id + '"', 'g'),
            '"' + content.url + '"');
      }
    }

    return bytes;
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = TextProductView;

},{"core/ContentView":"core/ContentView","core/ProductView":"core/ProductView","util/Util":"util/Util"}],"dyfi/DYFIFormModule":[function(require,module,exports){
'use strict';


var DYFIFormView = require('dyfi/DYFIFormView'),
    Events = require('util/Events'),
    ModalView = require('mvc/ModalView'),
    Model = require('mvc/Model'),
    Module = require('core/Module'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');


var _ID,
    _TITLE,
    _hasContent,
    _parseMessageAsHtml,
    _parseMessageAsString;

_ID = 'tellus';
_TITLE = 'Felt Report - Tell Us!';


/**
 * Helper method to parse a raw response using HTML DOM manipulation. This
 * is the most reliable parsing method, but may not be as supported across
 * browsers.
 *
 * @param response {String}
 *     An HTML string from which to parse a response.
 *
 * @return {String}
 *     The parsed message.
 *
 * @throws {Error}
 *     If the response does not represent valid HTML. Of if the response does
 *     not include a description list tag (<dl>).
 */
_parseMessageAsHtml = function (response) {
  var h;

  h = document.createElement('html');
  h.innerHTML = response;

  return h.querySelector('dl').outerHTML;
};

/**
 * Helper method to parse a raw response using String manipulation. This is a
 * fallback approach when DOM parsing fails.
 *
 * @param response {String}
 *     An HTML string from which to parse a response.
 *
 * @return {String}
 *     The parsed message or null if no message is found.
 */
_parseMessageAsString = function (response) {
  var endIdx,
      startIdx;

  startIdx = response.indexOf('<dl>');
  endIdx = response.indexOf('</dl>');

  if (startIdx === -1 || endIdx === -1) {
    return null;
  }

  return response.substring(startIdx, endIdx) + '</dl>';
};

/**
 * Determines if this module has content. Scenario events do will not
 * get this module.
 *
 * @param eventPageModel
 *     The model use by the {EventPage} class.
 *
 * @return {Boolean}
 *     True if the module should be included. False otherwise.
 */
_hasContent = function (eventPageModel) {
  var config;

  config = eventPageModel.get('config');

  return config.hasOwnProperty('SCENARIO_MODE') ?
    (!config.SCENARIO_MODE) : true;
};

var _DEFAULTS = {
  DYFI_RESPONSE_URL: '/products/dyfi/response.html',
  FORM_VERSION: '1.5'
};


/**
 * Module for displaying the {DYFIFormView}. This module handles the modal
 * dialog in which the view is rendered. It communicates with the view through
 * the model provided to the view in order to get the form values when the
 * submit button is clicked. This module deals with form submission while the
 * view itself deals with user inputs.
 *
 * @param options {Object}
 *     Configuration options for this module. See _initialize method
 *     documentation for details.
 */
var DYFIFormModule = function (options) {
  var _this,
      _initialize,

      _formModel,
      _formVersion,
      _modal,
      _submitButton,
      _submitResult,
      _submitUrl,
      _view;


  options = Util.extend({}, _DEFAULTS, options);
  _this = Module(options);

  /**
   * Constructor. Initializes a new DYFIModule.
   *
   * @param options {Object}
   *     Configuration options for this module. In addition to what can be
   *     provided a generic module, these may also include:
   * @param options.FORM_VERSION {String}
   *     A version string identifier for this form.
   */
  _initialize = function (options) {
    var catalogEvent,
        config,
        eventTimestamp;

    _this.ID = _ID;
    _this.TITLE = _TITLE;

    config = _this.model.get('config');
    _submitUrl = (config && config.DYFI_RESPONSE_URL) ?
        config.DYFI_RESPONSE_URL : options.DYFI_RESPONSE_URL;
    _submitResult = null;

    _formVersion = options.FORM_VERSION;

    _this.content.addEventListener('click', _this.onContentClick);

    catalogEvent = _this.model.get('event');

    if (catalogEvent) {
      eventTimestamp = catalogEvent.getTime();
    }

    _formModel = Model({
      eventTime: eventTimestamp ? eventTimestamp.toUTCString() : '',
      language: 'en'
      // TODO :: Also include eventid in some way?
    });

    _formModel.on('change', 'onFormChange', _this);

    _view = DYFIFormView({
      model: _formModel
    });
    _view.render();

    _modal = ModalView(_view.el, {
      buttons: [
        {
          callback: _this.onSubmit,
          classes: ['green', 'dyfi-submit-button'],
          text: 'Submit'
        },
        {
          callback: _this.onCancel,
          classes: ['dyfi-cancel-button'],
          text: 'Cancel'
        }
      ],
      title: null // No title. View should render title and OMB number.
    });
  };


  /**
   * Frees resources associated with this module.
   *
   */
  _this.destroy = Util.compose(function () {
    _this.content.removeEventListener('click', _this.onContentClick);
    _formModel.off('change', 'onFormChange', _this);

    _modal.hide();
    _modal.destroy();
    _view.destroy(); // NB: Destroy view before destroying model
    _formModel.destroy();

    _formModel = null;
    _formVersion = null;
    _modal = null;
    _submitResult = null;
    _submitUrl = null;
    _view = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Callback when user clicks the cancel button. Form is hidden and browser
   * is navigated back to some other event page content.
   *
   */
  _this.onCancel = function () {
    _modal.hide();

    // Notify the EventPage this view would like to go back
    Events.trigger('back');
  };

  /**
   * Callback to handel re-showing the form when a button is clicked on the
   * page in the background.
   *
   * @param evt {Event}
   *     The event that triggered this callback.
   */
  _this.onContentClick = function (evt) {
    if (evt.target && evt.target.classList.contains('show-form')) {
      _this.showForm();
    }
  };

  /**
   * Callback when the _formModel is changed. Checks to see if required
   * fields are complete and if so, enables submit button; otherwise disables
   * the button.
   *
   */
  _this.onFormChange = function () {
    if (_submitButton) {
      if (!_formModel.get('ciim_mapLat') ||
          !_formModel.get('ciim_mapLon') ||
          !_formModel.get('ciim_time') ||
          !_formModel.get('fldSituation_felt')) {
        // A required field is missing, disable submit button
        _submitButton.setAttribute('disabled', 'disabled');
      } else {
        _submitButton.removeAttribute('disabled');
      }
    }
  };

  /**
   * Callback when the submit button is clicked on the form. This method
   * augments the form data with some internally required information, then
   * submits the request using AJAX via CORS.
   *
   */
  _this.onSubmit = function () {
    var data,
        ev;

    _submitResult = null;

    ev = _this.model.get('event');

    data = Util.extend({
      eventid: ev ? ev.getEventId() : null,
      form_version: _formVersion,
      ciim_report: 'Submit Form'
    }, _formModel.get());

    Xhr.ajax({
      method: 'POST',
      data: data,
      error: _this.onSubmitError,
      url: _submitUrl,
      success: _this.onSubmitSuccess
    });

    _modal.hide();
  };

  /**
   * Callback when the submit Xhr fails. Note, this is only executed if an
   * HTTP status code accompanies the response. Updates the result object and
   * calls the render method.
   *
   * @param error {Mixed}
   *     See Xhr#ajax:error
   * @param xhr {XMLHttpRequest}
   *     The XHR that caused the error.
   */
  _this.onSubmitError = function (error/*, xhr*/) {
    _submitResult = {
      error: error
    };

    _this.render();
  };

  /**
   * Callback when the submit Xhr succeeds. Note, this may execute even if the
   * form was not processed if the response returns an HTTP 2XX status. Updates
   * the result object and calls the render method.
   *
   * @param response {String}
   *     The response message to parse.
   * @param xhr {XMLHttpRequest}
   *     The XHR that submitted the request.
   */
  _this.onSubmitSuccess = function (response/*, xhr*/) {
    var message;

    try {
      message = _parseMessageAsHtml(response);
    } catch (e) {
      message = _parseMessageAsString(response);
    }

    if (message) {
      _submitResult = {
        success: message
      };
    } else {
      _submitResult = {
        error: 'Required entries not provided! Please re-submit the form ' +
            'after answering all required questions.'
      };
    }

    _this.render();
  };

  /**
   * Called show the form or when it is submitted. Depending on the current
   * state of the result object, displays the result message or shows the form
   * itself.
   *
   */
  _this.render = function () {
    var buttonMarkup;

    buttonMarkup = '<button class="show-form">Show Form</button>';

    _this.header.innerHTML = '<h3>' + _this.TITLE + '</h3>';
    _this.footer.innerHTML = '';

    if (_submitResult && (_submitResult.error || _submitResult.success)) {
      if (_submitResult.error) {
        _this.content.innerHTML = '<p class="alert error">' +
            _submitResult.error + '</p>' + buttonMarkup;
      } else {
        _this.content.innerHTML = [
          '<h3>Questionnaire Complete</h3>',
          '<p class="alert success">',
            'Thank you for your contribution. ',
            'Your information will be processed shortly.',
          '</p>',
          _submitResult.success
        ].join('');
      }
    } else {
      _this.content.innerHTML = buttonMarkup;
      _this.showForm();
    }
  };

  /**
   * Shows the modal form. Once shown, lets updates the submit button state
   * (disabled or not), and then allows the sub-view to render.
   *
   */
  _this.showForm = function () {
    _modal.show();
    _submitButton = document.querySelector('.dyfi-submit-button');

    // Ensure submit button status is currently up-to-date
    _this.onFormChange();
  };


  _initialize(options);
  options = null;
  return _this;
};


DYFIFormModule.ID = _ID;
DYFIFormModule.TITLE = _TITLE;

DYFIFormModule.hasContent = _hasContent;


module.exports = DYFIFormModule;

},{"core/Module":"core/Module","dyfi/DYFIFormView":"dyfi/DYFIFormView","mvc/ModalView":37,"mvc/Model":"mvc/Model","util/Events":"util/Events","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"dyfi/DYFIFormPinView":[function(require,module,exports){
'use strict';


var BasicPinView = require('core/BasicPinView'),
    DYFIFormModule = require('dyfi/DYFIFormModule'),
    Formatter = require('core/Formatter'),
    Util = require('util/Util');

var _DEFAULTS = {
  module: DYFIFormModule
};


var DYFIFormPinView = function (options) {
  var _this,
      _initialize,

      _formatter;


  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  _initialize = function (options) {
    _formatter = options.formatter || Formatter();
  };


  /**
   * Frees resources associated with this view.
   *
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }

    _formatter = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Render the histograms as DYFIFormPinView content
   *
   */
  _this.renderPinContent = function () {
    var markup,
        numResponses,
        responses,
        stillZero,
        value;

    markup = [];
    responses = _this.model.getProperty('num-responses') ||
        _this.model.getProperty('numResp') || '0';
    numResponses = _formatter.numberWithCommas(responses);
    // pad with zeros
    responses = _formatter.leftPad(responses.toString(), 6, '0');
    stillZero = true;

    for (var i = 0, len = responses.length; i < len; i += 1) {
      value = responses.charAt(i);

      if (value === '0' && stillZero) {
        markup.push('<div class="responses-digit empty-digit">0</div>');
      } else {
        stillZero = false;
        markup.push('<div class="responses-digit">', value, '</div>');
      }
    }

    _this.content.innerHTML =
      '<div class="dyfi-responses-badge" title="Number of DYFI Responses">' +
        markup.join('') +
      '</div>' +
      '<div class="dyfi-responses-abbr">' +
        '<abbr title="' + numResponses + ' DYFI Responses">Responses</abbr>' +
      '</div>' +
      '<small class="disclaimer">' +
        'Contribute to citizen science. Please <a href="#tellus">tell us</a> ' +
        'about your experience.' +
      '</small>';
  };

  /**
   * Use custom attribution as this content is generated by user-submitted
   * felt reports from the "Tell Us!" link.
   *
   */
  _this.renderPinFooter = function () {
    _this.footer.innerHTML = 'Citizen Scientist Contributions';
  };


  _initialize(options);
  options = null;
  return _this;
};

module.exports = DYFIFormPinView;

},{"core/BasicPinView":"core/BasicPinView","core/Formatter":"core/Formatter","dyfi/DYFIFormModule":"dyfi/DYFIFormModule","util/Util":"util/Util"}],"dyfi/DYFIFormView":[function(require,module,exports){
'use strict';


var Events = require('util/Events'),
    Formatter = require('core/Formatter'),
    LocationView = require('locationview/LocationView'),
    Model = require('mvc/Model'),
    ModalView = require('mvc/ModalView'),
    QuestionView = require('questionview/QuestionView'),
    TextQuestionView = require('dyfi/TextQuestionView'),
    Util = require('util/Util'),
    View = require('mvc/View'),
    Xhr = require('util/Xhr');


var _DEFAULTS = {
  eventTime: null,
  language: 'en',
  url: 'js/languages/'
};

var _DYFI_DISCLAIMER =
  '<p class="alert info">' +
    'This form is subject to the Privacy Act of 1974.' +
  '</p>' +
  '<p>' +
    '<strong>Authority</strong><br/>' +
    'The National Earthquake Hazards Reduction Program (NEHRP), which ' +
    'was first authorized in 1977, Public Law (PL) 95–124), and most ' +
    'recently reauthorized in 2004 (NEHRP Reauthorization Act of 2004, ' +
    'PL 108–360' +
  '</p>' +
  '<p>' +
    '<strong>Principal Purpose</strong><br/>' +
    'The Earthquake Hazards Program provides rapid, authoritative ' +
    'information on earthquakes and their impact to emergency responders, ' +
    'governments, facilities managers and researchers across the country.' +
  '</p>' +
  '<p>' +
    '<strong>Routine Use</strong><br/>' +
    'Used to allow users to report shaking intensity of earthquake events, ' +
    'to allow users to receive notifications of earthquake events, and to ' +
    'allow users to volunteer to have seismic instrumentation installed ' +
    'on their property.' +
  '</p>' +
  '<p>' +
    '<strong>Disclosure is Voluntary</strong><br/>' +
    'If the individual does not furnish the information requested, there ' +
    'will be no adverse consequences. However, if you do not provide ' +
    'contact information we may be unable to contact you for additional ' +
    'information to verify your responses.' +
  '</p>' +
  '<p>' +
    '<strong>Privacy Act Statement</strong><br/>' +
    'You are not required to provide your personal contact information in' +
    'order to submit your survey. However, if you do not provide contact' +
    'information, we may be unable to contact you for additional information' +
    'to verify your responses. If you do provide contact information, this' +
    'information will only be used to initiate follow-up communications with' +
    'you. The records for this collection will be maintained in the' +
    'appropriate Privacy Act System of Records identified as Earthquake' +
    'Hazards Program Earthquake Information. (INTERIOR/USGS-2) published' +
    'at 74 FR 34033 (July 14,2009).' +
  '</p>' +
  '<p>' +
    '<strong>Paperwork Reduction Act Statement</strong><br/>' +
    'The Paperwork Reduction Act of 1995 (44 U.S.C. 3501 et. seq.) requires ' +
    'us to inform you that this information is being collected to supplement ' +
    'instrumental data and to promote public safety through better ' +
    'understanding of earthquakes. Response to this request is voluntary. ' +
    'Public reporting for this form is estimated to average 6 minutes per ' +
    'response, including the time for reviewing instructions and completing ' +
    'the form. A Federal agency may not conduct or sponsor, and a person is ' +
    'not required to respond to, a collection of information unless it ' +
    'displays a currently valid OMB Control Number. Comments regarding this ' +
    'collection of information should be directed to: Bureau Clearance ' +
    'officer, U.S. Geological Survey, 807 National Center, Reston, VA 20192.' +
  '</p>';


/**
 * View for the DYFI Form. This view retrieves the questions/answers from the
 * appropriate language object, builds the form, and binds the questions to
 * the model using the updateModel method.
* @param options {Object}
 *     Configuration options for this module. See _initialize method
 *     documentation for details.
 *
 * Class variables.
 *  _data: {object} Contains the questions/answers from the language object.
 *  _questions: {ojbect} An object containing the question views.
 */
var DYFIFormView = function (options) {
  var _this,
      _initialize,

      _curLoc,
      _data,
      _formatter,
      _locationButton,
      _locationDisplay,
      _locationView,
      _questions,
      _url;


  _this = View(options);

  /**
   * Constructor. Initializes a new DYFIView.
   *
   * @params language {string}
   *    The language to fetch the questions for.
   * @params eventTime {string}
   *    The time of the event.
   * @params url {string}
   *    The url location for the language/questions object.
   */
  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options || {});

    _curLoc = {};
    _data = null;
    _formatter = options.formatter || Formatter();
    _locationView = null;
    _questions = {};
    _url = options.url;

    if (!_this.model.get('language')) {
      _this.model.set({language: options.language}, {silent: true});
    }

    if (!_this.model.get('eventTime')) {
      _this.model.set({eventTime: options.eventTime}, {silent: true});
    } else {
      _this.model.set({ciim_time: _this.model.get('eventTime')},
          {silent: true});
    }
  };

  /**
   * Adds Listeners to all questions in the questions object.
   */
  _this.addQuestionListeners = function () {
    for (var field in _questions) {
      _questions[field].on('change', _this.updateModel);
    }
  };

  /**
   * Create DFYI Form
   *  Spins through the questions object, and builds the appropriate sections.
   */
  _this.createForm = function () {
    var el,
        // Form Elements
        baseQuestionsEl,
        contactContainer,
        disclaimerEl,
        header,
        moreQuestionsEl,
        toggleContainer,
        // data information
        baseQuestions,
        contactInfo,
        eventTime,
        moreQuestions,
        locationInfo,
        toggleInfo;

    el = _this.el;

    baseQuestions = _data.baseQuestions;
    contactInfo = _data.contactInfo;
    eventTime = _data.eventTime;
    moreQuestions = _data.moreQuestions;
    locationInfo = _data.locationInfo;
    toggleInfo = _data.toggleInfo;

    header = el.appendChild(document.createElement('header'));
    header.classList.add('dyfi-form-header');

    baseQuestionsEl = el.appendChild(document.createElement('div'));
    baseQuestionsEl.classList.add('dyfi-required-questions');

    toggleContainer = el.appendChild(document.createElement('div'));
    toggleContainer.classList.add('dyfi-optional-callout');
    toggleContainer.classList.add('alert');
    toggleContainer.classList.add('info');

    moreQuestionsEl = el.appendChild(document.createElement('div'));
    moreQuestionsEl.classList.add('dyfi-optional-questions');

    contactContainer = document.createElement('div');
    contactContainer.classList.add('dyfi-contact-questions');
    contactContainer.classList.add('alert');

    disclaimerEl = document.createElement('a');

    header.innerHTML = '<h2 class="felt-header">Felt Report - Tell Us!</h2>' +
        '<div class="omb-number">' +
          'OMB No. 1028-0048' +
          '<br/>' +
          'Expires 05/31/2018' +
        '</div>';

    // Handle location question
    _this.createLocationQuestions(locationInfo, baseQuestionsEl);

    if (_this.model.get('eventTime') === null) {
        _this.createTextQuestion(eventTime, baseQuestionsEl);
    }

    // Loop over each base question and create a QuestionView
    _this.createQuestions(baseQuestions, baseQuestionsEl);

      // Visual control to show/hide moreQuestionsEl
    _this.createToggleControl(toggleInfo, toggleContainer);

    // Loop over each additional question and create a QuestionView
    _this.createQuestions(moreQuestions, moreQuestionsEl);

    // Handle additional comments
    _this.createTextQuestion(_data.comments, moreQuestionsEl);

    // Handle contact information
    contactContainer.innerHTML = '<legend>Contact Information' +
        ' <small>(optional)</small></legend>';
    _this.createTextQuestion(contactInfo, contactContainer);
    moreQuestionsEl.appendChild(contactContainer);

    // Add disclaimer link
    disclaimerEl.className = 'dyfi-disclaimer';
    disclaimerEl.href = '/research/dyfi/disclaimer.php#DYFIFormDisclaimer';
    disclaimerEl.innerHTML = 'PRA - Privacy Statement';
    disclaimerEl.addEventListener('click', function (e) {
      var dialog = ModalView(_DYFI_DISCLAIMER, {
        title: 'PRA - Privacy Statement',
        closable: false,
        buttons: [
          {
            text: 'OK',
            classes: ['green'],
            callback: function () {
              dialog.hide();
              dialog.destroy();
              dialog = null;
            }
          }
        ]
      });

      dialog.show();
      e.preventDefault();
    });

    contactContainer.appendChild(disclaimerEl);

    _this.synchQuestionAnswers();
    _this.addQuestionListeners();
  };

  /**
   * Creates Location Questions.
   *    Location questions are not visible to users, instead a button is
   *    visible that calls a LocationView. Which then fills in the
   *    location questions. The location questions are a minimum subset of
   *    the QuestionView API.
   *
   * @params questionInfo {object}
   *    locationInfo: {object}
   *      label: {string}
   *      button: {string}
   *      buttonUpdate: {string}
   * @params container {dom element}
   */
  _this.createLocationQuestions = function (questionInfo, container) {
    var fieldset,
        legend,
        section;

    section = document.createElement('section');
    fieldset = section.appendChild(document.createElement('fieldset'));
    legend = fieldset.appendChild(document.createElement('legend'));
    _locationDisplay = fieldset.appendChild(document.createElement('div'));
    _locationButton = fieldset.appendChild(document.createElement('button'));

    section.classList.add('question');
    legend.innerHTML = questionInfo.label;
    _locationButton.innerHTML = questionInfo.button;
    _locationButton.classList.add('location-button');

    // Add QuestionView-like objects to the list of questions
    _questions.ciim_mapLat = Events();
    _questions.ciim_mapLat.model = Model({field:'ciim_mapLat'});
    _questions.ciim_mapLat.getAnswers = function () {
      return {value: _curLoc.latitude};
    };
    _questions.ciim_mapLat.setAnswers = function (latitude) {
      _curLoc.latitude = latitude;
    };

    _questions.ciim_mapLon = Events();
    _questions.ciim_mapLon.model = Model({field:'ciim_mapLon'});
    _questions.ciim_mapLon.getAnswers = function () {
      return {value: _curLoc.longitude};
    };
    _questions.ciim_mapLon.setAnswers = function (longitude) {
      _curLoc.longitude = longitude;
    };

    _questions.ciim_mapConfidence = Events();
    _questions.ciim_mapConfidence.model = Model({field:'ciim_mapConfidence'});
    _questions.ciim_mapConfidence.getAnswers = function () {
        return {value: _curLoc.confidence};
    };
    _questions.ciim_mapConfidence.setAnswers = function () {};

    _questions.ciim_mapAddress = Events();
    _questions.ciim_mapAddress.model = Model({field:'ciim_mapAddress'});
    _questions.ciim_mapAddress.getAnswers = function () {
        return {value: _curLoc.place};
    };
    _questions.ciim_mapAddress.setAnswers = function () {};

    _locationView = LocationView();

    _locationView.on('location', _this.locationCallback);

    _locationButton.addEventListener('click', function () {
      _locationView.show({initialLocation: _curLoc});
    });

    // Append content to container
    container.appendChild(section);
  };

  /**
   * Helper method to iterate over a hash of questionInfo creating a view
   * for each question, appending the views content to the container, and
   * holding on to a reference to that view on the question hash (keyed by the
   * same field as in the questionInfo hash).
   *
   * @param questionInfo {Object}
   *      An object of question information keyed by the field name
   *      corresponding to that information as expected by the DYFI form
   *      processing code.
   * @param container {DOMElement} pass-by-reference
   *      The container into which the view.el should be appended.
   */
  _this.createQuestions = function (questionInfo, container) {
    var field = null,
        view = null;

    for (field in questionInfo) {
      view = QuestionView(Util.extend(
          {
            el: document.createDocumentFragment()
          },
          questionInfo[field],
          {
            model: Model({field: field})
          }
        )
      );

      _questions[field] = view;
      container.appendChild(view.el);
    }
  };

  /**
   * Creates a set of text questions.
   *    see createQuestions for general overview.
   *    The main difference is that this calls TextQuestionView
   *    to handle questions that use input/Text-Area as it's type.
   */
  _this.createTextQuestion = function (questionInfo, container) {
    var field = null,
        view = null;

    for (field in questionInfo) {
      view = TextQuestionView(Util.extend(
          {
            el: document.createDocumentFragment()
          },
          questionInfo[field],
          {
            model: Model({field: field})
          }
        )
      );

      _questions[field] = view;
      container.appendChild(view.el);
    }
  };


  /**
   * sets the text of the toggle control, which informs the user whether
   * they need to continue filling the form or not.
   */
  _this.createToggleControl = function (info, control) {
    control.innerHTML = info.description;
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (_questions !== null) {
      _this.destroyForm();
      _questions = null;
    }

    if (_locationView) {
      _locationView.destroy();
      _locationView = null;
    }

    _this = null;
  }, _this.destroy);

  /**
   * Destroys the questions in the Form.
   */
  _this.destroyForm = function () {
    for (var field in _questions) {
      _questions[field].off('change');
      _questions[field].destroy();
    }
  };

  /**
   * Get list of questions.
   *   This exists for testing, _questions should be considered private.
   */
  _this.getQuestions = function () {
    return _questions;
  };

  /**
   * Render the form.
   *
   * @param changed {object}
   *    Contains a key:value pair of any question that has changed.
   *    If the object is null, or if the key is language, then the
   *    entire form is rendered, after fetching the language object.
   *    If it contains any other key, it updates the specific answer.
   */
  _this.render = function (changed) {
    if (!changed || changed.hasOwnProperty('language')) {
      _this.renderQuestions();
    } else {
        _this.updateAnswer(changed);
    }
  };

  /**
   * callback for the LocationView.
   *  When LocationView is done, it calls this function, which then sets the
   *  location values.
   *
   * @params locationObject {locationObject}
   *    see locationView
   *
   * Notes: Triggers change on the latitude, and longitude "questions"
   */
  _this.locationCallback = function (locationObject) {
    var confidence,
        markup = [],
        prettyLat = null,
        prettyLng = null;

    _curLoc = locationObject;
    confidence = (_curLoc.confidence === -1 ? 0 : _curLoc.confidence);

    prettyLat = _curLoc.latitude;
    if (prettyLat < 0.0) {
      prettyLat = (-1.0*prettyLat).toFixed(confidence) + '&deg;S';
    } else {
      prettyLat = prettyLat.toFixed(confidence) + '&deg;N';
    }

    prettyLng = _curLoc.longitude;
    if (prettyLng < 0.0) {
      prettyLng = (-1.0*prettyLng).toFixed(confidence) + '&deg;W';
    } else {
      prettyLng = prettyLng.toFixed(confidence) + '&deg;E';
    }

    if (_curLoc.place !== null) {
      markup.push(_curLoc.place + '<br/>');
    }

    _locationDisplay.classList.add('location-result', 'alert', 'success');

    _locationDisplay.innerHTML = '<span class="address">' +
        ((_curLoc.place) ? (_curLoc.place + '</span>') : '') +
        '<span class="coordinates">' +
        prettyLat + ', ' + prettyLng +
        ((_curLoc.place) ? '' : '</span>');


    _locationButton.innerHTML = _data.locationInfo.buttonUpdate;

    _questions.ciim_mapLat.trigger('change', _questions.ciim_mapLat);
    _questions.ciim_mapLon.trigger('change', _questions.ciim_mapLon);
  };

  /**
   * Renders the Question form after fetching the language object.
   */
  _this.renderQuestions = function () {
    var language;

    language = _this.model.get('language');

    Xhr.ajax({
      url: _url + language + '.json',
      success: function (data) {
        if (_data !== null) {
          _this.destroyForm();
        }

        _data = data;
        _this.createForm();
      },
      error: function (e) {
        console.log(e);
      }
    });
  };

  /**
   * Updates the Model when a question is changed.
   *
   * @params question {QuestionView}
   *    The question that has changed.
   */
  _this.updateModel = function (question) {
    var answer,
        field;

    field = question.model.get('field');
    answer = question.getAnswers();

    _this.model.set(_this.stripAnswer(field, answer));
  };

  /**
   * Update Answer for a question.
   *
   * @params changed {object}
   *     holds a key/value pair of the questionid/answer that has changed.
   */
  _this.updateAnswer = function (changed) {
    var field;

    for (field in changed) {
      _questions[field].setAnswers(changed[field]);
    }
  };

  /**
   * Synch's questions with the model answers.
   */
  _this.synchQuestionAnswers = function () {
    var field;

    for (field in _questions) {
      if (_this.model.hasOwnProperty(field)) {
        _questions[field].set(_this.model.get(field));
      }
    }
  };

  /**
   * Strips an Answer from the object a question passes back. And packages it
   *   in an object for the model.
   *
   * @params field {string}
   *    The name of a question.
   * @param answer {string}
   *    An answer from a questionView
   */
  _this.stripAnswer = function (field, answers) {
    var answerObject,
        cnt,
        fieldOther;

    answerObject = {};
    if (answers instanceof Array) {
      answerObject[field] = [];
      for (cnt = 0; cnt < answers.length; cnt++) {
        answerObject[field].push(answers[cnt].value);
      }
    } else if (answers instanceof Object && answers.value !== undefined) {
      answerObject[field] = answers.value;
      if(answers.value === '_Other') {
        fieldOther = field + '_Other';
        answerObject[fieldOther] = answers.otherValue;
      }
    } else {
      answerObject[field] = '';
    }

    return answerObject;
  };

  _initialize(options);
  options = null;
  return _this;
};

module.exports = DYFIFormView;

},{"core/Formatter":"core/Formatter","dyfi/TextQuestionView":"dyfi/TextQuestionView","locationview/LocationView":27,"mvc/ModalView":37,"mvc/Model":"mvc/Model","mvc/View":"mvc/View","questionview/QuestionView":29,"util/Events":"util/Events","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"dyfi/DYFIIntensityGraphView":[function(require,module,exports){
'use strict';


var ContentView = require('core/ContentView'),
    d3 = require('d3'),
    D3LineView = require('d3/D3LineView'),
    D3View = require('d3/D3View'),
    StandardDevationLineView = require('dyfi/StandardDeviationLineView'),
    Util = require('util/Util');


/**
 * This class extends the {ContentView} class and is specifically used
 * for rendering "dyfi_plot_atten.json" for the dyfi product.
 *
 * @param options {Object}
 *     An object containing configuration options for this view.
 *
 */
var DYFIIntensityGraphView = function (options) {
  var _this,

      _graph;

    _this = ContentView(options);

  /**
   * Adds a line view to the D3View (w/ connecting lines, this function is
   * called to build the line view when, dataset.class: "estimated1" or
   * class: "estimated2".
   *
   * @param {object} dataset
   *    an object used to describe a set of data
   *
   *    dataset.class = identifier for type of data
   *    dataset.legend = the dataset name, used by the legend
   *    dataset.data = the point data to plot
   */
  _this.buildLineView = function (dataset) {
    var line = D3LineView({
      view: _graph,
      showPoints: (dataset.showPoints ? dataset.showPoints : false),
      data: _this.parseDataIntoArray(dataset.data),
      className: dataset.class,
      label: dataset.legend,
      showLegendPoint: false
    });
    _graph.views.add(line);
  };

  /**
   * Adds a line view to the D3View (w/o connecting lines), this function is
   * called to build the line view when, dataset.class: "median".
   *
   * @param {object} dataset
   *    an object used to describe a set of data
   *
   *    dataset.class = identifier for type of data
   *    dataset.legend = the dataset name, used by the legend
   *    dataset.data = the point data to plot
   */
  _this.buildMedianDataView = function (dataset) {
    var medianData = D3LineView({
      view: _graph,
      showLine: false,
      data: _this.parseDataIntoArray(dataset.data),
      className: dataset.class,
      label: dataset.legend,
      pointRadius: 3
    });
    _graph.views.add(medianData);
  };

  /**
   * Adds a scatter plot D3View, this function is called to build
   * the line view when, dataset.class: "scatterplot1".
   *
   * @param {object} dataset
   *    an object used to describe a set of data
   *
   *    dataset.class = identifier for type of data
   *    dataset.legend = the dataset name, used by the legend
   *    dataset.data = the point data to plot
   */
  _this.buildScatterPlotView = function (dataset) {
    var scatterplot = D3LineView({
      view: _graph,
      showLine: false,
      data: _this.parseDataIntoArray(dataset.data),
      className: dataset.class,
      label: dataset.legend,
      pointRadius: 2
    });
    _graph.views.add(scatterplot);
  };

  /**
   * Adds a StandardDeviationLineView to the D3View, this function is called
   * to graph the standard devaiation binned data when, dataset.class: "binned"
   *
   * @param {object} dataset
   *    an object used to describe a set of data
   *
   *    dataset.class = identifier for type of data
   *    dataset.legend = the dataset name, used by the legend
   *    dataset.data = the point data to plot
   */
  _this.buildStandardDeviationLineView = function (dataset) {
    var standardDevationLineView = StandardDevationLineView({
      view: _graph,
      data: _this.parseDataIntoArray(dataset.data),
      histogram: dataset.data,
      className: dataset.class,
      label: dataset.legend,
      pointRadius: 5,
      showLine: false
    });
    _graph.views.add(standardDevationLineView);
  };

  /**
   * Unbind event listeners and free references.
   */
  _this.destroy = Util.compose(function () {
    var views;

    if (_this === null) {
      return;
    }

    if (_graph) {
      views = _graph.views.data();
      _graph.views.reset([], {'silent': true});
      views.forEach(function (view) {
        view.destroy();
      });
      _graph.destroy();
      _graph = null;
    }
    _this = null;
  }, _this.destroy);

  /**
   * Gets an arbitrary set of logrithmic values for graphs whose tick values
   *  would otherwise run into each other.
   *
   * @params {array} extent
   *    An array containing the min and max of the x axis data range.
   *
   * @returns {array} ticks
   *    An array of tick values.
   */
  _this.getLogTicks = function (extent) {
    var min,
        max,
        ticks;

    min = extent[0];
    max = extent[1];

    if (max > 5000) {
      ticks = [50, 100, 500, 1000, 2000, 5000, 10000];
    } else {
      ticks = [10, 20, 30, 40, 50, 100, 200, 300, 400, 500, 1000, 2000, 5000];
    }

    if (min > ticks[0] ) {
      ticks = ticks.filter(function(value) {
        return value > min;
      });
    }

    if (max < ticks[ticks.length - 1]) {
      ticks = ticks.filter(function(value) {
        return value < max;
      });
    }

  return ticks;
  };

  /**
   * Builds the D3View that will display all of the datasets returned by the
   * ContentView.fetchData Xhr request.
   *
   * @param {object} data
   *    Data returned by the Xhr request for dyfi_plot_atten.json
   */
  _this.onSuccess = function (data) {
    var datasets;

    datasets = data.datasets;

    if (datasets && datasets.length && datasets.length > 0) {
      _graph = D3View(Util.extend({
        title: 'Intensity vs. Distance Plot',
        xLabel: 'Hypocentral Distance (km)',
        yLabel: 'Intensity (mmi)',
        xAxisScale: d3.scale.log(),
        xAxisFormat: function (value) {
          return value;
        },
        xAxisTicks: _this.xAxisTicks,
        yAxisTicks: [1,2,3,4,5,6,7,8,9,10],
        yExtent: [1,10],
        marginTop: 10,
        marginLeft: 10,
        paddingLeft:70
      }, options));
      _this.el.innerHTML = '';
      _this.el.classList.add('IntensityGraphView');
      _this.el.appendChild(_graph.el);
      _this.parseData(datasets);
    } else {
      _this.el.innerHTML = '<p class="alert warning">Intensity vs. Distance ' +
          'data does not exist.</p>';
    }
  };

  /**
   * Scans all datasets returned in the XHR response and determines
   * which type of view will be added to the D3View.
   *
   * @param {array} data
   *    An array of datasets to be plotted in the D3View
   */
  _this.parseData = function (data) {
    data.forEach(function (dataset) {
      if (dataset.class === 'estimated1' ||
          dataset.class === 'estimated2') {
        _this.buildLineView(dataset);
      }
      if (dataset.class === 'scatterplot1') {
        _this.buildScatterPlotView(dataset);
      }
      if (dataset.class === 'median') {
        _this.buildMedianDataView(dataset);
      }
      if (dataset.class === 'binned') {
        _this.buildStandardDeviationLineView(dataset);
      }
    });
  };

  /**
   * Massages the point data into a new format that is expected by the
   * D3LineView and StandardDevationLineView.
   *
   * @param {array} dataPoints
   *    An array of objects that contain "x" and "y" attributes that represent
   *    point data.
   */
  _this.parseDataIntoArray = function (dataPoints) {
    var data;

    data = [];
    dataPoints.forEach(function (point) {
      data.push([point.x, point.y]);
    });

    return data;
  };

  /**
   * Makes certain that x Axis ticks are visible for small axis extents.
   *
   * @param {array} extent
   *    An array containing the min and max of the x axis data range.
   *
   * @returns {array} ticks
   *    An array of tick values, or null if the d3 default will suffice.
   */
  _this.xAxisTicks = function (extent) {
    var logmin,
        logmax,
        min,
        max,
        ticks;

    // No extents, return null.
    if (extent.length < 1) {
      return null;
    }

    min = extent[0];
    max = extent[extent.length -1];

    logmin = Math.log(min) / Math.LN10;
    logmax = Math.log(max) / Math.LN10;

    // range is completely within 2 ticks on the log 10 scale.
    // Create 2 ticks, rounded to the nearest 1000's.
    if (logmax - logmin < 1) {
      ticks = [Math.round(min * 1000.0) / 1000.0,
          Math.round(max * 1000.0) / 1000.0];
      return ticks;
    }

    if (logmax - logmin > 1.5) {
      ticks = _this.getLogTicks(extent);
      return ticks;
    }

    return null;
  };


  options = null;
  return _this;
};


module.exports = DYFIIntensityGraphView;

},{"core/ContentView":"core/ContentView","d3":1,"d3/D3LineView":4,"d3/D3View":7,"dyfi/StandardDeviationLineView":"dyfi/StandardDeviationLineView","util/Util":"util/Util"}],"dyfi/DYFIModule":[function(require,module,exports){
'use strict';


var DYFIFormModule = require('dyfi/DYFIFormModule'),
    DYFIView = require('dyfi/DYFIView'),
    ImpactSummaryModule = require('impact/ImpactSummaryModule'),
    Module = require('core/Module'),
    Util = require('util/Util');


var _ID,
    _TITLE,
    _TYPES;


_ID = 'dyfi';
_TITLE = 'Did You Feel It?';
_TYPES = ['dyfi'];


var _DEFAULTS = {

};


var DYFIModule = function (options) {
  var _this,
      _initialize,

      _dyfiView;


  options = Util.extend({}, _DEFAULTS, options);
  _this = Module(options);

  _initialize = function (/*options*/) {
    _this.ID = _ID;
    _this.TITLE = _TITLE;
  };


  _this.destroy = Util.compose(function () {
    if (_dyfiView) {
      _dyfiView.destroy();
    }

    _dyfiView = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.render = function () {
    _this.renderHeader();
    _this.renderContent();
    _this.renderFooter();
  };

  _this.renderContent = function () {
    var product;

    product = _this.getProduct('dyfi');

    if (!product) {
      _this.content.innerHTML = '<p class="alert error">No DYFI Found!</p>';
    } else {
      if (_dyfiView && _dyfiView.destroy) {
        _dyfiView.destroy();
        _dyfiView = null;
      }

      _dyfiView = DYFIView({
        el: _this.content,
        model: product
      });

      _dyfiView.render();
    }
  };

  _this.renderFooter = function () {
    var additionalFooter,
        product;

    _this.footer.innerHTML =[
      '<h3>For More Information</h3>',
      '<ul>',
        '<li>',
          '<a href="/data/dyfi/">',
            'Scientific Background for Did You Feel It?',
          '</a>',
        '</li>',
      '</ul>'
    ].join('');

    product = _this.getProduct('dyfi');
    if (product) {
      additionalFooter = _this.getProductFooter({
        product: product
      });

      if (additionalFooter) {
        _this.footer.appendChild(additionalFooter);
      }
    }
  };
  _this.renderHeader = function () {
    var product;

    _this.header.innerHTML = '<h3 class="dyfi-title">' + _this.TITLE + '</h3>' +
        '<a class="tell-us-link" href="#' + DYFIFormModule.ID +
        '">' + DYFIFormModule.TITLE + '</a>';

    product = _this.getProduct('dyfi');

    if (product) {
      _this.header.appendChild(_this.getProductHeader({
        product: product,
        summaryModule: ImpactSummaryModule
      }));
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


DYFIModule.ID = _ID;
DYFIModule.TITLE = _TITLE;
DYFIModule.TYPES = _TYPES;


module.exports = DYFIModule;

},{"core/Module":"core/Module","dyfi/DYFIFormModule":"dyfi/DYFIFormModule","dyfi/DYFIView":"dyfi/DYFIView","impact/ImpactSummaryModule":"impact/ImpactSummaryModule","util/Util":"util/Util"}],"dyfi/DYFIPinView":[function(require,module,exports){
'use strict';


var BasicPinView = require('core/BasicPinView'),
    DYFIModule = require('dyfi/DYFIModule'),
    Formatter = require('core/Formatter'),
    Util = require('util/Util');


var _DEFAULTS = {
  module: DYFIModule
};

var DYFIPinView = function (options) {
  var _this,
      _initialize,

      _formatter;


  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  _initialize = function (options) {
    _formatter = options.formatter || Formatter();
  };

  /**
   * Render the content section of the pin. This loads a DYFI image
   *
   */
  _this.renderPinContent = function () {
    var code,
        img;

    code = _this.model.get('code');
    img = _this.model.getContent('pin-thumbnail.png');
    if (!img) {
      img = _this.model.getContent(code + '_ciim.jpg');
    }

    if (img) {
      _this.content.innerHTML = '<img src="' + img.get('url') +
          '" class="dyfi-intensity-map" alt="DYFI Intensity Map"/>';
    } else {
      _this.content.innerHTML = '<p class="alert warning">Could not load ' +
          'DYFI intensity map</p>';
    }
  };

  /**
   * Render header for DYFIPinView with impact bubble
   *
   */
  _this.renderPinHeader = Util.compose(_this.renderPinHeader, function () {
    _this.header.insertAdjacentHTML('beforeend',
        _formatter.intensity(_this.model.getProperty('maxmmi'), null));
  });

  _initialize(options);
  options = null;
  return _this;
};

module.exports = DYFIPinView;

},{"core/BasicPinView":"core/BasicPinView","core/Formatter":"core/Formatter","dyfi/DYFIModule":"dyfi/DYFIModule","util/Util":"util/Util"}],"dyfi/DYFIResponsesView":[function(require,module,exports){
'use strict';

var Collection = require('mvc/Collection'),
    ContentView = require('core/ContentView'),
    DataTable = require('mvc/DataTable'),
    Formatter = require('core/Formatter'),
    Util = require('util/Util');


var _NO_CONTENT_MESSAGE = '<p class="alert error">No Responses available.</p>';

/* Formatter for _RESPONSE_DATA_COLUMNS */
var _FORMATTER = Formatter();

/* Array of Column Objects for Responses DataTable */
var _RESPONSE_DATA_COLUMNS = [
  {
    className: 'dyfi-response-location',
    title: 'Location',
    downloadTitle: 'City\tState/Region\tCountry\tZip Code',
    format: function (response) {
      return _FORMATTER.dyfiLocation(response);
    },
    downloadFormat: function (response) {
      var country,
          location,
          region,
          zip;

      country = response.country;
      location = response.name;
      region = response.state;
      zip = response.zip;

      return [location, region, country, zip].join('\t');
    }
  },
  {
    className: 'dyfi-response-mmi',
    title: 'MMI',
    format: function (response) {
      return _FORMATTER.intensity(response.cdi);
    },
    downloadFormat: function (response) {
      return _FORMATTER.mmi(response.cdi);
    }
  },
  {
    className: 'dyfi-response-numResp',
    title: 'Responses',
    format: function (response) {
      return response.nresp;
    }
  },
  {
    className: 'dyfi-response-distance',
    title: 'Distance',
    format: function (response) {
      return response.dist + ' km';
    }
  },
  {
    className: 'dyfi-response-latitude',
    title: 'Latitude',
    format: function (response) {
      return _FORMATTER.latitude(response.lat);
    },
    downloadFormat: function (response) {
      return response.lat;
    }
  },
  {
    className: 'dyfi-response-longitude',
    title: 'Longitude',
    format: function (response) {
      return _FORMATTER.longitude(response.lon);
    },
    downloadFormat: function (response) {
      return response.lon;
    }
  }
];

/* Array of sort objects for use by DataTable */
var _RESPONSE_DATA_SORTS = [
  {
    id: 'city',
    title: 'City',
    sortBy: function (response) {
      return response.name;
    }
  },
  {
    id: 'country',
    title: 'Country',
    sortBy: function (response) {
      return response.country;
    }
  },
  {
    id: 'distance',
    title: 'Distance',
    sortBy: function (response) {
      return response.dist;
    }
  },
  {
    id: 'mmi',
    title: 'MMI',
    sortBy: function (response) {
      return response.cdi;
    },
    descending: true
  },
  {
    id: 'state',
    title: 'Region / State',
    sortBy: function (response) {
      return response.state;
    }
  },
  {
    id: 'numResp',
    title: 'Responses',
    sortBy: function (response) {
      return response.nresp;
    },
    descending: true
  },
  {
    id: 'zip',
    title: 'Zip Code',
    sortBy: function (response) {
      if (response.zip !== '') {
        return response.zip;
      }
      else {
        return response.name;
      }
    }
  }
];


/**
 * This class extends the {ContentView} class and is specifically used
 * for rendering "stationlist.json" for a given product. The `options.model`
 * should be of type {Content}.
 *
 */
var DYFIResponsesView = function (options) {
  var _this,
      _initialize,

      _button,
      _formatter,
      _product,
      _responses,
      _responseTable,
      _responseTableEl;


  options = options || {};
  _this = ContentView(options);

  _initialize = function () {
    _button = null;
    _formatter = options.formatter || Formatter();
    _product = options.product || null;
    _responseTable = null;
    _responseTableEl = null;
  };

  /**
   * Add a toggle button to the reponses DataTable.
   *
   * @param containter
   *        The container element that the button should be added to.
   */
  _this.addToggleButton = function (container) {
    _button = container.appendChild(document.createElement('button'));
    _button.innerHTML = 'See All Responses';
    _button.className = 'view-all';
    _button.addEventListener('click', _this.onToggleButtonClick);
    container.appendChild(_button);
  };

  /**
   * Build a response collection from the DYFI xmlDoc.
   *
   * @param xmlDoc xmlObject
   *        the xml document to parse.
   * @return Collection
   *         A collection of DYFI responses.
   */
  _this.buildResponsesCollection = function (xmlDoc) {
    var data = xmlDoc.getElementsByTagName('location'),
        responsesArray = [],
        locationName, locations, location,
        node, nodeName, nodeValue;

    for (var x = 0; x < data.length; x++) {

      locationName = data[x].getAttribute('name');
      locations = data[x].childNodes;
      location = {
        id: x,  // Assign an ID for sorting caching
        zip: '' // Provide empty default to prevent undefined
      };

      for (var i = 0; i < locations.length; i++) {

        node = locations[i];
        nodeName = node.nodeName;
        nodeValue = node.textContent;

        if (nodeName === 'name' ||
            nodeName === 'state' ||
            nodeName === 'country' ||
            nodeName === 'zip') {
          location[nodeName] = nodeValue;
        } else if (
            nodeName === 'cdi' ||
            nodeName === 'dist' ||
            nodeName === 'lat' ||
            nodeName === 'lon') {
          location[nodeName] = parseFloat(nodeValue);
        } else if (nodeName === 'nresp') {
          location[nodeName] = parseInt(nodeValue, 10);
        }
      }

      // determine country/ add zip code to name
      if (locationName.length === 5) {
        location.country = 'United States of America';
        location.zip = locationName;
      } else {
        locationName = locationName.split('::');
        location.state = locationName[1];
        location.country = locationName[2];
      }

      responsesArray.push(location);
    }

    return Collection(responsesArray);
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (_button !== null) {
      _button.removeEventListener('click', _this.onToggleButtonClick);
    }
    if (_responseTable !== null) {
      _responseTable.destroy();
    }
    if (_responses) {
      _responses.destroy();
    }

    _button = null;
    _initialize = null;
    _responses = null;
    _responseTableEl = null;
    _responseTable = null;
    _this = null;
  }, _this.destroy);

  /**
   * Renders the default error message. Called if an error occurs during the
   * data fetch.
   *
   */
  _this.onError = function (/*status, xhr*/) {
    _this.el.innerHTML = _NO_CONTENT_MESSAGE;
  };


  /**
   * Renders the list of responses. Called when data is successfully fetched.
   *
   */
  _this.onSuccess = function (responseText, xhr) {
    _responses = _this.buildResponsesCollection(xhr.responseXML);

    _responseTable = DataTable({
      el: _this.el,
      className: 'dyfi-response-table',
      collection: _responses,
      emptyMarkup: _NO_CONTENT_MESSAGE,
      columns: _RESPONSE_DATA_COLUMNS,
      sorts: _RESPONSE_DATA_SORTS,
      defaultSort: 'distance'
    });

    _responseTableEl = _this.el.querySelector('.datatable-data');
    _responseTableEl.classList.add('horizontal-scrolling');
    if (_responses.data().length > 10) {
      _this.addToggleButton(_this.el);
    }
  };

  /**
   * Toggle the Response list size, either all responses, or the last 10.
   *
   */
  _this.onToggleButtonClick = function () {
    if (_responseTableEl.classList.contains('full-list')) {
      _responseTableEl.classList.remove('full-list');
      _button.innerHTML = 'Show All Responses';
    } else {
      _responseTableEl.classList.add('full-list');
      _button.innerHTML = 'Show Only 10 Responses';
    }
  };

  _initialize();
  options = null;
  return _this;
};


DYFIResponsesView.NO_CONTENT_MESSAGE = _NO_CONTENT_MESSAGE;


module.exports = DYFIResponsesView;

},{"core/ContentView":"core/ContentView","core/Formatter":"core/Formatter","mvc/Collection":32,"mvc/DataTable":35,"util/Util":"util/Util"}],"dyfi/DYFIView":[function(require,module,exports){
'use strict';


var DYFIIntensityGraphView = require('dyfi/DYFIIntensityGraphView'),
    DYFIResponsesView = require('dyfi/DYFIResponsesView'),
    InteractiveMapView = require('map/InteractiveMapView'),
    ProductView = require('core/ProductView'),
    SvgImageMap = require('svgimagemap/SvgImageMap'),
    TabList = require('tablist/TabList'),
    Util = require('util/Util');


var _DEFAULTS = {

};

// Map of information used to generate tabs
var _RESOURCES = {
  'intensity-map': {
    title: 'Intensity Map',
    suffix: '_ciim.jpg',
    usemap: 'imap_base',
    href: '#map?' +
        InteractiveMapView.SHAKEMAP_CONTOURS + '= false&' +
        InteractiveMapView.DYFI_10K_OVERLAY + '=true&' +
        InteractiveMapView.DYFI_DEFAULT_OVERLAY + '=true',
    mapSuffix: '_ciim_imap.html'
  },
  'geocode-map': {
    title:'Geocoded Map',
    suffix:'_ciim_geo.jpg',
    usemap:'imap_geo',
    mapSuffix:'_ciim_geo_imap.html'
  },
  'zoom-map': {
    title:'Zoom Map',
    suffix:'_ciim_zoom.jpg',
    usemap:'imap_zoom',
    mapSuffix:'_ciim_zoom_imap.html'
  },
  'zoom-out-map': {
    title:'Zoom Out Map',
    suffix:'_ciim_zoomout.jpg',
    usemap:'imap_zoomout',
    mapSuffix:'_ciim_zoomout_imap.html'
  },
  'intensity-distance': {
    title:'Intensity Vs. Distance',
    suffix:'_plot_atten.jpg',
    subview: DYFIIntensityGraphView,
    subviewContent: 'dyfi_plot_atten.json'
  },
  'response-time': {
    title:'Responses Vs. Time',
    suffix:'_plot_numresp.jpg'
  },
  'response-list': {
    title: 'DYFI Responses',
    subview: DYFIResponsesView,
    subviewContent: 'cdi_zip.xml'
  }
};


/**
 * This class extends a ProductView and is used to render a DYFI product.
 *
 * @param options {Object}
 *     Configuration options. See _initialize for more details.
 */
var DYFIView = function (options) {
  var _this,
      _initialize,

      _resources,
      _tabList,
      _tabs;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ProductView(options);

  /**
   * Initializes a new view.
   *
   * @param options {Object}
   *     Configuration options. Nothing specific to this view at this time.
   */
  _initialize = function (/*options*/) {
    _this.el.classList.add('dyfi-view');

    _resources = Util.extend({}, _RESOURCES, options.resources);
  };


  /**
   * Creates an image-based tab. Image-based tabs consist of an image tag,
   * optionally wrapped in a link, optionally with a corresponding image map
   * for interations.
   *
   * @param params {Object}
   *     Information used to generate the image-based tab.
   * @param params.alt {String}
   *     The title for this tab. Also used as alt text for the image.
   * @param params.href {String} Optional.
   *     The URL to use for a link wrapping the image. If not specified,
   *     no link will wrap the image.
   * @param params.image {String}
   *     The URL to use for the image source.
   * @param params.map {String} Optional.
   *     The URL to use for the image map. If not specified, no corresponding
   *     image map will be generated.
   * @param params.usemap {String} Optional.
   *     The name/id to use for simple image maps. SvgImageMap (the typical
   *     behavior) will not use this parameter.
   *
   * @return {Object}
   *     A tab object as expected in order to provide to the TabList#addTab
   *     method.
   *
   * @see TabList#addTab
   */
  _this.createImageTab = function (params) {
    var container,
        image,
        map;

    if (params.href) {
      container = document.createElement('a');
      container.setAttribute('href', params.href);
    } else {
      container = document.createElement('div');
    }
    container.className = 'dyfi-tablist-image';

    if (!params.map) {
      image = container.appendChild(document.createElement('img'));
      image.setAttribute('alt', params.alt);
      // Defer setting image src so image is not fetched until tab is loaded
    }

    return {
      title: params.alt,
      content: function () {
        if (params.map) {
          map = SvgImageMap({
            el: container,
            imageAlt: params.alt,
            imageUrl: params.image,
            mapUrl: params.map,
            mapName: params.mapName
          });
        }

        return container;
      },
      // Called when tab list is destroyed. Cleans up map if one was generated.
      onDestroy: function () {
        if (map && map.destroy) {
          map.destroy();
        }
      },
      // Called when tab is selected. Give map chance to render if one was
      // generated, otherwise just set image.src to fetch the content.
      onSelect: function () {
        if (map && map.render) {
          map.render();
        } else if (image) {
          image.setAttribute('src', params.image);
        }
      }
    };
  };

  /**
   * Creates a subview-based tab. Subview-based tabs delegate rendering
   * to a different view. The subview itself is created immediately, rendered
   * during tab.onSelect, and destroyed during tabList.onDestroy.
   *
   * @param params {Object}
   *     Configuration parameters for creating the subview-base tab.
   * @param params.constructor {Function}
   *     A constructor factory that returns a view instance.
   * @param params.content {Model}
   *     The model to provide the created view. Typically a {Content} model.
   * @param params.title {String}
   *     The title to put on the tab.
   *
   * @return {Object}
   *     A tab object as expected in order to provide to the TabList#addTab
   *     method.
   *
   * @see TabList#addTab
   */
  _this.createSubViewTab = function (params) {
    var subview;

    subview = params.constructor({
      model: params.content,
      product: _this.model
    });

    return {
      title: params.title,
      content: subview.el,
      onDestroy: function () {
        subview.destroy();
      },
      onSelect: function () {
        subview.render();
      }
    };
  };

  /**
   * Creates a tab based on information found in the given params. Based on the
   * available information and corresponding content on `_this.model`, this
   * method will either (1) produce a subview-based tab, (2) produce an
   * image-based tab, or (3) not produce a tab.
   *
   * @param params {Object}
   *     Configuration parameters for creating the tab.
   *
   * @return {Object}
   *     A tab object as expected in order to provide to the TabList#addTab
   *     method.
   *
   * @see TabList#addTab
   * @see DYFIView#createImageTab
   * @see DYFIView#createSubViewTab
   */
  _this.createTab = function (params) {
    var code,
        imageContent,
        imageMapContent,
        subviewContent,
        tab;

    code = _this.model.get('code');

    imageContent = _this.model.getContent(code + params.suffix);
    imageMapContent = _this.model.getContent(code + params.mapSuffix);
    subviewContent = _this.model.getContent(params.subviewContent);

    if (params.subview && subviewContent) {
      tab = _this.createSubViewTab({
        constructor: params.subview,
        content: subviewContent,
        title: params.title
      });
    } else if (imageContent) {
      tab = _this.createImageTab({
        alt: params.title,
        href: params.href,
        image: imageContent.get('url'),
        map: imageMapContent ? imageMapContent.get('url') : null,
        mapName: params.usemap
      });
    }

    return tab;
  };

  /**
   * Destroys sub-views (TabList) and frees all references. Calls parent
   * destroy method via composition.
   *
   */
  _this.destroy = Util.compose(function () {
    if (_tabList && _tabList.destroy) {
      _tabList.destroy();
    }


    _resources = null;
    _tabList = null;
    _tabs = null;


    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Creates the `_tabList` and loads tab contents based on what is available
   * in `_this.model`. If an `_tabList` was previously created, it is destroyed
   * before a new `_tabList` is created. This is required since {TabList} does
   * not yet have a "removeTab" method.
   *
   */
  _this.render = function () {
    if (_tabList && _tabList.destroy) {
      _tabList.destroy();
    }

    _tabList = TabList({
      el: _this.el,
      tabs: []
    });

    // The `addTab` method returns an object with a select method such
    // that this view can subsequently select any particular tab as desired.
    _tabs = {};
    Object.keys(_resources).forEach(function (key) {
      var info,
          tab;

      info = _resources[key];
      tab = _this.createTab(info);
      if (tab) {
        _tabs[key] = _tabList.addTab(tab);
      }
    });
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = DYFIView;

},{"core/ProductView":"core/ProductView","dyfi/DYFIIntensityGraphView":"dyfi/DYFIIntensityGraphView","dyfi/DYFIResponsesView":"dyfi/DYFIResponsesView","map/InteractiveMapView":"map/InteractiveMapView","svgimagemap/SvgImageMap":"svgimagemap/SvgImageMap","tablist/TabList":"tablist/TabList","util/Util":"util/Util"}],"dyfi/StandardDeviationLineView":[function(require,module,exports){
'use strict';

var d3 = require('d3'),
    ClassList = require('d3/ClassList'),
    D3LineView = require('d3/D3LineView'),
    D3SubView = require('d3/D3SubView'),
    Util = require('util/Util');


/**
 * This class extends the {D3SubView} class and is specifically used
 * for rendering binned standard deviation data as part of a D3LineView
 *
 * @param options {Object}
 *    An object containing configuration options for a D3LineView
 *
 * @param options.histogram {Object}
 *    An array of datapoints with standard deviation data
 *    [ {x: x1, y: y1, stdev: value}, ...]
 */
var StandardDeviationLineView = function (options) {
  var _this,
      _initialize,

      _data,
      _el,
      _histograms,
      _legend,
      _legendLine,
      _lineView,
      _x,
      _y;

  _this = D3SubView(options);

  /**
   * @Constructor
   *
   * Initializes the view. See class level documentation for details.
   */
  _initialize = function (options) {
    ClassList.polyfill(_this.el);
    _this.el.classList.add('StandardDeviationLineView');
    _el = d3.select(_this.el);

    _histograms = _el.append('g');
    _lineView = D3LineView(Util.extend({}, options, {
      el: _el.append('g').node(),
      legend: _this.legend
    }));

    _data = options.histogram;
  };

  /**
   * Renders a point with a histogram (for the standard deviation)
   * on the D3LineView.
   */
  _this.render = function () {
    _x = _this.view.model.get('xAxisScale');
    _y = _this.view.model.get('yAxisScale');

    _lineView.render();
    _histograms.selectAll('*').remove();

    if (_data.length === 0) {
      return;
    }

    // update standard deviation for each point
    _data.forEach(function (point) {
      var el,
          p0y,
          p1y,
          px,
          width;

      if (point.stdev === 0) {
        return;
      }

      width = 6;
      el = _histograms.append('path').attr('class', 'standard-deviation');
      px = _x(point.x);
      p0y = _y(point.y - point.stdev);
      p1y = _y(point.y + point.stdev);
      el.attr('d',
          'M ' + (px - width) + ' ' + p0y +
          'L ' + (px + width) + ' ' + p0y +
          'M ' + (px - width) + ' ' + p1y +
          'L ' + (px + width) + ' ' + p1y +
          'M ' + px + ' ' + p0y +
          'L ' + px + ' ' + p1y
      );
    });

    // update legend
    if (_lineView.legend) {
      ClassList.polyfill(_this.legend);
      _legend = d3.select(_this.legend);
      _legendLine = _legend.select('path');
      _legendLine.attr('d',
          'M 1  -3 L 24 -3' +
          'M 1  -9 L 1   3' +
          'M 24 -9 L 24  3'
      ).attr('class', 'standard-deviation');
    }
  };

  /**
   * Unbind event listeners and free references.
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }

    if (_lineView) {
      _lineView.destroy();
    }

    _data = null;
    _el = null;
    _histograms = null;
    _legend = null;
    _legendLine = null;
    _lineView = null;
    _x = null;
    _y = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _initialize(options);
  options = null;
  return _this;
};

module.exports = StandardDeviationLineView;

},{"d3":1,"d3/ClassList":3,"d3/D3LineView":4,"d3/D3SubView":5,"util/Util":"util/Util"}],"dyfi/TextQuestionView":[function(require,module,exports){
'use strict';


var Util = require('util/Util'),
    View = require('mvc/View');


// Default values used by constructor.
var _DEFAULTS = {
  // label - The question being asked
  type: 'input',
  label: null,
  placeholder: '',
  value: null
};

var _ID_SEQUENCE = 0;


/**
 * Class: TextQuestionView
 * Creates a new TextQuestionView.
 *
 * @param options {Object}
 *     An object containing configuration options. See _DEFAULTS above for
 *     detailed documentation on what can be specified.
 */

var TextQuestionView = function (options) {
  var _this,
      _initialize,

      _input,
      _label;


  options = Util.extend({}, _DEFAULTS, options);
  _this = View(options);

  _initialize = function (options) {
    var id,
        section;

    id = 'text-input-' + (++_ID_SEQUENCE);

    section = document.createElement('section');
    _label = section.appendChild(document.createElement('label'));
    _input = section.appendChild(document.createElement(options.type));

    section.classList.add('question');
    section.classList.add('text-input');

    _label.setAttribute('for', id);

    _input.id = id;
    if (options.type === 'input') {
      _input.setAttribute('type', 'text');
    }
    if (options.placeholder) {
      _input.setAttribute('placeholder', options.placeholder);
    }

    _label.innerHTML = options.label;
    _input.value = options.value || '';

    _this.el.appendChild(section);


    _input.addEventListener('change', _this.onChange);
  };


  /**
   * Free references
   *
   */
  _this.destroy = Util.compose(function () {
    _input.removeEventListener('change', _this.onChange);

    _input = null;
    _label = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Get answers object.
   *
   * @return {Object}
   */
  _this.getAnswers = function () {
    return {value: _input.value || null, label: _label.innerHTML};
  };

  /**
   * Triggers an event change when a text question changes.
   *
   */
  _this.onChange = function () {
    _this.trigger('change', _this);
  };

  /**
   * Sets an answer.
   *
   */
  _this.setAnswers = function (value) {
    _input.value = value || '';
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = TextQuestionView;

},{"mvc/View":"mvc/View","util/Util":"util/Util"}],"finite-fault/FiniteFaultModule":[function(require,module,exports){
'use strict';

var FiniteFaultView = require('finite-fault/FiniteFaultView'),
    Module = require('core/Module'),
    ScientificSummaryModule = require('scientific/ScientificSummaryModule'),
    Util = require('util/Util');

var _ID,
    _TITLE,
    _TYPES;

_ID = 'finite-fault';
_TITLE = 'Finite Fault';
_TYPES = ['finite-fault'];

var FiniteFaultModule = function (options) {

  var _this,
      _initialize,

      _finiteFaultView;

  options = Util.extend({}, options);
  _this = Module(options);

  _initialize = function () {
    _this.ID = _ID;
    _this.TITLE = _TITLE;
  };

  _this.destroy = Util.compose(function () {
    if (_finiteFaultView) {
      _finiteFaultView.destroy();
      _finiteFaultView = null;
    }
    _initialize = null;
    _this = null;
  }, _this.destroy);


  /**
   * Renders the details for this module. Defers bulk of header Information
   * to generalized header rendering. Uses FiniteFaultView for bulk of
   * content rendering.
   *
   */
  _this.render = function () {
    var footer,
        product;

    // Destroy FiniteFaultView if it already exists
    if (_finiteFaultView && _finiteFaultView.destroy) {
      _finiteFaultView.destroy();
      _finiteFaultView = null;
    }

    _this.header.innerHTML = '<h3>Finite Fault</h3>';
    Util.empty(_this.content);
    Util.empty(_this.footer);

    product = _this.getProduct('finite-fault');
    if (!product) {
      _this.content.innerHTML =
          '<p class="alert warning">No Finite Fault Found</p>';
    } else {
      // Display review/preferred status in header section
      _this.header.appendChild(_this.getProductHeader({
        product: product,
        summaryModule: ScientificSummaryModule
      }));

      // Display Finite Fault View in content section
      _finiteFaultView = FiniteFaultView({
        el: _this.content,
        model: product
      });
      _finiteFaultView.render();

      // Display downloads in footer section
      footer = _this.getProductFooter({
        product: product,
      });
      if (footer) {
        _this.footer.appendChild(footer);
      }
    }
  };

  _initialize();
  options = null;
  return _this;
};


FiniteFaultModule.ID = _ID;
FiniteFaultModule.TITLE = _TITLE;
FiniteFaultModule.TYPES = _TYPES;


module.exports = FiniteFaultModule;

},{"core/Module":"core/Module","finite-fault/FiniteFaultView":"finite-fault/FiniteFaultView","scientific/ScientificSummaryModule":"scientific/ScientificSummaryModule","util/Util":"util/Util"}],"finite-fault/FiniteFaultPinView":[function(require,module,exports){
'use strict';


var BasicPinView = require('core/BasicPinView'),
    FiniteFaultModule = require('finite-fault/FiniteFaultModule'),
    Util = require('util/Util');


var _DEFAULTS = {
  module: FiniteFaultModule
};

var FiniteFaultPinView = function (options) {
  var _this;


  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);


  _this.getSlipImage = function (product) {
    var code,
        image,
        paths;

    code = product.get('properties').eventsourcecode;
    image = product.getContent('web/' + code + '_slip2.png');
    image = image || product.getContent('web1/' + code + '_slip2.png');
    image = image || product.getContent('web2/' + code + '_slip2.png');

    if (!image) {
      paths = product.get('contents');
      paths = paths ? paths.getIds() : {};
      paths = Object.keys(paths);

      paths.some(function (path) {
        if (path.indexOf('slip') !== -1) {
          image = product.getContent(path);
          return true;
        }
      });
    }

    return image;
  };

  /**
   * Render the content section of the pin. This loads the smaller version
   * of the finite-fault basemap.png
   *
   */
  _this.renderPinContent = function () {
    var image,
        markup;

    try {
      image = _this.getSlipImage(_this.model);

      markup = '<span>Cross-section of slip distribution</span>' +
          '<img src="' + image.get('url') + '"' +
          ' class="finite-fault-cross-section" ' +
          ' alt="Cross-section of slip distribution"/>';
    } catch (e) {
      markup = '<p class="alert error">Could not load cross-section of ' +
          'slip distribution</p>';
    }

    _this.content.innerHTML = markup;
  };


  options = null;
  return _this;
};


module.exports = FiniteFaultPinView;

},{"core/BasicPinView":"core/BasicPinView","finite-fault/FiniteFaultModule":"finite-fault/FiniteFaultModule","util/Util":"util/Util"}],"finite-fault/FiniteFaultView":[function(require,module,exports){
'use strict';

var TextProductView = require('core/TextProductView'),
    Util = require('util/Util');


var _DEFAULTS = {

};


var FiniteFaultView = function (options) {
  var _this;


  options = Util.extend({contentPath: options.model ?
      (options.model.getProperty('eventsourcecode') + '.html') : ''},
    _DEFAULTS, options
  );
  _this = TextProductView(options);


  options = null;
  return _this;
};


module.exports = FiniteFaultView;

},{"core/TextProductView":"core/TextProductView","util/Util":"util/Util"}],"focal-mechanism/FocalMechanismModule":[function(require,module,exports){
'use strict';


var Formatter = require('core/Formatter'),
    Module = require('core/Module'),
    FocalMechanismView = require('focal-mechanism/FocalMechanismView'),
    ScientificSummaryModule = require('scientific/ScientificSummaryModule'),
    Util = require('util/Util');


var _DEFAULTS,
    _ID,
    _TITLE,
    _TYPES;


_ID = 'focal-mechanism';
_TITLE = 'Focal Mechanism';
_TYPES = ['focal-mechanism'];

_DEFAULTS = {
  formatter: null
};


/**
 * Module to display a focal-mechanism type {Product}.
 *
 * @param options {Object}
 * @param options.formatter {Formatter}
 *     formatter object to pass to FocalMechanismView.
 */
var FocalMechanismModule = function (options) {
  var _this,
      _initialize,

      _formatter,
      _focalMechanismView;


  _this = Module(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);
    _formatter = options.formatter || Formatter();

    _this.ID = _ID;
    _this.TITLE = _TITLE;
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (_focalMechanismView) {
      _focalMechanismView.destroy();
    }
    _focalMechanismView = null;

    _formatter = null;
    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Render product content, or an error message if no product available.
   */
  _this.render = function () {
    var product;

    product = _this.getProduct('focal-mechanism');

    _this.renderHeader(product);
    _this.renderContent(product);
    _this.renderFooter(product);
  };

  /**
   * Render the content section of this module.
   *
   * @param product {Product}
   *     product to render, or null if no product.
   */
  _this.renderContent = function (product) {
    if (_focalMechanismView && _focalMechanismView.destroy) {
      _focalMechanismView.destroy();
      _focalMechanismView = null;
    }

    if (!product) {
      _this.content.innerHTML = '<p class="alert error">' +
          'No Focal Mechanism Found!' +
          '</p>';
    } else {
      _focalMechanismView = FocalMechanismView({
        el: _this.content,
        formatter: _formatter,
        model: product
      });
      _focalMechanismView.render();
    }
  };

  /**
   * Render the footer section of this module.
   *
   * @param product {Product}
   *     product to render, or null if no product.
   */
  _this.renderFooter = function (product) {
    var downloads;

    Util.empty(_this.footer);
    if (product) {
      downloads = _this.getProductFooter({
        product: product
      });
      if (downloads) {
        _this.footer.appendChild(downloads);
      }
    }
  };

  /**
   * Render the header section of this module.
   *
   * @param product {Product}
   *     product to render, or null if no product.
   */
  _this.renderHeader = function (product) {
    var header;

    Util.empty(_this.header);
    _this.header.innerHTML = '<h3>' + _this.TITLE + '</h3>';

    if (product) {
      header = _this.getProductHeader({
        product: product,
        summaryModule: ScientificSummaryModule
      });

      if (header) {
        _this.header.appendChild(header);
      }
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


FocalMechanismModule.ID = _ID;
FocalMechanismModule.TITLE = _TITLE;
FocalMechanismModule.TYPES = _TYPES;


module.exports = FocalMechanismModule;

},{"core/Formatter":"core/Formatter","core/Module":"core/Module","focal-mechanism/FocalMechanismView":"focal-mechanism/FocalMechanismView","scientific/ScientificSummaryModule":"scientific/ScientificSummaryModule","util/Util":"util/Util"}],"focal-mechanism/FocalMechanismPinView":[function(require,module,exports){
'use strict';


var FocalMechanismModule = require('focal-mechanism/FocalMechanismModule'),
    MomentTensorPinView = require('moment-tensor/MomentTensorPinView'),
    Util = require('util/Util');


var _DEFAULTS = {
  className: 'focal-mechanism-pin-beachball',
  fillColor: '#ffaa69',
  module: FocalMechanismModule
};


/**
 * This view is used for rendering a focal mechanism pin. Currently it
 * does the same thing as the {MomentTensorPinView} (i.e. a beachball), but
 * uses a different color and className by default.
 *
 * @see {moment-tensor/MomentTensorPinView}
 */
var FocalMechanismPinView = function (options) {
  var _this;


  options = Util.extend({}, _DEFAULTS, options);
  _this = MomentTensorPinView(options);


  options = null;
  return _this;
};


module.exports = FocalMechanismPinView;

},{"focal-mechanism/FocalMechanismModule":"focal-mechanism/FocalMechanismModule","moment-tensor/MomentTensorPinView":"moment-tensor/MomentTensorPinView","util/Util":"util/Util"}],"focal-mechanism/FocalMechanismView":[function(require,module,exports){
'use strict';

var Attribution = require('core/Attribution'),
    MomentTensorView = require('moment-tensor/MomentTensorView'),
    Util = require('util/Util');


var _DEFAULTS = {
  fillColor: '#ffaa69'
};


/**
 * View for displaying focal mechanisms.
 *
 * Same as MomentTensorView except suppresses axes, and MT specific information.
 *
 * @param options {Object}
 *     see MomentTensorView.
 */
var FocalMechanismView = function (options) {
  var _this;


  _this = MomentTensorView(Util.extend({}, _DEFAULTS, options));


  /**
   * Override getAxes to suppress axis information for focal mechanisms.
   */
  _this.getAxes = function () {
    // don't show any axes information
    return document.createDocumentFragment();
  };

  /**
   * Content for the "info" section of the moment tensor view.
   *
   * @param tensor {Tensor}
   *     the tensor being displayed.
   * @return {DOMElement}
   *     markup for the info section of the moment tensor view.
   */
  _this.getInfo = function (/*tensor*/) {
    var catalog,
        contributor,
        dataSource,
        el,
        product;

    product = _this.model;

    catalog = product.getProperty('eventsource');
    contributor = product.get('source');
    dataSource = product.getProperty('beachball-source') || contributor;

    catalog = catalog.toUpperCase();
    contributor = Attribution.getContributorReference(contributor);
    dataSource = Attribution.getContributorReference(dataSource);

    el = document.createElement('div');
    el.classList.add('moment-tensor-info');
    el.classList.add('horizontal-scrolling');
    el.innerHTML =
        '<table>' +
          '<tbody>' +
            '<tr>' +
              '<th scope="row">Catalog</th>' +
              '<td>' + catalog + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Data Source</th>' +
              '<td>' + dataSource + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Contributor</th>' +
              '<td>' + contributor + '</td>' +
            '</tr>' +
          '</tbody>' +
        '</table>';

    return el;
  };

  /**
   * Override the focal mechanism view title.
   *
   * @param tensor {Tensor}
   *     the tensor being displayed.
   * @return {DOMElement}
   *     markup for the info section of the moment tensor view.
   */
  _this.getTitle = function (/*tensor*/) {
    return document.createDocumentFragment();
  };


  return _this;
};


module.exports = FocalMechanismView;

},{"core/Attribution":"core/Attribution","moment-tensor/MomentTensorView":"moment-tensor/MomentTensorView","util/Util":"util/Util"}],"general/ExecutiveSummaryModule":[function(require,module,exports){
'use strict';


var DyfiFormPinView = require('dyfi/DYFIFormPinView'),
    DyfiPinView = require('dyfi/DYFIPinView'),
    FiniteFaultPinView = require('finite-fault/FiniteFaultPinView'),
    FocalMechanismPinView = require('focal-mechanism/FocalMechanismPinView'),
    InteractiveMapPinView = require('map/InteractiveMapPinView'),
    MomentTensorPinView = require('moment-tensor/MomentTensorPinView'),
    OriginPinView = require('origin/OriginPinView'),
    PAGERPinView = require('losspager/PAGERPinView'),
    Product = require('pdl/Product'),
    RegionalInfoPinView = require('general/RegionalInfoPinView'),
    ShakeMapPinView = require('shakemap/ShakeMapPinView'),
    SummaryModule = require('core/SummaryModule'),
    TsunamiPinView = require('general/TsunamiPinView'),
    Util = require('util/Util');


var _ID,
    _DEFAULTS,
    _TITLE,

    _hasContent;


_ID = 'executive';
_TITLE = 'Overview';

_hasContent = function (eventPageModel) {
  var ev;

  ev = eventPageModel.get('event');
  if (ev !== null) {
    // only show this module if there is an event
    return true;
  }

  return false;
};

_DEFAULTS = {
};


/**
 * The ExecutiveSummaryModule provides a "Pin Board" views of preferred product
 * information for the current event.
 *
 */
var ExecutiveSummaryModule = function (options) {
  var _this,
      _initialize;


  options = Util.extend({}, _DEFAULTS, options);
  _this = SummaryModule(options);

  /**
   * Creates a new ExecutiveSummaryModule.
   *
   * @param options.model.event {CatalogEvent}
   * @param options.model.config {Object}
   *
   */
  _initialize = function (/*options*/) {
    var el;

    el = _this.el;

    _this.ID = _ID;
    _this.TITLE = _TITLE;

    el.classList.add('executive-summary');

    _this.clearPins(true);
    _this.clearTexts(true); // general-header + general-text
    _this.clearLinks(true);
  };


  /**
   * Clears the views associated with pins.
   *
   * @param init {Boolean} Optional. Default false.
   *     Flag whether to re-initialize the views array. By default the views
   *     array is set to null, if true, initializes views array to empty array.
   *
   * @see #_this.clearViews
   */
  _this.clearPins = function (init) {
    _this.clearViews(_this.pinViews);

    if (init) {
      _this.pinViews = [];
    } else {
      _this.pinViews = null;
    }
  };

  /**
   * Creates an LI element, appends it to the given `parent` and sets
   * appropriate classes. The `executive-summary-pin` class is added by default
   * but other classes my be added by providing them in the `classes` parameter.
   *
   * @param parent {DOMElement}
   *     The parent element to which the created container should be appended.
   * @param classes {Array} Optional.
   *     An array of classes to add to the created container.
   *
   * @return {DOMElement}
   */
  _this.createPinContainer = function (parent, classes) {
    var container;

    parent = parent || document.createDocumentFragment();
    classes = classes || [];

    container = parent.appendChild(document.createElement('li'));
    container.classList.add('executive-summary-pin');

    classes.forEach(function (className) {
      container.classList.add(className);
    });

    return container;
  };

  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return; // Already destroyed
    }

    _this.clearPins();

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * APIMethod.
   *
   * Implementing classes should override this method.
   *
   * @return {DOMElement}
   *     A header to label the links section for this {SummaryModule}. If no
   *     header is desired, return an empty {DocumentFragment}.
   */
  _this.getLinksHeader = function () {
    var header;

    header = document.createElement('h3');
    header.innerHTML = 'For More Information';

    return header;
  };

  /**
   * Renders each of the pins in order within _this.pinList container.
   *
   * @param ev {CatalogEvent}
   *     The event data to render.
   */
  _this.getPins = function (ev) {
    var config,
        eventProps,
        list,
        product;

    _this.pinViews = _this.pinViews || [];
    config = _this.model.get('config') || {};
    list = document.createElement('ul');
    list.classList.add('executive-summary-pins');

    if (!ev) {
      return list;
    }

    eventProps = ev.getSummary().properties || {};

    // Interactive Map pin
    _this.pinViews.push(InteractiveMapPinView({
      el: _this.createPinContainer(list),
      model: _this.model
    }));

    // Regional Info pin
    _this.pinViews.push(RegionalInfoPinView({
      el: _this.createPinContainer(list),
      model: ev.getPreferredOriginProduct()
    }));

    // DYFI Form pin
    if (config.SCENARIO_MODE !== true) {
      product = ev.getPreferredProduct(Product.getFullType('dyfi', config));
      _this.pinViews.push(DyfiFormPinView({
        el: _this.createPinContainer(list),
        model: product || Product()
      }));
    }

    // DYFI pin
    if (product) {
      _this.pinViews.push(DyfiPinView({
        el: _this.createPinContainer(list),
        model: product
      }));
    }

    // ShakeMap pin
    product = ev.getPreferredProduct(Product.getFullType('shakemap', config));
    if (product) {
      _this.pinViews.push(ShakeMapPinView({
        el: _this.createPinContainer(list),
        model: product
      }));
    }

    // PAGER pin
    product = ev.getPreferredProduct(Product.getFullType('losspager', config));
    if (product) {
      _this.pinViews.push(PAGERPinView({
        el: _this.createPinContainer(list),
        model: product
      }));
    }

    // Origin pin
    product = ev.getPreferredOriginProduct();
    if (product) {
      _this.pinViews.push(OriginPinView({
        el: _this.createPinContainer(list),
        model: product
      }));
    }

    // Moment Tensor pin
    product = ev.getPreferredProduct(Product.getFullType('moment-tensor',
        config));
    if (product) {
      _this.pinViews.push(MomentTensorPinView({
        el: _this.createPinContainer(list),
        model: product
      }));
    } else {
      // Only show focal mechanism if no moment tensor

      // Focal Mechanism pin
      product = ev.getPreferredProduct(Product.getFullType(
          'focal-mechanism', config));
      if (product) {
        _this.pinViews.push(FocalMechanismPinView({
          el: _this.createPinContainer(list),
          model: product
        }));
      }
    }

    // Finite Fault pin
    product = ev.getPreferredProduct(Product.getFullType('finite-fault',
        config));
    if (product) {
      _this.pinViews.push(FiniteFaultPinView({
        el: _this.createPinContainer(list),
        model: product
      }));
    }

    // Tsunami pin
    if (ev.getSummary().properties.tsunami === 1) {
      _this.pinViews.push(TsunamiPinView({
        el: _this.createPinContainer(list),
        model: ev.getPreferredOriginProduct()
      }));
    }

    return list;
  };

  /**
   * Does a comparison of one Product against an array of Products to see if
   * the same "url" property already exists in the array.
   *
   * @param {boolean}
   *     return true if the link already exists in the array
   *
   */
  _this.isDuplicate = function (needle, haystack) {
    var i;

    try {
      for (i = 0; i < haystack.length; i++) {
        if (haystack[i].get('properties').url ===
            needle.get('properties').url) {
          return true;
        }
      }
      return false;
    } catch (e) {
      return false;
    }
  };

  /**
   * Remove duplicate items from the array that have the same "url" property
   *
   * @param links {Array<Product>}
   *     An array of Products
   *
   */
  _this.removeDuplicateLinks = function (links) {
    var i,
        link,
        products;

    // add the first item since it cannot be a duplicate yet
    products = [];

    if (links.length) {
      products.push(links[0]);

      // add all additional links that do not already exist in products array
      for (i = 1; i < links.length; i++) {
        link = links[i];
        if (!_this.isDuplicate(link, products)) {
          products.push(link);
        }
      }
    }

    return products;
  };

  /**
   * Renders the module by delegating to three sub-render methods.
   *
   */
  _this.render = function () {
    var config,
        content,
        ev,
        footerEl,
        headers,
        links,
        posters,
        texts;

    ev = _this.model.get('event');

    _this.clearTexts(true);
    _this.clearLinks(true);
    _this.clearPins(true);

    Util.empty(_this.header);
    Util.empty(_this.content);
    Util.empty(_this.footer);

    if (!ev) {
      return;
    }

    config = _this.model.get('config');
    content = document.createDocumentFragment();
    headers = ev.getProducts(Product.getFullType('general-header'), config);
    posters = ev.getProducts(Product.getFullType('poster'), config);
    texts = ev.getProducts(Product.getFullType('general-text'), config);
    links = _this.removeDuplicateLinks(ev.getProducts(
        Product.getFullType('general-link'), config));


    _this.header.appendChild(_this.getTexts(headers));

    content.appendChild(_this.getPins(ev));
    content.appendChild(_this.getTexts(texts));
    content.appendChild(_this.getLinks(links));
    _this.content.appendChild(content);

    // Creates a download accordion if poster data is available. This accordion
    // has poster data.
    if (posters && posters.length > 0) {
      footerEl = _this.getProductFooter({
        product: posters[0]
      });

      // Calls render to make data available and removes the accordion-closed
      // class so that the accordion is open by default.
      if (footerEl && footerEl.querySelector('.accordion-closed')) {
        _this.downloadView.render();
        footerEl.querySelector('.accordion-closed').classList.
            remove('accordion-closed');
      }

      _this.footer.appendChild(footerEl);
    }

    // Render the pin views after they are in the DOM so they have extents
    _this.pinViews.forEach(function (view) {
      view.render();
    });
  };


  _initialize(options);
  options = null;
  return _this;
};


ExecutiveSummaryModule.ID = _ID;
ExecutiveSummaryModule.TITLE = _TITLE;

ExecutiveSummaryModule.hasContent = _hasContent;


module.exports = ExecutiveSummaryModule;

},{"core/SummaryModule":"core/SummaryModule","dyfi/DYFIFormPinView":"dyfi/DYFIFormPinView","dyfi/DYFIPinView":"dyfi/DYFIPinView","finite-fault/FiniteFaultPinView":"finite-fault/FiniteFaultPinView","focal-mechanism/FocalMechanismPinView":"focal-mechanism/FocalMechanismPinView","general/RegionalInfoPinView":"general/RegionalInfoPinView","general/TsunamiPinView":"general/TsunamiPinView","losspager/PAGERPinView":"losspager/PAGERPinView","map/InteractiveMapPinView":"map/InteractiveMapPinView","moment-tensor/MomentTensorPinView":"moment-tensor/MomentTensorPinView","origin/OriginPinView":"origin/OriginPinView","pdl/Product":"pdl/Product","shakemap/ShakeMapPinView":"shakemap/ShakeMapPinView","util/Util":"util/Util"}],"general/GeoserveNearbyPlacesView":[function(require,module,exports){
'use strict';

var Formatter = require('core/Formatter'),
    NearbyPlacesView = require('general/NearbyPlacesView'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');


var _DEFAULTS = {
  url: 'https://earthquake.usgs.gov/ws/geoserve/'
};


/**
 * View for a geoserve nearby-cities Product.
 *
 * @param options {Object}
 *    all options are passed to ProductView.
 */
var GeoserveNearbyPlacesView = function (options) {
  var _this,
      _initialize,

      _formatter,
      _url,
      _xhr;


  options = Util.extend({}, _DEFAULTS, options);
  _this = NearbyPlacesView(options);

  _initialize = function (options) {
    _formatter = options.formatter || Formatter();
    _url = options.url || null;
    _this.el.classList.add('geoserve-nearby-places');
  };


  /**
   * Gets data
   */
  _this.fetchData = function () {
    _xhr = Xhr.ajax({
      url: _url + 'places.json',
      success: _this.onSuccess,
      error: _this.onError,
      data: {
        latitude: _this.model.getProperty('latitude'),
        longitude: _this.model.getProperty('longitude'),
        type: 'event'
      },
      done: function () {
        _xhr = null;
      }
    });
  };

  /**
   * Displays message followed by the url requested on error
   */
  _this.onError = function () {
    _this.el.innerHTML = 'Unable to load geoserve web service, URL: ' + _url;
    _this.trigger('places-error');
  };

  /**
   * This method is called when data is successfully fetched from _this.model
   * {Content} object.
   *
   * @param data {String|JSON}
   *     The data for _this.model {Content} object.
   */
  _this.onSuccess = Util.compose(function (data) {
    return data.event.features.map(function (item) {
      var azimuth,
          countryOrState;

      azimuth = _formatter.backAzimuth(item.properties.azimuth);

      // Checks to see if location is inside the US or not if it is in the US
      // the state name is used if the location is outside the US
      // the country name is used.
      if (item.properties.country_code === 'US') {
        countryOrState = item.properties.admin1_name;
      } else {
        countryOrState = item.properties.country_name;
      }

      return {
        distance: item.properties.distance,
        direction: _formatter.compassWinds(azimuth),
        name: item.properties.name + ', ' + countryOrState,
        population: item.properties.population
      };
    });
  }, _this.onSuccess);

  /**
   * Called when the model changes. Initially sets a loading message then starts
   * the data fetch process to render the actual content. Relies on browser
   * caches to avoid duplicate HTTP overhead.
   */
  _this.render = function () {
    _this.el.innerHTML = 'Loading content&hellip;';
    _this.fetchData();
  };

  /**
   * Destroy all the things.
   */
  _this.destroy = Util.compose(function () {
    if (_xhr) {
      _xhr.abort();
      _xhr = null;
    }
    _url = null;
    _formatter = null;
    _initialize = null;
    _this = null;
  }, _this.destroy);


  _initialize(options);
  options = null;
  return _this;
};

module.exports = GeoserveNearbyPlacesView;

},{"core/Formatter":"core/Formatter","general/NearbyPlacesView":"general/NearbyPlacesView","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"general/GeoserveRegionSummaryView":[function(require,module,exports){
'use strict';

var ProductView = require('core/ProductView'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');


var _DEFAULTS = {
  url: 'https://earthquake.usgs.gov/ws/geoserve/regions.json'
};


/**
 * View for a geoserve tectonic summary Product.
 *
 * @param options {Object}
 *    all options are passed to ProductView.
 */
var GeoserveRegionSummaryView = function (options) {
  var _this,
      _initialize,

      _url,
      _xhr;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ProductView(options);

  _initialize = function (options) {
    _this.el.classList.add('geoserve-region-summary');
    _url = options.url;
  };


  /**
   * Gets data
   */
  _this.fetchData = function () {
    _xhr = Xhr.ajax({
      url: _url,
      success: _this.onSuccess,
      error: _this.onError,
      data: {
        latitude: _this.model.getProperty('latitude'),
        longitude: _this.model.getProperty('longitude'),
        type: 'tectonic'
      },
      done: function () {
        _xhr = null;
      }
    });
  };

  /**
   * Displays message followed by the url requested on error
   */
  _this.onError = function () {
    _this.el.innerHTML = '<p class="alert error">' +
        'Error loading region tectonic summary' +
        '</p>';
  };

  /**
   * This method is called when data is successfully fetched from _this.model
   * {Content} object.
   *
   * @param data {String|JSON}
   *     The data for _this.model {Content} object.
   */
  _this.onSuccess = function (data) {
    var features;

    features = data.tectonic.features;
    if (features.length > 0) {
      _this.el.innerHTML = features[0].properties.summary;
    } else {
      _this.el.innerHTML = '<p class="alert info">' +
          'No region summary available for this location' +
          '</p>';
    }
  };

  /**
   * Called when the model changes. Initially sets a loading message then starts
   * the data fetch process to render the actual content. Relies on browser
   * caches to avoid duplicate HTTP overhead.
   */
  _this.render = function () {
    _this.el.innerHTML = '<p>Loading content&hellip;</p>';
    _this.fetchData();
  };

  /**
   * Destroy all the things.
   */
  _this.destroy = Util.compose(function () {
    if (_xhr) {
      _xhr.abort();
      _xhr = null;
    }
    _url = null;
    _initialize = null;
    _this = null;
  }, _this.destroy);


  _initialize(options);
  options = null;
  return _this;
};

module.exports = GeoserveRegionSummaryView;

},{"core/ProductView":"core/ProductView","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"general/LocationView":[function(require,module,exports){
'use strict';

var Attribution = require('core/Attribution'),
    Formatter = require('core/Formatter'),
    InteractiveMapView = require('map/InteractiveMapView'),
    Module = require('core/Module'),
    View = require('mvc/View'),
    Util = require('util/Util');


var _DEFAULTS = {};


/**
 * View to display location information.
 *
 * @param options {Object}
 *     padded to View.
 * @param options.formatter {Formatter}
 *     formatting object.
 *     default `Formatter()`.
 */
var LocationView = function (options) {
  var _this,
      _initialize,

      _attribution,
      _caption,
      _formatter,
      _mapView;


  _this = View(options);

  _initialize = function (options) {
    var el;

    options = Util.extend({}, _DEFAULTS, options);
    _formatter = options.formatter || Formatter();

    el = _this.el;
    el.classList.add('locationview');
    el.innerHTML =
        '<h3>Location</h3>' +
        '<small class="attribution"></small>' +
        '<figure>' +
          '<a href="#map" class="locationview-map">' +
            '<div></div>' +
          '</a>' +
          '<figcaption class="locationview-caption"></figcaption>' +
        '</figure>';

    _attribution = el.querySelector('.attribution');
    _caption = el.querySelector('.locationview-caption');
    _mapView = InteractiveMapView({
      el: el.querySelector('.locationview-map > div'),
      interactive: false,
      model: _this.model,
      module: options.module || Module()
    });
    _mapView.el.addEventListener('click', _this.onClick);
  };


  /**
   * Unbind events and free references.
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }
    _mapView.el.removeEventListener('click', _this.onClick);
    _mapView.destroy();

    _attribution = null;
    _caption = null;
    _formatter = null;
    _mapView = null;
    _this = null;
  }, _this.destroy);

  /**
   * Get attribution for product.
   *
   * @param product {Product}
   *     the product.
   * @return {String}
   *     attribution markup.
   */
  _this.getAttribution = function (product) {
    if (!product) {
      return '';
    }

    return 'Contributed by ' +
        Attribution.getProductAttribution(product) +
        ' last updated ' +
        _formatter.datetime(product.get('updateTime'));
  };

  /**
   * Get location caption for product.
   *
   * @param product {Product}
   *     the product.
   * @return {String}
   *     caption markup.
   */
  _this.getCaption = function (product) {
    var depth,
        latitude,
        longitude;

    if (!product) {
      return '<p class="alert info">No location to display.</p>';
    }

    depth = product.getProperty('depth') || '';
    latitude = product.getProperty('latitude') || null;
    longitude = product.getProperty('longitude') || null;

    if (depth) {
      depth = ' depth=' + _formatter.depth(depth, 'km') +
          ' (' + _formatter.depth(_formatter.kmToMi(depth), 'mi') + ')';
    }

    return _formatter.location(latitude, longitude) + depth +
        '<br/><a href="#map">View interactive map</a>';
  };

  /**
   * Click handler for map.
   */
  _this.onClick = function () {
    window.location = '#map';
  };

  /**
   * Render location view.
   */
  _this.render = function () {
    var el,
        ev,
        product;

    el = _this.el;
    ev = _this.model.get('event');
    if (ev === null) {
      el.classList.add('locationview-empty');
      return;
    }

    el.classList.remove('locationview-empty');
    product = ev.getPreferredOriginProduct();
    _attribution.innerHTML = _this.getAttribution(product);
    _caption.innerHTML = _this.getCaption(product);
    _mapView.render();
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = LocationView;

},{"core/Attribution":"core/Attribution","core/Formatter":"core/Formatter","core/Module":"core/Module","map/InteractiveMapView":"map/InteractiveMapView","mvc/View":"mvc/View","util/Util":"util/Util"}],"general/NearbyPlacesView":[function(require,module,exports){
'use strict';

var ProductView = require('core/ProductView'),
    Formatter = require('core/Formatter'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');

var _DEFAULTS;

_DEFAULTS = {
  errorMessage: 'Error loading nearby places.',
  renderNewLayout: false
};


/**
 * View for a nearby-cities Product.
 *
 * @param options {Object}
 *    all options are passed to ProductView.
 */
var NearbyPlacesView = function (options) {
  var _this,
      _initialize,

      _errorMessage,
      _formatter,
      _renderNewLayout,
      _xhr;

  _this = ProductView(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _errorMessage = options.errorMessage;
    _formatter = options.formatter || Formatter();
    _renderNewLayout = options.renderNewLayout;

    _this.el.classList.add('nearby-places');
  };

  /**
   * Destroy all the things.
   */
  _this.destroy = Util.compose(function () {
    if (_xhr) {
      _xhr.abort();
      _xhr = null;
    }
    _errorMessage = null;
    _formatter = null;
    _this = null;
    _initialize = null;
  }, _this.destroy);

  /**
   * Gets the data
   */
  _this.fetchData = function () {
    var content;

    content = _this.model.getContent('nearby-cities.json');

    if (!content) {
      _this.onError();
      return;
    }

    _xhr = Xhr.ajax({
      url: content.get('url'),
      success: _this.onSuccess,
      error: _this.onError,
      done: function () {
        _xhr = null;
      }
    });
  };

  /**
   * Formats a place.
   *
   * @param place {Object}
   *     An object containing place information. Namely:
   *         "distance" {Number} (km)
   *         "direction" {String} (CompassWinds)
   *         "name" {String} (Description)
   *
   * @return {String}
   *     The formatted place markup.
   */
  _this.formatPlace = function (place) {
    var markup;

    if (_renderNewLayout) {
      markup = [
        '<li class="nearby-places-place">',
          '<span class="nearby-places-name">',
            place.name,
          '</span>',
          '<aside class="nearby-places-distance">',
            _formatter.distance(place.distance, 'km'),
            ' (',
              _formatter.distance(_formatter.kmToMi(place.distance), 'mi'),
            ') ',
            place.direction,
          '</aside>',
          '<aside class="nearby-places-population">Population: ',
            _formatter.numberWithCommas(place.population),
          '</aside>',
        '</li>'
      ];
    } else {
      markup = [
        '<li>',
          _formatter.distance(place.distance, 'km'),
          ' (',
            _formatter.distance(_formatter.kmToMi(place.distance), 'mi'),
          ') ',
          place.direction, ' of ', place.name,
        '</li>'
      ];
    }

    return markup.join('');
  };

  /**
   * This method is called when there is a problem.
   *
   * @param errorMessage {String}
   *      A description of the error that occurred.
   */
  _this.onError = function () {
    _this.el.innerHTML = _errorMessage;
    _this.trigger('places-error');
  };

  /**
   * This method is called to render nearby-cities.
   *
   * @param data {Object}
   *    The data for nearby-cities JSON.
   */
  _this.onSuccess = function (data) {
    var markup;

    // Formats nearby places
    markup = data.reduce(function (prev, item/*, idx, arr*/) {
      return prev + _this.formatPlace(item);
    }, '');


    _this.el.innerHTML = '<ul class="no-style">' + markup + '</ul>';
    _this.trigger('places', data);
  };

  /**
   * Called when the model changes. Initially sets a loading message then starts
   * the data fetch process to render the actual content. Relies on browser
   * caches to avoid duplicate HTTP overhead.
   */
   _this.render = function () {
     _this.el.innerHTML = 'Loading content&hellip;';
     _this.fetchData();
   };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = NearbyPlacesView;

},{"core/Formatter":"core/Formatter","core/ProductView":"core/ProductView","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"general/RegionalInfoModule":[function(require,module,exports){
/* global L */
'use strict';

var Terrain = require('leaflet/layer/Terrain'),
    GeoserveNearbyPlacesView = require('general/GeoserveNearbyPlacesView'),
    GeoserveRegionSummaryView = require('general/GeoserveRegionSummaryView'),
    HistoricSeismicity = require('leaflet/layer/HistoricSeismicity'),
    InteractiveMapModule = require('map/InteractiveMapModule'),
    InteractiveMapView = require('map/InteractiveMapView'),
    Module = require('core/Module'),
    NearbyPlacesView = require('general/NearbyPlacesView'),
    Product = require('pdl/Product'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');


var _ID,
    _TITLE,

    _hasContent;


_ID = 'region-info';
_TITLE = 'Regional Information';

_hasContent = function (eventPageModel) {
  var ev;

  ev = eventPageModel.get('event');
  if (ev !== null) {
    // only show this module if there is an event
    return true;
  }

  return false;
};

var _DEFAULTS = {
  formatter: null,
  mapRadius: 5.0
};


/**
 * A module for rendering non-event specific, regional information.
 *
 */
var RegionalInfoModule = function (options) {
  var _this,
      _initialize,

      _mapEl,
      _mapRadius,
      _nearbyPlacesEl,
      _nearbyPlacesView,
      _otherRegionInfoEl,
      _tectonicSummaryEl,
      _tectonicSummaryView;


  _this = Module(options);

  /**
   * Constructor for this module.
   *
   * @params options.formatter {Formatter}
   *     A formatter to use on this module.
   * @param options.mapRadius {Number}
   *     The default map radius in decimal degrees. Note: This value is
   *     not used unless nearby cities fails.
   */
  _initialize = function (options) {
    var el,
        mapLink;

    _this.ID = _ID;
    _this.TITLE = _TITLE;

    options = Util.extend({}, _DEFAULTS, options);

    _mapRadius = options.mapRadius;

    mapLink = [
      '#', InteractiveMapModule.ID, '?',
        encodeURIComponent(InteractiveMapView.HIST_SEIS_OVERLAY), '=true&amp;',
        encodeURIComponent(InteractiveMapView.POPULATION_OVERLAY), '=true&amp;',
        encodeURIComponent(InteractiveMapView.SHAKEMAP_CONTOURS), '=false'
    ].join('');

    el = _this.content;
    el.classList.add('regional-info-module');
    el.innerHTML = [
        '<div class="row right-to-left">',
          '<div class="column one-of-three regions-places">',
            '<div class="regional-info-module-regions"></div>',
            '<div class="regional-info-module-places"></div>',
          '</div>',
          '<div class="column two-of-three">',
            '<a href="', mapLink, '">',
              '<div class="regional-info-module-map"></div>',
              'View Interactive Map',
            '</a>',
          '<div class="regional-info-module-tectonic-summary"></div>',
          '</div>',
        '</div>',
    ].join('');

    _mapEl = el.querySelector('.regional-info-module-map');
    _nearbyPlacesEl = el.querySelector('.regional-info-module-places');
    _otherRegionInfoEl = el.querySelector('.regional-info-module-regions');
    _tectonicSummaryEl = el.querySelector(
        '.regional-info-module-tectonic-summary');
  };


  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }

    if (_nearbyPlacesView) {
      _nearbyPlacesView.off('places', 'onNearbyPlaces', _this);
      _nearbyPlacesView.off('places-error', 'onNearbyPlaces', _this);
      _nearbyPlacesView.destroy();
      _nearbyPlacesView = null;
    }

    if (_tectonicSummaryView) {
      _tectonicSummaryView.destroy();
      _tectonicSummaryView = null;
    }

    if (_this.map) {
      _this.map.remove();
    }

    _mapEl = null;
    _mapRadius = null;
    _nearbyPlacesEl = null;
    _otherRegionInfoEl = null;
    _tectonicSummaryEl = null;


    _initialize = null;
    _this = null;
  }, _this.destroy);


  /**
   * Finds a non-automatic nearby-cities product. If none exists, returns null.
   *
   * @param ev {CatalogEvent}
   *     The event containing nearby-cities products.
   *
   * @param config {Object}
   *     An object containing a SCENARIO_MODE and/or INTERNAL_MODE flag
   *     (boolean) used to determine the full product types.
   *
   * @return {Product}
   *     The most preferred, non-automatic nearby-cities product or null if
   *     none exist.
   */
  _this.getNearbyPlacesProduct = function (ev, config) {
    var nearbyCities,
        origins,
        product;

    product = null;

    nearbyCities = ev.getProducts(Product.getFullType('nearby-cities'), config);
    origins = ev.getProducts(Product.getFullType('origin'), config);

    // Have both nearby-cities and origin products. Look for a nearby-cities
    // product that does not directly correspond to an origin. The resulting
    // list of nearby-cities products will be only those manually sent by RSNs.
    nearbyCities = nearbyCities.filter(function (nearbyCity) {
      var match;

      match = false;
      origins.some(function (origin) {
        match = _this.isAutomaticNearbyCity(nearbyCity, origin);
        return match;
      });

      return !match; // If not matched, then not automatic --> keep product
    });

    // If we have any non-automatic nearby-cities, use the first (most
    // preferred) one.
    if (nearbyCities.length) {
      product = nearbyCities[0];
    }

    return product;
  };

  /**
   * Determines if the given nearbyCity product is an automatic product that
   * was generated by the given origin product.
   *
   * @param nearbyCity {Product}
   *     The nearby city product to check
   * @param origin {Product}
   *     The origin product to check against
   *
   * @return {Boolean}
   *     True if the nearbyCity product was automatically generated by
   *     the origin product.
   */
  _this.isAutomaticNearbyCity = function (nearbyCity, origin) {
    var cityCode,
        citySource,
        originCode;

    citySource = nearbyCity.get('source');
    cityCode = nearbyCity.get('code');
    originCode = origin.get('code');

    // If code matches and source is "us" then product is automatic.
    return (
      citySource === 'us' &&
      cityCode === originCode
    );
  };

  /**
   * Callback method when the {NearbyPlacesView} receives and renders data. This
   * method updates the map extent to potentially include all the nearby
   * places in the given `places` array. A minimum extent is used in
   * case all the nearby places are very nearby such that no map context would
   * be visible.
   *
   * @param places {Array}
   *     An array of places to use as a basis for map context.
   */
  _this.onNearbyPlaces = function (places) {
    var degrees,
        ev,
        km,
        latitude,
        longitude,
        place;

    ev = _this.model.get('event');

    if (ev && _this.map) {
      places = places || [];
      place = places[places.length - 1] || {};
      km = place.distance;

      latitude = ev.getLatitude();
      longitude = ev.getLongitude();

      if (latitude === null || longitude === null) {
        return;
      }

      if (km) {
        degrees = km / 111.2; // not regarding latitude, but close enough
      } else {
        degrees = _mapRadius;
      }

      // Provide some minimum extent for context...
      degrees = Math.max(degrees, 1);

      _this.map.fitBounds([
        [latitude + degrees, longitude + degrees],
        [latitude - degrees, longitude - degrees]
      ]);
    }
  };

  /**
   * Callback method when the AJAX call to geoserve for other regional
   * completes. This method updates the "Administrative Region" and "FE Region"
   * sections of the page.
   *
   * @param data {Object}
   *      An object containing "admin" region information as
   *      returned by Geoserve.
   */
  _this.onOtherRegionComplete = function (data) {
    var admin,
        markup;

    if (!data || !data.admin) {
      return;
    }

    markup = [];
    admin = data.admin.features[0] || {};

    if (admin.properties) {
      admin = admin.properties;
      markup.push([
        '<h3>Administrative Region</h3>',
        '<dl class="no-style regional-info-module-admin vertical">',
          '<dt class="regional-info-module-admin-iso">',
            'ISO',
          '</dt>',
          '<dd>',
            (admin.iso === null) ? '&ndash;' : admin.iso,
          '</dd>',
          '<dt class="regional-info-module-admin-country">',
            'Country',
          '</dt>',
          '<dd>',
            (admin.country === null) ? '&ndash;' : admin.country,
          '</dd>',
          '<dt class="regional-info-module-admin-region">',
            'Region',
          '</dt>',
          '<dd>',
            (admin.region === null) ? '&ndash;' : admin.region,
          '</dd>',
        '</dl>',
      ].join(''));

      _otherRegionInfoEl.innerHTML = markup.join('');
    } else {
      _otherRegionInfoEl.parentNode.removeChild(_otherRegionInfoEl);
    }
  };

  /**
   * Starts the rendering process. Some parts of the page render synchronously
   * while others not so. Rendering is delegated to sub-methods.
   *
   */
  _this.render = function () {
    var ev;

    ev = _this.model.get('event');

    _this.renderHeader(ev);

    _this.renderMap(ev);

    _this.renderOtherRegionInfo(ev);
    _this.renderNearbyPlaces(ev);

    _this.renderTectonicSummary(ev);

    _this.renderFooter(ev);
  };

  /**
   * Render module footer.
   *
   * @param ev {CatalogEvent}
   *     the event.
   */
  _this.renderFooter = function (/*ev*/) {
    _this.footer.innerHTML = ''; // TODO :: Anything?
  };

  /**
   * Render module header.
   *
   * @param ev {CatalogEvent}
   *     the event.
   */
  _this.renderHeader = function (ev) {
    var latitude,
        eventid;

    Util.empty(_this.header);

    if (!ev) {
      return;
    }

    eventid = ev.getEventId();
    latitude = ev.getLatitude();

    // If location latitude extents are + or - 85 degrees show warning
    if (Math.abs(latitude) > 85.0) {
      _this.header.innerHTML = [
        '<p class="alert warning">',
          'Due to the high latitude of this',
          ' event, the location map does not show the correct location.',
          ' To see the actual location we recommend using',
          ' <a href="/earthquakes/feed/v1.0/detail/', eventid, '.kml">',
          'Google Earth KML',
          '</a>.',
        '</p>'
      ].join('');
    } else {
      _this.header.innerHTML = '';
    }
  };

  /**
   * Render map information for the event.
   *
   * @param ev {CatalogEvent}
   *     the event.
   */
  _this.renderMap = function (ev) {
    var latitude,
        longitude;

    if (_this.map) {
      _this.map.remove();
      _this.map = null;
    }

    if (!ev) {
      return;
    }

    latitude = ev.getLatitude();
    longitude = ev.getLongitude();

    if (latitude === null || longitude === null) {
      return;
    }

    _this.map = L.map(_mapEl, {
      attributionControl: false,
      boxZoom: false,
      center: [latitude, longitude],
      zoom: 1,
      doubleClickZoom: false,
      dragging: false,
      fadeAnimation: false,
      keyboard: false,
      markerZoomAnimation: false,
      layers: [
        Terrain({provider: Terrain.NATGEO}),
        HistoricSeismicity(),
        // TODO :: Population density layer ... need tile layer in GIS first
        L.marker([latitude, longitude], {
          zIndexOffset: 99,
          icon: L.icon({
            iconUrl: 'images/star.png',
            iconSize: [32, 32],
            iconAnchor: [16, 16]
          })
        })
      ],
      scrollWheelZoom: false,
      tap: false,
      touchZoom: false,
      zoomAnimation: false,
      zoomControl: false
    });

    L.control.scale({position: 'bottomleft'}).addTo(_this.map);
  };

  /**
   * Render nearby-cities product, or nearby places from geoserve.
   *
   * @param ev {CatalogEvent}
   */
  _this.renderNearbyPlaces = function (ev) {
    var config,
        product;

    if (_nearbyPlacesView) {
      _nearbyPlacesView.off('places', 'onNearbyPlaces', _this);
      _nearbyPlacesView.off('places-error', 'onNearbyPlaces', _this);
      _nearbyPlacesView.destroy();
      _nearbyPlacesView = null;
    }
    Util.empty(_nearbyPlacesEl);

    if (!ev) {
      return;
    }

    config = _this.model.get('config');

    product = _this.getNearbyPlacesProduct(ev, config);
    if (product) {
      _nearbyPlacesView = NearbyPlacesView({
        model: product,
        renderNewLayout: true
      });
    } else {
      product = ev.getPreferredOriginProduct();
      _nearbyPlacesView = GeoserveNearbyPlacesView({
        model: product,
        renderNewLayout: true,
        url: (config ? config.GEOSERVE_WS_URL : '/ws/geoserve/')
      });
    }

    _nearbyPlacesView.on('places', 'onNearbyPlaces', _this);
    _nearbyPlacesView.on('places-error', 'onNearbyPlaces', _this);

    _nearbyPlacesEl.innerHTML = '<h3>Nearby Places</h3>' +
        '<small>' +
          'Direction data (below) indicate the position of the event ' +
          'relative to the place.' +
        '</small>';

    _nearbyPlacesEl.appendChild(_nearbyPlacesView.el);
    _nearbyPlacesView.render();
  };

  /**
   * Fires off a Geoserve request for other regional information. When that
   * request completes, the `onOtherRegionInfoComplete` method is invoked.
   *
   * @param ev {CatalogEvent}
   */
  _this.renderOtherRegionInfo = function (ev) {
    var config,
        latitude,
        longitude;

    Util.empty(_otherRegionInfoEl);

    if (!ev) {
      return;
    }

    config = _this.model.get('config');
    latitude = ev.getLatitude();
    longitude = ev.getLongitude();

    if (latitude === null || longitude === null) {
      return;
    }

    Xhr.ajax({
      url: ((config) ? config.GEOSERVE_WS_URL : '/ws/geoserve/') +
          'regions.json',
      data: {
        latitude: latitude,
        longitude: longitude,
        type: 'admin,fe'
      },
      success: _this.onOtherRegionComplete,
      error: _this.onOtherRegionComplete
    });
  };

  /**
   * Render the tectonic-summary product if available.
   *
   * @param ev {CatalogEvent}
   *     the event.
   */
  _this.renderTectonicSummary = function (ev) {
    var product;

    if (_tectonicSummaryView) {
      _tectonicSummaryView.destroy();
      _tectonicSummaryView = null;
    }

    Util.empty(_tectonicSummaryEl);

    if (!ev) {
      return;
    }

    product = ev.getPreferredOriginProduct();

    if (product) {
      _tectonicSummaryView = GeoserveRegionSummaryView({
        el: _tectonicSummaryEl,
        model: product
      });
      _tectonicSummaryView.render();
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


RegionalInfoModule.ID = _ID;
RegionalInfoModule.TITLE = _TITLE;

RegionalInfoModule.hasContent = _hasContent;


module.exports = RegionalInfoModule;

},{"core/Module":"core/Module","general/GeoserveNearbyPlacesView":"general/GeoserveNearbyPlacesView","general/GeoserveRegionSummaryView":"general/GeoserveRegionSummaryView","general/NearbyPlacesView":"general/NearbyPlacesView","leaflet/layer/HistoricSeismicity":13,"leaflet/layer/Terrain":18,"map/InteractiveMapModule":"map/InteractiveMapModule","map/InteractiveMapView":"map/InteractiveMapView","pdl/Product":"pdl/Product","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"general/RegionalInfoPinView":[function(require,module,exports){
/* global L */
'use strict';


var BasicPinView = require('core/BasicPinView'),
    HistoricSeismicity = require('leaflet/layer/HistoricSeismicity'),
    Terrain = require('leaflet/layer/Terrain'),
    Util = require('util/Util');


var _DEFAULTS = {
  module: {ID: 'region-info', TITLE: 'Regional Information'}
};


var RegionalInfoPinView = function (options) {
  var _this,
      _initialize,

      _mapEl,
      _mapView,
      _marker;

  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  /**
   * Initialize the new module.
   *
   * @param options {Object}
   */
  _initialize = function (/*options*/) {
    var latitude,
        longitude;

    _mapEl = document.createElement('div');
    _mapEl.classList.add('regional-info-map');
    _this.content.appendChild(_mapEl);

    latitude = parseFloat(_this.model.getProperty('latitude'));
    longitude = parseFloat(_this.model.getProperty('longitude'));

    if (isNaN(latitude) || isNaN(longitude)) {
      return;
    }

    _marker = L.marker([latitude, longitude], {
        zIndexOffset: 99,
        icon: L.icon({
          iconUrl: 'images/star.png',
          iconSize: [16, 16],
          iconAnchor: [8, 8]
        })
      });

    _mapView = L.map(_mapEl, {
      attributionControl: false,
      boxZoom: false,
      center: [0, 0],
      zoom: 0,
      doubleClickZoom: false,
      dragging: false,
      fadeAnimation: false,
      keyboard: false,
      markerZoomAnimation: false,
      layers: [
        Terrain({provider: Terrain.NATGEO}),
        HistoricSeismicity(),
        // TODO :: Population density layer ... need tile layer in GIS first
        _marker
      ],
      scrollWheelZoom: false,
      tap: false,
      touchZoom: false,
      zoomAnimation: false,
      zoomControl: false
    });
  };

  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }

    if (_this.map) {
      _this.map.remove();
    }

    _mapEl = null;
    _mapView = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Render map information for the event.
   *
   */
  _this.renderPinContent = function () {
    var latitude,
        longitude;

    if (_mapView) {
      latitude = parseFloat(_this.model.getProperty('latitude'));
      longitude = parseFloat(_this.model.getProperty('longitude'));

      _mapView.invalidateSize();
      // give a 2 degree buffer around center point
      _mapView.fitBounds([
          [latitude - 2.0, longitude - 2.0],
          [latitude + 2.0, longitude + 2.0]
      ]);
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = RegionalInfoPinView;

},{"core/BasicPinView":"core/BasicPinView","leaflet/layer/HistoricSeismicity":13,"leaflet/layer/Terrain":18,"util/Util":"util/Util"}],"general/TsunamiPinView":[function(require,module,exports){
'use strict';


var BasicPinView = require('core/BasicPinView'),
    Util = require('util/Util');


var _DEFAULTS;

_DEFAULTS = {
  badgeImage: 'images/logos/tsunami.jpg',
  module: {ID: '#', TITLE: 'Tsunami'}
};


/**
 * A pin view to link to the current tsunami advisories page.
 *
 */
var TsunamiPinView = function (options) {
  var _this,
      _initialize;


  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  /**
   * Creates a new pin view.
   *
   * @param options.badgeImage {String}
   *     A URL to an image to use.
   */
  _initialize = function (options) {
    _this.el.classList.add('tsunami-pin-view');
    _this.badgeImage = options.badgeImage;
  };


  /**
   * @return {String}
   *     The link to use when clicking on the pin.
   */
  _this.getLinkUrl = function () {
    return 'http://www.tsunami.gov/';
  };

  /**
   * Renders the pin content. Puts a badge with some text into the content.
   *
   */
  _this.renderPinContent = function () {
    _this.content.innerHTML = [
      '<figure class="pin-badge">',
        '<img src="', _this.badgeImage, '" alt="Tsunami Warning Center" ',
            'class="tsunami-pin-logo"/>',
      '</figure>',
      '<small class="disclaimer">',
        'To view any current tsunami advisories for this and other events, ',
        'please visit <a href="http://www.tsunami.gov/">',
        'http://www.tsunami.gov</a>.',
      '</small>'
    ].join('');
  };

  /**
   * Renders the pin footer. Puts a link to NOAA in the footer.
   *
   */
  _this.renderPinFooter = function () {
    _this.footer.innerHTML = [
      '<a href="', _this.getLinkUrl(), '">NOAA</a>'
    ].join('');
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = TsunamiPinView;

},{"core/BasicPinView":"core/BasicPinView","util/Util":"util/Util"}],"impact/ImpactSummaryModule":[function(require,module,exports){
'use strict';

var Attribution = require('core/Attribution'),
    Formatter = require('core/Formatter'),
    SummaryModule = require('core/SummaryModule'),
    Util = require('util/Util'),

    // these modules create a circular dependency,
    // require them in initialize
    DYFIModule,
    PAGERModule,
    ShakeMapModule;


var _ID,
    _TITLE,
    _TYPES;

_ID = 'impact';
_TITLE = 'Impact';
_TYPES = ['dyfi', 'shakemap', 'losspager'];


var _DEFAULTS = {

};


/**
 * Summary module for the impact products.
 *
 */
var ImpactSummaryModule = function (options) {
  var _this,
      _initialize,

      _formatter;


  options = Util.extend({}, _DEFAULTS, options);
  _this = SummaryModule(options);

  /**
   * Constructor. Initializes a new {ImpactSummaryModule}.
   *
   * @param options {Object}
   *     See Module#initialize documentation for details.
   */
  _initialize = function (options) {
    _formatter = options.formatter || Formatter();

    _this.ID = _ID;
    _this.TITLE = _TITLE;

    // these modules create a circular dependency,
    // require them first time initialize is called
    DYFIModule = DYFIModule || require('dyfi/DYFIModule');
    PAGERModule = PAGERModule || require('losspager/PAGERModule');
    ShakeMapModule = ShakeMapModule || require('shakemap/ShakeMapModule');
  };

  /**
   * Frees resources associated with this module.
   *
   */
  _this.destroy = Util.compose(function () {
    _formatter = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Gets the summary for the list of DYFI products.
   *
   * @param products {Array}
   *     An array of DYFI {Product}s to summarize.
   *
   * @return {DocumentFragment}
   *     A fragment containing the summary for the products.
   */
  _this.getDyfiSummary = function (products) {
    return _this.createSummary(products, 'Did You Feel It?', [
        'Catalog',
        '<abbr title="Community Determined Intensity">CDI</abbr>',
        'Responses',
        'Source'
      ], _this.getDyfiRow);
  };

  /**
   * Gets a single summary row for the single given product.
   *
   * @param product {Product}
   *     The product to summarize.
   * @param index {Number}
   *     The relative preferred number for the given product.
   *     0 = most preferred
   *
   * @return {DOMElement}
   *     A TR DOM Element for the row summary.
   */
  _this.getDyfiRow = function (product, index) {
    var preferred,
        row;

    preferred = (index === 0);
    row = _this.createRow(preferred);
    row.innerHTML = [
      '<th scope="row">',
        _this.getCatalogMarkup(DYFIModule, product, preferred),
      '</th>',
      '<td>',
        _formatter.intensity(product.getProperty('maxmmi')),
      '</td>',
      '<td>',
        product.getProperty('num-responses'),
      '</td>',
      '<td>',
        Attribution.getProductAttribution(product),
      '</td>'
    ].join('');

    return row;
  };

  /**
   * Gets the header for the links section for this module.
   *
   * @return {DOMElement}
   *     The header element.
   */
  _this.getLinksHeader = function () {
    var header;

    header = document.createElement('h3');
    header.innerHTML = 'Impact Links';

    return header;
  };

  /**
   * Gets the summary for the list of LossPAGER products.
   *
   * @param products {Array}
   *     An array of LossPAGER {Product}s to summarize.
   *
   * @return {DocumentFragment}
   *     A fragment containing the summary for the products.
   */
  _this.getPagerSummary = function (products) {
    return _this.createSummary(products, 'PAGER', [
        'Catalog',
        'Alert Level',
        'Source'
      ], _this.getPagerRow);
  };

  /**
   * Gets a single summary row for the single given product.
   *
   * @param product {Product}
   *     The product to summarize.
   * @param index {Number}
   *     The relative preferred number for the given product.
   *     0 = most preferred
   *
   * @return {DOMElement}
   *     A TR DOM Element for the row summary.
   */
  _this.getPagerRow = function (product, index) {
    var alertLevel,
        preferred,
        row;

    preferred = (index === 0);
    row = _this.createRow(preferred);

    alertLevel = product.getProperty('alertlevel') || 'pending';

    row.innerHTML = [
      '<th scope="row">',
        _this.getCatalogMarkup(PAGERModule, product, preferred),
      '</th>',
      '<td>',
        '<span class="mmi pager-alertlevel-', alertLevel.toLowerCase(), '">',
          '<strong class="roman">',
            alertLevel.toUpperCase(),
          '</strong>',
        '</span>',
      '</td>',
      '<td>',
        Attribution.getProductAttribution(product),
      '</td>'
    ].join('');

    return row;
  };

  /**
   * Gets the summary for the list of ShakeMap products.
   *
   * @param products {Array}
   *     An array of ShakeMap {Product}s to summarize.
   *
   * @return {DocumentFragment}
   *     A fragment containing the summary for the products.
   */
  _this.getShakeMapSummary = function (products) {
    return _this.createSummary(products, 'ShakeMap', [
        'Catalog',
        '<abbr title="Maximum Modified Mercalli Intensity">MMI</abbr>',
        'Source',
        'Description'
      ], _this.getShakeMapRow);
  };

  /**
   * Gets a single summary row for the single given product.
   *
   * @param product {Product}
   *     The product to summarize.
   * @param index {Number}
   *     The relative preferred number for the given product.
   *     0 = most preferred
   *
   * @return {DOMElement}
   *     A TR DOM Element for the row summary.
   */
  _this.getShakeMapRow = function (product, index) {
    var preferred,
        row;

    preferred = (index === 0);
    row = _this.createRow(preferred);

    row.innerHTML = [
      '<th scope="row">',
        _this.getCatalogMarkup(ShakeMapModule, product, preferred),
      '</th>',
      '<td>',
        _formatter.intensity(product.getProperty('maxmmi')),
      '</td>',
      '<td>',
        Attribution.getProductAttribution(product),
      '</td>',
      '<td>',
        product.getProperty('event-description') || '&ndash;',
      '</td>'
    ].join('');

    return row;
  };

  /**
   * Renders the summary content. Defers to sub-methods.
   *
   */
  _this.render = function () {
    var dyfi,
        fragment,
        header,
        link,
        pager,
        shakemap,
        text;

    fragment = document.createDocumentFragment();

    _this.clearTexts(true);
    _this.clearLinks(true);

    header = _this.getProducts('impact-header');
    dyfi = _this.getProducts('dyfi');
    shakemap = _this.getProducts('shakemap');
    pager = _this.getProducts('losspager');

    text = _this.getProducts('impact-text');
    link = _this.getProducts('impact-link');

    Util.empty(_this.header);
    _this.header.appendChild(_this.getTexts(header));

    fragment.appendChild(_this.getDyfiSummary(dyfi));
    fragment.appendChild(_this.getShakeMapSummary(shakemap));
    fragment.appendChild(_this.getPagerSummary(pager));
    fragment.appendChild(_this.getTexts(text));
    fragment.appendChild(_this.getLinks(link));

    Util.empty(_this.content);
    _this.content.appendChild(fragment);

    _this.footer.innerHTML = '';
  };


  _initialize(options);
  options = null;
  return _this;
};


ImpactSummaryModule.ID = _ID;
ImpactSummaryModule.TITLE = _TITLE;
ImpactSummaryModule.TYPES = _TYPES;


module.exports = ImpactSummaryModule;

},{"core/Attribution":"core/Attribution","core/Formatter":"core/Formatter","core/SummaryModule":"core/SummaryModule","dyfi/DYFIModule":"dyfi/DYFIModule","losspager/PAGERModule":"losspager/PAGERModule","shakemap/ShakeMapModule":"shakemap/ShakeMapModule","util/Util":"util/Util"}],"losspager/PAGERModule":[function(require,module,exports){
'use strict';


var ImpactSummaryModule = require('impact/ImpactSummaryModule'),
    Module = require('core/Module'),
    PagerView = require('losspager/PAGERView'),
    Util = require('util/Util');


var _ID,
    _TITLE,
    _TYPES;

_ID = 'pager';
_TITLE = 'PAGER';
_TYPES = ['losspager'];


var PAGERModule = function (options) {
  var _this,
      _initialize,

      _pagerView;

  options = Util.extend({}, options);
  _this = Module(options);

  _initialize = function () {
    _this.ID = _ID;
    _this.TITLE = _TITLE;
  };


  _this.destroy = Util.compose(function () {
    if (_pagerView) {
      _pagerView.destroy();
    }

    _pagerView = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Renders the details for this module. Defers bulk of header Information
   * to generalized header rendering. Uses {PAGERView} for bulk of content
   * rendering.
   *
   */
  _this.render = function () {
    var downloads,
        product;

    _this.header.innerHTML = '<h3>PAGER</h3>';

    product = _this.getProduct('losspager');
    if (!product) {
      _this.content.innerHTML =
          '<p class="alert warning">No PAGER Found</p>';
    } else {
      _this.header.appendChild(_this.getProductHeader({
        product: product,
        summaryModule: ImpactSummaryModule
      }));

      if (!_pagerView) {
        _pagerView = PagerView({
          el: _this.content,
          model: product
        });
      }

      _pagerView.render();

      downloads = _this.getProductFooter({product: product});
    }

    _this.footer.innerHTML =
      '<h3>For More Information</h3>' +
      '<ul>' +
        '<li>' +
          '<a href="/data/pager/">Scientific Background for PAGER</a>' +
        '</li>' +
      '</ul>';

    if (downloads) {
      _this.footer.appendChild(downloads);
    }
  };


  _initialize();
  options = null;
  return _this;
};


PAGERModule.ID = _ID;
PAGERModule.TITLE = _TITLE;
PAGERModule.TYPES = _TYPES;


module.exports = PAGERModule;

},{"core/Module":"core/Module","impact/ImpactSummaryModule":"impact/ImpactSummaryModule","losspager/PAGERView":"losspager/PAGERView","util/Util":"util/Util"}],"losspager/PAGERPinView":[function(require,module,exports){
'use strict';


var BasicPinView = require('core/BasicPinView'),
    Formatter = require('core/Formatter'),
    PAGERModule = require('losspager/PAGERModule'),
    Util = require('util/Util');

var _DEFAULTS = {
  module: PAGERModule
};


var PAGERPinView = function (options) {
  var _this,
      _initialize,

      _formatter;


  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  _initialize = function (options) {
    _formatter = options.formatter || Formatter();
  };

  /**
   * Render the histograms as PAGERPinView content
   *
   */
  _this.renderPinContent = function () {
    var economic,
        fatality,
        markup;

    markup = [];
    economic = _this.model.getContent('alertecon_smaller.png');
    fatality = _this.model.getContent('alertfatal_smaller.png');

    if (economic) {
      markup.push('<span>Estimated Economic Losses</span>' +
          '<img src="' + economic.get('url') + '" />');
    }

    if (fatality) {
      markup.push('<span>Estimated Fatalities</span>' +
          '<img src="' + fatality.get('url') + '" />');
    }

    _this.content.innerHTML = markup.join('');
  };

  /**
   * Render header for PAGERPinView with impact bubble
   *
   */
  _this.renderPinHeader = Util.compose(_this.renderPinHeader, function () {
    var alertlevel;

    alertlevel = _this.model.getProperty('alertlevel');
    if (alertlevel) {
      _this.header.insertAdjacentHTML('beforeend',
        '<span class="pager-bubble bubble-border pager-alertlevel-' +
            alertlevel + '">' +
          '<strong class="roman">' +
            alertlevel.toUpperCase() +
          '</strong>' +
        '</span>'
      );
    }
  });


  _initialize(options);
  options = null;
  return _this;
};

module.exports = PAGERPinView;

},{"core/BasicPinView":"core/BasicPinView","core/Formatter":"core/Formatter","losspager/PAGERModule":"losspager/PAGERModule","util/Util":"util/Util"}],"losspager/PAGERView":[function(require,module,exports){
'use strict';

var PagerXmlParser = require('losspager/PagerXmlParser'),
    ProductView = require('core/ProductView'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');

var _DEFAULTS;

_DEFAULTS = {
  errorMessage: 'Error loading PAGER view'
};

var _createHistogram = function (container, title, pdf, png, caption) {
  var figure,
      figureMarkup,
      header;

  header = container.appendChild(document.createElement('h3'));
  header.innerHTML = title;
  figureMarkup = [];

  if (pdf && png) {
    figure = container.appendChild(document.createElement('figure'));
    figureMarkup.push('<a href="' + pdf.get('url') + '">');
    figureMarkup.push('<img src="' + png.get('url') + '" alt=""/>');
    figureMarkup.push('</a>');
    if (caption) {
      figureMarkup.push('<figcaption>' + caption + '</figcaption>');
    }
    figure.innerHTML = figureMarkup.join('');
  } else {
    figure = container.appendChild(document.createElement('p'));
    figure.innerHTML = 'Alert information unavailable';
  }

  return container;
};


/**
 * View for losspager product.
 *
 * @param options {object}
 *    all options are passed to ProductView.
 */
var PAGERView = function (options) {
  var _this,
      _initialize,

      _commentEl,
      _economicHistogramEl,
      _errorMessage,
      _exposureCityEl,
      _exposureCityTable,
      _exposureCityToggle,
      _exposureMapEl,
      _exposurePopulationEl,
      _fatalityHistogramEl,
      _pagerInfo,
      _pendingMessageEl;

  _this = ProductView(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options || {});
    _errorMessage = options.errorMessage;
    _this.createScaffolding();
  };

  /**
   * Utility method to create exposure item markup.
   *
   * @param exposure {Object}
   *      The exposure level for which to create an element.
   *
   * @return {String}
   *      The markup.
   */
  _this.createExposureItem = function (exposure) {
    return '<tr>' +
      '<td class="exposure-mmi">' +
        '<span class="roman mmi ' + exposure.css + '">' +
        exposure.label + '</span>' +
      '</td>' +
      '<td class="exposure-perc">' + exposure.perc + '</td>' +
      '<td class="exposure-population">' + exposure.populationDisplay +
          '</td>' +
    '</tr>';
  };

  /**
   * Sets up basic layout of the Pager view and loads everything that can
   * be pulled from the model.
   */
  _this.createScaffolding = function () {
    _this.el.classList.add('losspager');
    _this.el.innerHTML =
      '<div class="alert-wrapper row">' +
        '<div class="column one-of-one pager-pending"></div>' +
        '<div class="column one-of-two fatality-histogram"></div>' +
        '<div class="column one-of-two economic-histogram"></div>' +
      '</div>' +
      '<div class="row pager-content">' +
        '<div class="column one-of-two">' +
          '<h3>Estimated Population Exposure to Earthquake Shaking</h3>' +
          '<div class="exposure-map"></div>' +
          '<div class="exposure-population"></div>' +
        '</div>' +
        '<div class="column one-of-two">' +
          '<div class="comment-wrapper"></div>' +
          '<div class="exposure-city">' +
            '<h3>Selected Cities Exposed</h3>' +
            '<div class="horizontal-scrolling">' +
              '<table class="pager-cities"></table>' +
            '</div>' +
            '<span class="pager-disclaimer">' +
              'From GeoNames Database of Cities with 1,000 or more ' +
              'residents (k = x1,000)' +
            '</span>' +
            '<button class="toggle">Show/Hide Full City List</button>' +
          '</div>' +
        '</div>' +
      '</div>';

    _pendingMessageEl = _this.el.querySelector('.pager-pending');
    _fatalityHistogramEl = _this.el.querySelector('.fatality-histogram');
    _economicHistogramEl = _this.el.querySelector('.economic-histogram');

    _exposureMapEl = _this.el.querySelector('.exposure-map');
    _exposurePopulationEl = _this.el.querySelector('.exposure-population');

    _commentEl = _this.el.querySelector('.comment-wrapper');
    _exposureCityEl = _this.el.querySelector('.exposure-city');
    _exposureCityToggle = _exposureCityEl.querySelector('.toggle');
    _exposureCityTable = _exposureCityEl.querySelector('.pager-cities');

    _exposureCityToggle.addEventListener('click', _this.onCityClick);
  };

  /**
   * Destroy all the things.
   */
  _this.destroy = Util.compose(function () {
    _commentEl = null;
    _economicHistogramEl = null;
    _errorMessage = null;
    _exposureCityEl = null;
    _exposureCityTable = null;
    _exposureCityToggle = null;
    _exposureMapEl = null;
    _exposurePopulationEl = null;
    _fatalityHistogramEl = null;
    _pagerInfo = null;
    _pendingMessageEl = null;


    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Gets the data.
   */
  _this.fetchData = function () {
    var content;

    content = _this.model.getContent('pager.xml');

    if(!content) {
      _this.onError();
      return;
    }

    Xhr.ajax({
      url: content.get('url'),
      success: _this.onSuccess,
      error: _this.onError
    });
  };

  /**
   * Uses correct comments.
   *
   * @param commentType {String};
   *    String can be fatality or economic.
   */
  _this.getAlertComment = function (commentType) {
    var comments,
        economicComment,
        fatalityComment;

    if (_pagerInfo && _pagerInfo.comments) {
      comments = _pagerInfo.comments.impact;
    }

    if (!comments) {
      return '';
    }

    if (comments.length === 2) {
      if (comments[0] !== '') {
        fatalityComment = comments[0];
        economicComment = comments[1];
      } else {
        fatalityComment = comments[1];
      }
    } else {
      fatalityComment = comments[0];
    }

    if (commentType === 'fatality') {
      return fatalityComment;
    } else if (commentType === 'economic') {
      return economicComment;
    }
  };

  /**
   * Event handler for click events on city list toggle control.
   */
  _this.onCityClick = function () {
    _exposureCityTable.classList.toggle('show-additional');
  };

  /**
   * This method is called when there is a problem.
   *
   * @param errorMessage {String}
   *    A description of the error that occurred.
   */
  _this.onError = function () {
    _this.el.innerHTML = _errorMessage;
  };

  /**
   * This method is called when Xhr is successful and calles all methods
   * that render PAGER content.
   */
  _this.onSuccess = function (data, xhr) {
    var xml;

    xml = ((xhr && xhr.responseXML) ? xhr.responseXML : data);

    _pagerInfo = PagerXmlParser.parse(xml);

    _this.renderFatalityHistogram();
    _this.renderEconomicHistogram();
    _this.renderExposures();
    _this.renderCities();
    _this.renderComments();
  };

  /**
   * Called when the model changes. Initially sets a loading message
   */
  _this.render = function () {
    _this.renderPending();

    _this.renderExposureMap();
    _this.fetchData();
  };

  /**
   * Adds the nearby cities list to the page. Cities have a very special sorting
   * algorithm. The first 11 cities are displayed by default and a control is
   * used to show/hide additional cities.
   */
  _this.renderCities = function () {
    var cities,
        city,
        i,
        len,
        markup;

    markup = [];
    cities = _pagerInfo.cities;
    len = cities.length;

    if (len <= 11) {
      _exposureCityEl.style.display = 'none';
    }

    markup.push(
        '<thead>' +
          '<tr>' +
            '<th><abbr title="Modified Mercalli Intensity">MMI</abbr></th>' +
            '<th>City</th>' +
            '<th><abbr title="Population">Pop.</abbr></th>' +
          '</tr>' +
        '</thead>'
    );

    for (i = 0; i < len; i++) {
      city = cities[i];

      markup.push(
        '<tr class="' + ((i>10)?'city-additional':'') +'">' +
          '<td class="cities-mmi">' +
            '<span class="roman mmi ' + city.css + '">' +
              city.roman +
            '</span>' +
          '</td>' +
          '<td>' + city.name + '</td>' +
          '<td class="cities-population">' + city.populationDisplay + '</td>' +
        '</tr>'
      );
    }

    markup.push(
      '</tbody>'
    );

    if (len === 0) {
      _exposureCityEl.parentNode.removeChild(_exposureCityEl);
      _exposureCityEl = null;
    } else {
      _exposureCityTable.innerHTML = markup.join('');
    }
  };

  /**
   * Adds the structure comment and secondary effects comments to the page.
   */
  _this.renderComments = function () {
    var comments = _pagerInfo.comments,
        markup = [];

    if (comments.hasOwnProperty('structure')) {
      markup.push(
        '<div class="wrapper">' +
          '<h3>Structure Information Summary</h3>' +
          '<p>' + comments.structure + '</p>' +
        '</div>'
      );
    }

    if (comments.hasOwnProperty('effects')) {
      markup.push(
        '<div class="wrapper">' +
          '<h3>Secondary Effects</h3>' +
          '<p>' + comments.effects + '</p>' +
        '</div>'
      );
    }

    if (markup.length) {
      _commentEl.innerHTML = markup.join('');
    } else {
      // If no comments, remove this section
      _commentEl.parentNode.removeChild(_commentEl);
      _commentEl = null;
    }
  };

  /**
   * Sends _createHistogram the params needed to render economic
   * histogram.
   */
  _this.renderEconomicHistogram = function () {
      var alertLevel,
          comment,
          pdf,
          png;

      alertLevel = _this.model.getProperty('alertlevel');
      comment = _this.getAlertComment('economic');
      png = _this.model.getContent('alertecon_small.png') ||
          _this.model.getContent('alertecon.png');
      pdf = _this.model.getContent('alertecon.pdf');

      if (alertLevel !== 'pending') {
        return _createHistogram(_economicHistogramEl, 'Estimated Economic Losses',
          pdf, png, comment);
      }
  };

  /**
   * Creates markup for exposure map.
   */
  _this.renderExposureMap = function () {
    var content;

    content = _this.model.getContent('exposure.png');

    if (content) {
      _exposureMapEl.innerHTML = [
        '<figure>',
          '<img src="', content.get('url'), '" alt="Population Exposure Map"/>',
          '<figcaption>',
            'Population per ~1 sq. km. from LandScan',
          '</figcaption>',
        '</figure>'
      ].join('');
    } else {
      _exposureMapEl.innerHTML = '&ndash;';
    }
  };

  /**
   * Adds exposure table info to PAGER view.
   */
  _this.renderExposures = function () {
    var exposure,
        exposures,
        i,
        len,
        markup;

    markup = [];
    exposures = _pagerInfo.exposures;
    len = exposures.length;

    if (len === 0) {
      _exposurePopulationEl.parentNode.removeChild(_exposurePopulationEl);
      _exposurePopulationEl = null;
      return;
    }

    markup.push(
      '<div class="horizontal-scrolling">' +
      '<table class="pager-exposures">' +
        '<thead>' +
          '<tr>' +
            '<th><abbr title="Modified Mercalli Intensity">MMI</abbr></th>' +
            '<th><abbr title="Perceived Shaking">Shaking</abbr></th>' +
            '<th><abbr title="Population Exposure">Pop.</abbr></th>' +
          '</tr>' +
        '</thead>' +
        '<tbody>'
      );

    // generate table row content
    for (i = 0; i < len; i++) {
      exposure = exposures[i];
      markup.push(_this.createExposureItem(exposure));
    }

    markup.push(
        '</tbody>' +
      '</table>' +
      '</div>' +
      '<span class="pager-disclaimer">' +
        '*Estimated exposure only includes population within ' +
        'map area (k = x1,000)' +
        '</br><a href="https://earthquake.usgs.gov/research/shakemap/#intmaps">'+
        'Modified Mercalli Intensity (MMI) scale</a>' +
      '</span>'
    );

    _exposurePopulationEl.innerHTML = markup.join('');
  };

  /**
   * Sends _createHistogram the params needed to render fatality
   * histogram.
   */
  _this.renderFatalityHistogram = function () {
      var alertLevel,
          comment,
          pdf,
          png;

      alertLevel = _this.model.getProperty('alertlevel');
      comment = _this.getAlertComment('fatality');
      png = _this.model.getContent('alertfatal_small.png') ||
          _this.model.getContent('alertfatal.png');
      pdf = _this.model.getContent('alertfatal.pdf');

      if (alertLevel !== 'pending') {
        return _createHistogram(_fatalityHistogramEl, 'Estimated Fatalities',
            pdf, png, comment);
      }
  };

  /**
   * Adds pending markup if alertLevel is equal to pending.
   */
  _this.renderPending = function () {
    var alertLevel;

    alertLevel = _this.model.getProperty('alertlevel');

    if (alertLevel === 'pending') {
      _pendingMessageEl.innerHTML = [
        '<p class="info alert">',
          'Alert information for this event is currently under review and ',
          'will be available soon. Thank you for your patience.',
        '</p>'
      ].join('');
    }
  };

  /**
   * Sets the pagerInfo to be rendered.
   *
   * @param pagerInfo {Object}
   *     The PAGER info to use for rendering.
   */
  _this.setPagerInfo = function (pagerInfo) {
    _pagerInfo = pagerInfo;
  };


  _initialize(options);
  options = null;
  return _this;
};

module.exports = PAGERView;

},{"core/ProductView":"core/ProductView","losspager/PagerXmlParser":"losspager/PagerXmlParser","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"losspager/PagerXmlParser":[function(require,module,exports){
'use strict';

var Util = require('util/Util');


var XML_VERSION_STRING = '1.0'; // pager.xml version number

// Meta info about the exposure levels
var EXPOSURE_INFO = [
  // MMI-0 doesn't exist, but arrays are zero-indexed, this is a placeholder
  {perc:'Not Felt',resist:'none',vuln:'none',roman:'I',label:'I',css:'mmiI'},
  {perc:'Not Felt',resist:'none',vuln:'none',roman:'I',label:'I',css:'mmiI'},

  // MMI-II and MMI-III are combined, need separate placeholders
  {perc:'Weak',resist:'none',vuln:'none',roman:'II',label:'II-III',
      css:'mmiII'},
  {perc:'Weak',resist:'none',vuln:'none',roman:'III',label:'II-III',
      css:'mmiIII'},

  {perc:'Light',resist:'none',vuln:'none',roman:'IV',label:'IV',css:'mmiIV'},
  {perc:'Moderate',resist:'Very Light',vuln:'Light',roman:'V',label:'V',
      css:'mmiV'},
  {perc:'Strong',resist:'Light',vuln:'Moderate',roman:'VI',label:'VI',
      css:'mmiVI'},
  {perc:'Very Strong',resist:'Moderate',vuln:'Moderate/Heavy',roman:'VII',
      label:'VII',css:'mmiVII'},
  {perc:'Severe',resist:'Moderate/Heavy',vuln:'Heavy',roman:'VIII',
      label:'VIII',css:'mmiVIII'},
  {perc:'Violent',resist:'Heavy',vuln:'Very Heavy',roman:'IX',label:'IX',
      css:'mmiIX'},
  {perc:'Extreme',resist:'Very Heavy',vuln:'Very Heavy',roman:'X',label:'X',
      css:'mmiX'},
  {perc:'Extreme',resist:'Very Heavy',vuln:'Very Heavy',roman:'XI',label:'XI',
      css:'mmiX'},
  {perc:'Extreme',resist:'Very Heavy',vuln:'Very Heavy',roman:'XII',
      label:'XII',css:'mmiX'}
];


/**
 * Sorts the cities so the first 11 in the list of the "selected" cities and
 * the remainder of the list is sorted by MMI (decreasing).
 *
 * @param cities {Array}
 *      An array of city information to sort. This array is modified in-place,
 *      so callers of this method should be careful to pass in a copy
 *      (Array.slice) of the array if they need the original to remain
 *      unchanged.
 *
 * @return {Array}
 *      A specially-sorted array of city information.
 */
var _sortCities = function (cities) {
  var sortedCities = [];

  function compareMmi (a, b) {
    return b.mmi - a.mmi;
  }

  function comparePopulation (a, b) {
    return b.population - a.population;
  }

  function compareCapital (a, b) {
    var acap = a.isCapital,
        bcap = b.isCapital;

    if ((acap && bcap) || (!acap && !bcap)) {
      return comparePopulation(a, b);
    } else if (acap) {
      return -1;
    } else if (bcap) {
      return 1;
    }

    return comparePopulation(a, b);
  }

  // Sort by largest MMI first
  cities.sort(compareMmi);
  // Take up to first 6-largest MMI
  Array.prototype.push.apply(sortedCities, cities.splice(0, 6));

  // Sort by capital/population
  cities.sort(compareCapital);
  // Take up to first 5-capitals
  while (cities.length && cities[0].isCapital && sortedCities.length < 11) {
    sortedCities.push(cities.splice(0, 1)[0]);
  }

  // Sort by population
  cities.sort(comparePopulation);
  // Fill in any remaining selections based on population
  while (cities.length && sortedCities.length < 11) {
    sortedCities.push(cities.splice(0, 1)[0]);
  }

  // Sort each part by MMI and combine to a single list
  return sortedCities.sort(compareMmi).concat(cities.sort(compareMmi));
};

/**
 * Injects thousands number separator between each segment.
 *
 * @param number {Integer}
 *      The number to format.
 * @param separator {String} Optional.
 *      The string to use as a thousands separator. Default ','.
 *
 * @return {String}
 *      The number with thousands segments separator by separator.
 */
var _injectNumberSeparator = function (number, separator) {
  separator = separator || ',';
  return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, separator);
};

/**
 * Format the population for the city list display.
 *
 * @param population {Integer}
 *      The population value to format.
 *
 * @return {String}
 *      A formatted display value representing the population.
 */
var _formatCityPopulation = function (population) {
  if (population < 1000) {
    return '&lt;1 k';
  } else {
    return _injectNumberSeparator(Math.round(population / 1000)) + ' k';
  }
};

/**
 * Format population for the exposure table display.
 *
 * @param population {Integer}
 *      The population value to format.
 * @param incomplete {Boolean} Optional. Default: false
 *      True if the exposure contour corresponding to this population value
 *      extends beyond the mapped boundary, false otherwise.
 *
 * @return {String}
 *      A formated display value representing the population.
 */
var _formatExposurePopulation = function (population, incomplete) {
  var display = _injectNumberSeparator(Math.round(population / 1000)) + ' k';

  if (incomplete) {
    if (population === 0) {
        display = '--';
    }

    display += '*';
  }

  return display;
};


// ----------------------------------------------------------------------
// Parsing functions for each component piece of data
// ----------------------------------------------------------------------

/**
 * @param xml {Document}
 *      The XML document from which to parse alert information.
 *
 * @return {Object}
 *      An object of parsed alert information. Keyed by alert type.
 */
var _parseAlerts = function (xml) {
  var alert,
      type,
      bins,
      binIter,
      numBins,
      bin,
      alerts = xml.querySelectorAll('pager > alerts > alert'),
      alertIter = 0,
      numAlerts = alerts.length,
      data = {};

  for (; alertIter < numAlerts; alertIter++) {
    alert = alerts[alertIter];
    type = alert.getAttribute('type');

    data[alert.getAttribute('type')] = {
      level: alert.getAttribute('level'),
      units: alert.getAttribute('units'),
      bins: []
    };

    bins = alert.querySelectorAll('bin');
    for (binIter = 0, numBins = bins.length; binIter < numBins; binIter++) {
      bin = bins[binIter];

      data[type].bins.push({
        min: bin.getAttribute('min'),
        max: bin.getAttribute('max'),
        prob: bin.getAttribute('probability'),
        color: bin.getAttribute('color')
      });
    }
  }

  return data;
};

/**
 * @param xml {Document}
 *      The XML document from which to parse exposure information.
 *
 * @return {Array}
 *      An array of parsed exposure information.
 */
var _parseExposures = function (xml) {
  var exposure,
      binMin,
      binMax,
      population,
      onMap,
      sumPop,
      sumOnMap,
      exposures = xml.querySelectorAll('pager > exposure'),
      exposureIter = 0,
      numExposures = exposures.length,
      data = [];

  for (; exposureIter < numExposures; exposureIter++) {
    exposure = exposures[exposureIter];

    binMin = parseFloat(exposure.getAttribute('dmin'));
    binMax = parseFloat(exposure.getAttribute('dmax'));
    population = parseInt(exposure.getAttribute('exposure'), 10);
    onMap = (exposure.getAttribute('rangeInsideMap') === '1');

    data.push(Util.extend({},
      EXPOSURE_INFO[Math.round(binMin)],
      {
        min: binMin,
        max: binMax,
        population: population,
        onMap: onMap,
        populationDisplay: _formatExposurePopulation(population, !onMap),
      }
    ));
  }

  // Generally not required. If it becomes a problem, this will sort it out.
  data.sort(function (a, b) {
    return a.min - b.min;
  });

  // Combine bins II-III together
  if (data[1] && data[2]) {
    sumPop = data[1].population + data[2].population;
    sumOnMap = (data[1].onMap && data[2].onMap);

    data.splice(1, 2, {
      min: data[1].min,
      max: data[2].max,
      population: sumPop,
      onMap: sumOnMap,
      populationDisplay: _formatExposurePopulation(sumPop, !sumOnMap),
      perc:data[1].perc,
      resist:data[1].resist,
      vuln:data[1].vuln,
      label:data[1].label,
      css:data[1].css
    });
  }

  return data;
};

/**
 * @param xml {Document}
 *      The XML document from which to parse city information.
 *
 * @return {Array}
 *      An array of parsed city information.
 */
var _parseCities = function (xml) {
  var city,
      population,
      mmi,
      cities = xml.querySelectorAll('pager > city'),
      cityIter = 0,
      numCities = cities.length,
      data = [];

  for (; cityIter < numCities; cityIter++) {
    city = cities[cityIter];
    population = parseInt(city.getAttribute('population'), 10);
    mmi = parseFloat(city.getAttribute('mmi'));

    data.push(Util.extend({},
      EXPOSURE_INFO[Math.round(mmi)],
      {
        name: city.getAttribute('name'),
        latitude: parseFloat(city.getAttribute('lat')),
        longitude: parseFloat(city.getAttribute('lon')),
        population: population,
        populationDisplay: _formatCityPopulation(population),
        mmi: mmi,
        isCapital: (city.getAttribute('iscapital') === '1')
      }
    ));
  }

  // Sort so first 10 cities are "selected" cities
  data = _sortCities(data);

  return data;
};

/**
 * @param xml {Document}
 *      The XML document from which to parse comment information.
 *
 * @return {Object}
 *      An object containing parsed comment information. Keyed by comment
 *      type.
 */
var _parseComments = function (xml) {
  var comment,
      data = {};

  // TODO :: Check old comment parsing and make sure it remains consistent
  comment = xml.querySelectorAll('pager > structcomment');
  if (comment && comment.length) {
    data.structure = comment[0].textContent.trim();
  }

  comment = xml.querySelectorAll('pager > secondary_effects');
  if (comment && comment.length) {
    comment = comment[0].textContent.trim();
    if (comment !== '') {
      data.effects = comment;
    }
  }

  // TODO :: This is a cluster. PAGER team should sort out a better way to
  //         send comments of this nature.
  comment = xml.querySelectorAll('pager > impact_comment');
  if (comment && comment.length) {
    data.impact = comment[0].textContent.trim().split('#').reverse();
    if (data.impact[0].indexOf('economic') !== -1) {
      data.impact.reverse();
    }
  }

  return data;
};


// ----------------------------------------------------------------------
// Return the parser object with API methods
// ----------------------------------------------------------------------

var PagerXmlParser = {
  /**
   * @return {String}
   *      The version identifier for which this parser is compatible.
   */
  version: function () {
    return XML_VERSION_STRING;
  },

  /**
   * Parses an XML string/object into an object with PAGER information.
   *
   * @return {Object}
   *      An object containing PAGER information.
   */
  parse: function (xml) {
    var domParser;

    if (typeof xml === 'string') {
      domParser = new DOMParser();
      xml = domParser.parseFromString(xml, 'application/xml');
    }

    return {
      alerts: _parseAlerts(xml),
      exposures: _parseExposures(xml),
      cities: _parseCities(xml),
      comments: _parseComments(xml)
    };
  }
};


module.exports = PagerXmlParser;

},{"util/Util":"util/Util"}],"map/ContoursLayer":[function(require,module,exports){
/* global L */
'use strict';


var Formatter = require('core/Formatter'),
    Util = require('util/Util');

require('leaflet/layer/AsynchronousGeoJson');


var _DEFAULTS,
    _FORMATTER;

_DEFAULTS = {
  clickable: true,

  style: function (feature) {
    return {
      color: feature.properties.color,
      weight: feature.properties.weight,
      opacity: 1.0
    };
  },

  onEachFeature: function (feature, layer) {
    var roman;

    roman = _FORMATTER.mmi(feature.properties.value);

    if (this.clickable) {
      layer.bindPopup(
          '<div class="roman station-summary-intensity mmi' + roman + '">' +
            roman +
            '<br><abbr title="Modified Mercalli Intensity">mmi</abbr>' +
          '</div>');
    }
  }
};

_FORMATTER = Formatter();


var ContoursLayer = L.AsynchronousGeoJson.extend({

  initialize: function (options) {
    L.AsynchronousGeoJson.prototype.initialize.call(this,
        Util.extend({}, _DEFAULTS, options));
  }

});


L.ContoursLayer = ContoursLayer;

L.contoursLayer = function (options) {
  return new ContoursLayer(options);
};


module.exports = L.contoursLayer;

},{"core/Formatter":"core/Formatter","leaflet/layer/AsynchronousGeoJson":11,"util/Util":"util/Util"}],"map/DyfiUtmLayer":[function(require,module,exports){
/* global L */
'use strict';

var Formatter = require('core/Formatter'),
    Util = require('util/Util');

require('leaflet/layer/AsynchronousGeoJson');


var _DEFAULT_FORMATTER = Formatter();

var _DEFAULT_OPTIONS = {
  style: function (feature) {
    var color = _DEFAULT_FORMATTER.mmiColor(feature.properties.cdi);
    return {
      color: '#999',
      fillColor: color,
      fillOpacity: 0.9,
      opacity: 0.9,
      weight: 0.5
    };
  },

  onEachFeature: function (feature, layer) {
    layer.bindPopup(this.formatPopup(feature));
  },

  formatPopup: function (feature) {
    var mmi,
        p;

    p = feature.properties;
    mmi = _DEFAULT_FORMATTER.mmi(p.cdi);

    return '<div class="dyfi-popup">' +
      '<h2 class="dyfi-name">' + p.name + '</h2>' +
      '<ul class="dyfi-summary">' +
        '<li class="dyfi-summary-intensity roman mmi' + mmi + '">' +
          mmi +
          '<br/><abbr title="Community Determined Intensity">cdi</abbr>' +
        '</li>' +
        '<li class="dyfi-summary-nresp">' +
          _DEFAULT_FORMATTER.number(p.nresp, 0, '&ndash;') +
          '<br/><abbr title="Number of Responses">responses</abbr>' +
        '</li>' +
        '<li class="dyfi-summary-distance">' +
          _DEFAULT_FORMATTER.number(p.dist, 0, '&ndash;', 'km') +
          '<br/><abbr title="Distance from Hypocenter">distance</abbr>' +
        '</li>' +
      '</ul>' +
    '</div>';
  }
};


var DyfiUtmLayer = L.AsynchronousGeoJson.extend({

  initialize: function (options) {
    L.AsynchronousGeoJson.prototype.initialize.call(this,
        Util.extend({}, _DEFAULT_OPTIONS, options));
  }

});


L.DyfiUtmLayer = DyfiUtmLayer;

L.dyfiUtmLayer = function (options) {
  return new DyfiUtmLayer(options);
};


module.exports = L.dyfiUtmLayer;

},{"core/Formatter":"core/Formatter","leaflet/layer/AsynchronousGeoJson":11,"util/Util":"util/Util"}],"map/InteractiveMapModule":[function(require,module,exports){
'use strict';


var Events = require('util/Events'),
    InteractiveMapView = require('map/InteractiveMapView'),
    ModalView = require('mvc/ModalView'),
    Module = require('core/Module'),
    Util = require('util/Util');


var _DEFAULTS,
    _ID,
    _TITLE,
    _TYPES;

_ID = 'map';
_TITLE = 'Interactive Map';
_TYPES = ['origin'];

_DEFAULTS = {

};


/**
 * The module handles interaction between the InteractiveMapView and the larger
 * EventPage framework. There are two top-level components to this module:
 *
 * The first is the background, in-page, content. This content is very simple
 * and only used as a fallback to allow navigation or to re-open the modal view.
 *
 * The second top-level component is the modal view itself. This view provides
 * the container into which the map itself will be rendered.
 *
 * Closing the map will navigate the page to either (1) the previous EventPage
 * module that the user was viewing or (2) the default EventPage module in the
 * case that the user was linked directly into the map.
 *
 * @param options {Object}
 *      See documentation on _initialize method for details.
 */
var InteractiveMapModule = function (options) {
  var _this,
      _initialize,

      _closeButton,
      _mapView,
      _modal,
      _scenarioBadge;


  options = Util.extend({}, _DEFAULTS, options);
  _this = Module(options);

  /**
   * Initialize the new module.
   *
   * @param options {Object}
   */
  _initialize = function (options) {
    var config;

    _this.ID = _ID;
    _this.TITLE = _TITLE;
    _this.TYPES = _TYPES;

    config = _this.model.get('config');

    _this.content.addEventListener('click', _this.onContentClick);

    _mapView = InteractiveMapView({
      formatter: options.formatter,
      model: _this.model,
      module: _this
    });

    _modal = ModalView(_mapView.el, {
      buttons: null, // no footer
      title: null    // no header
    });

    _modal.el.classList.add('modal-map');
    _this.appendCloseButton();

    if (config && config.SCENARIO_MODE === true) {
      _this.appendScenarioBadge();
    }
  };


  _this.appendCloseButton = function () {
    if (!_closeButton) {
      _closeButton = _modal.el.appendChild(document.createElement('button'));
      _closeButton.classList.add('cancel');
      _closeButton.classList.add('modal-close');
      _closeButton.innerHTML = 'Close Map';

      _closeButton.addEventListener('click', _this.onCloseButtonClick);
    }
  };

  _this.appendScenarioBadge = function () {
    if (!_scenarioBadge) {
      _scenarioBadge = _modal.el.appendChild(document.createElement('div'));
      _scenarioBadge.classList.add('scenario-badge');
      _scenarioBadge.classList.add('leaflet-control');
      _scenarioBadge.innerHTML = 'Scenario';
    }
  };

  /**
   * Free resources associated with this Module and then call parent
   * destroy method as well.
   *
   */
  _this.destroy = Util.compose(function () {
    _this.content.removeEventListener('click', _this.onContentClick);
    _closeButton.removeEventListener('click', _this.onCloseButtonClick);

    _mapView.destroy();
    _modal.hide();
    _modal.destroy();

    _mapView = null;
    _modal = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.onCloseButtonClick = function () {
    Events.trigger('back');
  };

  /**
   * Delegatede event listener to capture clicks on the button and show
   * the modal view. This is a fallback so user can get back to map if
   * they somehow end up viewing the background content of this module.
   *
   */
  _this.onContentClick = function (ev) {
    if (ev.target && ev.target.classList.contains('show-map')) {
      _this.showMap();
    }
  };

  /**
   * Renders the background information and then shows the map.
   *
   */
  _this.render = function () {
    // Do basic background rendering stuff. This will largely go unseen.
    _this.header.innerHTML = '<a class="back-to-summary-link" ' +
        'href="#">Back to General Summary</a>';
    _this.content.innerHTML = '<button class="show-map">Show Map</button>';
    _this.footer.innerHTML = '';

    _this.showMap();
  };

  /**
   * Shows the map and notifies the sub-view that its content is in the DOM
   * so the view can invalidate dimensions etc...
   *
   */
  _this.showMap = function () {
    _modal.show();
    _mapView.onDomReady();
  };


  _initialize(options);
  options = null;
  return _this;
};


InteractiveMapModule.ID = _ID;
InteractiveMapModule.TITLE = _TITLE;
InteractiveMapModule.TYPES = _TYPES;


module.exports = InteractiveMapModule;

},{"core/Module":"core/Module","map/InteractiveMapView":"map/InteractiveMapView","mvc/ModalView":37,"util/Events":"util/Events","util/Util":"util/Util"}],"map/InteractiveMapPinView":[function(require,module,exports){
'use strict';


var Attribution = require('core/Attribution'),
    BasicPinView = require('core/BasicPinView'),
    InteractiveMapView = require('map/InteractiveMapView'),
    Product = require('pdl/Product'),
    Util = require('util/Util');


var _DEFAULTS = {
  module: {ID: 'map', TITLE: 'Interactive Map'}
};


var MapPinView = function (options) {
  var _this,
      _initialize,

      _mapView;

  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  /**
   * Initialize the new module.
   *
   * @param options {Object}
   */
  _initialize = function (/*options*/) {
    var el,
        ev;

    el = document.createElement('div');
    el.classList.add('locationview-map');

    ev = _this.model.get('event');

    if (ev) {
      _this.product = ev.getPreferredOriginProduct();
    }

    if (!_this.product) {
      _this.product = Product();
    }

    _this.content.appendChild(el);

    _mapView = InteractiveMapView({
      el: el,
      interactive: false,
      markerSize: 16,
      model: _this.model,
      scaleControl: false
    });
  };

  _this.destroy = Util.compose(function () {
    if (_this === null) {
      return;
    }
    _mapView.destroy();
    _this = null;
  }, _this.destroy);

  _this.renderPinContent = function () {
    _mapView.onDomReady();
    _mapView.render();
  };

  /**
   * Override base function.
   * This pin doesn't have a contributor.
   */
  _this.renderPinFooter = function () {

    _this.footer.innerHTML = 'Contributed by ' +
        Attribution.getProductAttribution(_this.product);
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = MapPinView;

},{"core/Attribution":"core/Attribution","core/BasicPinView":"core/BasicPinView","map/InteractiveMapView":"map/InteractiveMapView","pdl/Product":"pdl/Product","util/Util":"util/Util"}],"map/InteractiveMapView":[function(require,module,exports){
/* global L */
'use strict';


var ContoursLayer = require('map/ContoursLayer'),
    DyfiUtmLayer = require('map/DyfiUtmLayer'),
    Grayscale = require('leaflet/layer/Grayscale'),
    Terrain = require('leaflet/layer/Terrain'),
    Formatter = require('core/Formatter'),
    HazDevLayers = require('leaflet/control/HazDevLayers'),
    HistoricSeismicity = require('leaflet/layer/HistoricSeismicity'),
    Module = require('core/Module'),
    MousePosition = require('leaflet/control/MousePosition'),
    Satellite = require('leaflet/layer/Satellite'),
    Street = require('leaflet/layer/Street'),
    Product = require('pdl/Product'),
    ShakeMapStationLayer = require('map/ShakeMapStationLayer'),
    TectonicPlates = require('leaflet/layer/TectonicPlates'),
    UsFault = require('leaflet/layer/UsFault'),
    Util = require('util/Util'),
    View = require('mvc/View');


// Display names of overlays
var _DYFI_10K_OVERLAY = 'DYFI Responses 10 km',
    _DYFI_1K_OVERLAY = 'DYFI Responses 1 km',
    _DYFI_DEFAULT_OVERLAY = 'DYFI Responses',
    _EPICENTER_OVERLAY = 'Epicenter',
    _FAULTS_OVERLAY = 'U.S. Faults',
    _HIST_SEIS_OVERLAY = 'Historical Seismicity',
    _PLATES_OVERLAY = 'Tectonic Plates',
    _POPULATION_OVERLAY = 'Population Density',
    _SHAKEMAP_CONTOURS = 'ShakeMap MMI Contours',
    _SHAKEMAP_STATIONS = 'ShakeMap Stations';

var _DEFAULTS = {
  config: {
    baseLayer: 'Terrain'
  },
  interactive: true,
  markerSize: 32
};

// Set up what we want enabled by default
_DEFAULTS.config[_EPICENTER_OVERLAY] = 'true';
_DEFAULTS.config[_PLATES_OVERLAY] = 'true';
_DEFAULTS.config[_FAULTS_OVERLAY] = 'true';
_DEFAULTS.config[_SHAKEMAP_CONTOURS] = 'true';


/**
 * Checks if the given latitude/longitude represent a location within the U.S.
 * where the U.S. fault layer has data (so some regions are not considered).
 *
 * @param latitude {Number}
 *     Decimal degrees latitude.
 * @param longitude {Number}
 *     Decimal degrees longitude.
 *
 * @return {Boolean}
 *     True if the location is within the considered U.S., false otherwise.
 */
var __inUs = function (latitude, longitude) {
  // Note :: Only considering U.S. regions that have fault layer data...
  return (
    ( // Contemrinous U.S.
      latitude <= 50.0 && latitude >= 24.6 &&
      longitude <= 65.0 && longitude >= -125.0
    ) ||
    ( // Hawaii
      latitude <= 23.0 && latitude >= 23.0 &&
      longitude <= -154.0 && longitude >= -161.0
    )
  );
};


/**
 * This class is a view that renders an interactive map in a container. It
 * expects a model that is an instance of the EventPageModel (currently an
 * just a generalized {Model} instance with "event" and "config" properties).
 *
 * @param options {Object}
 *     See _initialize method documentation for details.
 */
var InteractiveMapView = function (options) {
  var _this,
      _initialize,

      _baseLayers,
      _defaultConfig,
      _formatter,
      _interactive,
      _layersControl,
      _map,
      _markerSize,
      _module,
      _overlays,
      _positionControl,
      _scaleControl;


  options = Util.extend({}, _DEFAULTS, options);
  _this = View(options);

  /**
   * Constructor. Initializes a new InteractiveMapView.
   *
   * @param options {Object}
   *     Configuration options. Specifically...
   * @param options.model {Model}
   *     The EventPageModel for this view to render.
   * @param options.formatter {Formatter}
   *     The formatting utility class to use when rendering.
   * @param options.scaleControl {boolean}
   *    The scale
   */
  _initialize = function (options) {
    _this.el.classList.add('interactive-map-view');

    _defaultConfig = Util.extend({}, _DEFAULTS.config);
    _module = options.module || Module();

    _formatter = options.formatter || Formatter();
    _interactive = options.interactive;
    _markerSize = options.markerSize;

    _baseLayers = {};
    _overlays = {};

    _map = L.map(_this.el, {
      attributionControl: false,
      boxZoom: _interactive,
      center: [0, 0],
      doubleClickZoom: _interactive,
      dragging: _interactive,
      scrollWheelZoom: _interactive,
      tap: _interactive,
      touchZoom: _interactive,
      zoom: 0,
      zoomAnimation: true,
      zoomControl: _interactive
    });

    // Create the control here, the "getAvailable*" methods determine what
    // is included in this control...
    _layersControl = HazDevLayers(
      _this.getAvailableBaseLayers(),
      {}
    );
    if (_interactive) {
      _map.addControl(_layersControl);
    }

    if (!Util.isMobile()) {
      if (_interactive) {
        _positionControl = MousePosition();
        _map.addControl(_positionControl);
      }

      if (options.scaleControl !== false) {
        _scaleControl = L.control.scale({position: 'bottomleft'});
        _map.addControl(_scaleControl);
      }
    }
  };

  /**
   * Creates the appropriate DYFI overlays based on the given product.
   * Adds each overlay to the instance _overlays mapping.
   *
   * @param dyfi {Product}
   *     The DYFI product for which to create overlays. If null, no overlays
   *     are added.
   *
   * @return {Object}
   *     The _overlays instance variable, as augmented with new layers.
   */
  _this.addDyfiOverlays = function (dyfi) {
    var content;

    if (!dyfi) {
      return;
    }

    // 10k responses aggregation
    content = dyfi.getContent('dyfi_geo_10km.geojson');
    if (content) {
      _overlays[_DYFI_10K_OVERLAY] = DyfiUtmLayer({
        url: content.get('url')
      });
    }

    // 1km responses aggregation
    content = dyfi.getContent('dyfi_geo_1km.geojson');
    if (content) {
      _overlays[_DYFI_1K_OVERLAY] = DyfiUtmLayer({
        url: content.get('url')
      });
    }

    // Fallback responses aggregation
    if (!_overlays.hasOwnProperty(_DYFI_10K_OVERLAY) &&
        !_overlays.hasOwnProperty(_DYFI_1K_OVERLAY)) {

      content = dyfi.getContent('dyfi_geo.geojson');
      if (content) {
        _overlays[_DYFI_DEFAULT_OVERLAY] = DyfiUtmLayer({
          url: content.get('url')
        });
      }
    }

    return _overlays;
  };

  /**
   * Creates the appropriate ShakeMap overlays based on the given product.
   * Adds each overlay to the instance _overlays mapping.
   *
   * @param shakemap {Product}
   *     The ShakeMap product for which to create overlays. If null, no overlays
   *     are added.
   *
   * @return {Object}
   *     The _overlays instance variable, as augmented with new layers.
   */
  _this.addShakeMapOverlays = function (shakemap) {
    var content;

    if (!shakemap) {
      return;
    }

    content = shakemap.getContent('download/cont_mi.json');
    if (content) {
      _overlays[_SHAKEMAP_CONTOURS] = ContoursLayer({
        clickable: _interactive,
        url: content.get('url')
      });
    }

    content = shakemap.getContent('download/stationlist.json');
    if (content) {
      _overlays[_SHAKEMAP_STATIONS] = ShakeMapStationLayer(
          content.get('url'));
    }

    return _overlays;
  };

  /**
   * Creates a marker to indicate the epicenter at the given latitude and
   * longitude coordinates. Includes the magnitude in the tooltip text.
   *
   * @param latitude {Number}
   *     Decimal degrees latitude.
   * @param longitude {Number}
   *     Decimal degrees longitude.
   * @param magnitude {Number}
   *     Magnitude of event.
   *
   * @return {L.Marker}
   *     A marker centered on the given latitude/longitude coordinate with
   *     tooltip text including the magnitude.
   */
  _this.createEpicenterMarker = function (latitude, longitude, magnitude) {
    var marker;

    marker = L.marker([latitude, longitude], {
      zIndexOffset: 99,
      icon: L.icon({
        iconUrl: 'images/star.png',
        iconSize: [_markerSize, _markerSize],
        iconAnchor: [_markerSize/2, _markerSize/2]
      })
    });

    if (_interactive) {
      marker.bindPopup([
        'Epicenter M', _formatter.magnitude(magnitude),
        '<br/>',
        _formatter.location(latitude, longitude)
      ].join(''));
    }

    return marker;
  };

  /**
   * Free resources associated with this view and then call default
   * View.destroy.
   *
   */
  _this.destroy = Util.compose(function () {
    if (_positionControl) {
      _positionControl.removeFrom(_map);
    }

    if (_scaleControl) {
      _scaleControl.removeFrom(_map);
    }

    _map.remove(); // destroy map and free resources


    _baseLayers = null;
    _defaultConfig = null;
    _formatter = null;
    _layersControl = null;
    _map = null;
    _markerSize = null;
    _module = null;
    _overlays = null;
    _positionControl = null;
    _scaleControl = null;


    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Sets the instance `_baseLayers` object to a map of LayerName => Layer for
   * each supported base layer.
   *
   * @return {Object}
   *     The updated _baseLayers object.
   */
  _this.getAvailableBaseLayers = function () {
    _baseLayers = {
      'Terrain': Terrain({provider: Terrain.NATGEO}),
      'Grayscale': Grayscale(),
      'Street': Street(),
      'Satellite': Satellite()
    };

    return _baseLayers;
  };

  /**
   * Sets the instance `_overlays` object to a map of LayerName => Layer for
   * each supported overlay layer.
   *
   * @return {Object}
   *     The updated _overlays object.
   */
  _this.getAvailableOverlays = function () {
    var catalogEvent,
        eventLatitude,
        eventLongitude;

    _overlays = {};

    catalogEvent = _this.model.get('event');

    if (!catalogEvent) {
      // No event, no overlays to create
      return _overlays;
    }

    eventLatitude = catalogEvent.getLatitude();
    eventLongitude = catalogEvent.getLongitude();

    if (eventLatitude !== null && eventLongitude !== null) {
      // Put a star over the epicenter
      _overlays[_EPICENTER_OVERLAY] = _this.createEpicenterMarker(eventLatitude,
          eventLongitude, catalogEvent.getMagnitude());
    }

    // Always include tectonic plates
    _overlays[_PLATES_OVERLAY] = TectonicPlates();

    // Include faults layer if in U.S.
    if (__inUs(eventLatitude, eventLongitude)) {
      _overlays[_FAULTS_OVERLAY] = UsFault();
    }

    // Historic seismicity
    _overlays[_HIST_SEIS_OVERLAY] = HistoricSeismicity();

    // Calling _module.getProduct will get the current product in the
    // case that a specific ?source=&code= were requested...

    // DYFI
    _this.getProductOverlays('dyfi', _this.addDyfiOverlays);

    // ShakeMap
    _this.getProductOverlays('shakemap', _this.addShakeMapOverlays);

    return _overlays;
  };

  _this.getProductOverlays = function (type, callback) {
    var catalogEvent,
        codeKey,
        config,
        product,
        sourceKey;

    catalogEvent = _this.model.get('event');

    if (!catalogEvent) {
      return;
    }

    config = Util.extend({}, _defaultConfig, _this.model.get('map'));
    sourceKey = type + 'Source';
    codeKey = type + 'Code';
    type = Product.getFullType(type, _module.model.get('config'));

    if (config.hasOwnProperty(sourceKey) &&
        config.hasOwnProperty(codeKey)) {
      product = catalogEvent.getProductById(type, config[sourceKey],
          config[codeKey]);
    } else {
      product = catalogEvent.getPreferredProduct(type);
    }

    if (product) {
      callback(product);
    }
  };
  /**
   * Called to notify the view that it's element is now in the DOM so
   * things like dimensions can be inspected etc...
   *
   */
  _this.onDomReady = function () {
    if (_map && _map.getContainer() && _map.getContainer().parentNode) {
      _map.invalidateSize();
    }
  };

  /**
   * Renders the map.
   *
   */
  _this.render = function () {
    var catalogEvent,
        config,
        latitude,
        longitude;

    config = Util.extend({}, _defaultConfig, _this.model.get('map'));

    Object.keys(_baseLayers).forEach(function (layerName) {
      var layer;

      layer = _baseLayers[layerName];

      if (layer.map) {
        layer.removeFrom(_map);
      }

      if (layerName === config.baseLayer) {
        layer.addTo(_map);
      }
    });

    _this.updateOverlays(config);


    // Zoom to a two-degree map centered on event
    catalogEvent = _this.model.get('event');
    if (catalogEvent) {
      latitude = catalogEvent.getLatitude();
      longitude = catalogEvent.getLongitude();
      _map.fitBounds([[latitude + 2.0, longitude + 2.0],
          [latitude - 2.0, longitude - 2.0]]);
    }
  };

  _this.updateOverlays = function (config) {
    // Clear existing overlays (if any)
    Object.keys(_overlays).forEach(function (layerName) {
      var layer;

      layer = _overlays[layerName];

      if (layer._map) {
        _map.removeLayer(layer);
      }

      if (_layersControl && _layersControl._layers.hasOwnProperty(layerName)) {
        _layersControl.removeLayer(layer);
      }
    });

    _this.getAvailableOverlays();

    // Now add each overlay to control and potentially add to map if so
    // configured
    Object.keys(_overlays).forEach(function (layerName) {
      var layer;

      layer = _overlays[layerName];

      if (_layersControl) {
        _layersControl.addOverlay(layer, layerName);
      }

      if (config[layerName] === 'true') {
        layer.addTo(_map);
      }
    });
  };


  _initialize(options);
  options = null;
  return _this;
};

// Expose these so others know the layers available
InteractiveMapView.DYFI_10K_OVERLAY = _DYFI_10K_OVERLAY;
InteractiveMapView.DYFI_1K_OVERLAY = _DYFI_1K_OVERLAY;
InteractiveMapView.DYFI_DEFAULT_OVERLAY = _DYFI_DEFAULT_OVERLAY;
InteractiveMapView.EPICENTER_OVERLAY = _EPICENTER_OVERLAY;
InteractiveMapView.FAULTS_OVERLAY = _FAULTS_OVERLAY;
InteractiveMapView.HIST_SEIS_OVERLAY = _HIST_SEIS_OVERLAY;
InteractiveMapView.PLATES_OVERLAY = _PLATES_OVERLAY;
InteractiveMapView.POPULATION_OVERLAY = _POPULATION_OVERLAY;
InteractiveMapView.SHAKEMAP_CONTOURS = _SHAKEMAP_CONTOURS;
InteractiveMapView.SHAKEMAP_STATIONS = _SHAKEMAP_STATIONS;


module.exports = InteractiveMapView;

},{"core/Formatter":"core/Formatter","core/Module":"core/Module","leaflet/control/HazDevLayers":9,"leaflet/control/MousePosition":10,"leaflet/layer/Grayscale":12,"leaflet/layer/HistoricSeismicity":13,"leaflet/layer/Satellite":15,"leaflet/layer/Street":16,"leaflet/layer/TectonicPlates":17,"leaflet/layer/Terrain":18,"leaflet/layer/UsFault":20,"map/ContoursLayer":"map/ContoursLayer","map/DyfiUtmLayer":"map/DyfiUtmLayer","map/ShakeMapStationLayer":"map/ShakeMapStationLayer","mvc/View":"mvc/View","pdl/Product":"pdl/Product","util/Util":"util/Util"}],"map/ShakeMapStationLayer":[function(require,module,exports){
/* global L */
'use strict';


var Formatter = require('core/Formatter'),
    Xhr = require('util/Xhr');


var FLAG_DESCRIPTIONS = {
  'M': 'Manually flagged',
  'T': 'Outlier',
  'G': 'Glitch (clipped or below noise)',
  'I': 'Incomplete time series',
  'N': 'Not in list of known stations'
};


var ShakeMapStationLayer = L.GeoJSON.extend({

  initialize: function (stationJson) {
    var _this = this;

    this._formatter = new Formatter();
    this._layers = {};

    this.stationURL = stationJson;
    this.data = null;

    this.options = {
      pointToLayer: function (feature, latlng) {
        var p = feature.properties,
            romanIntensity = _this._formatter.mmi(p.intensity);

        if (p.network === 'DYFI' || p.network === 'INTENSITY') {
          return L.marker(latlng, {
            icon: L.divIcon({
              className: 'dyfi-layer-icon dyfi-station-mmi'+romanIntensity+'',
              iconSize: [14, 14],
              iconAnchor: [7, 7],
              popupAnchor: [0, 0]
            })
          });
        } else {
          return L.marker(latlng, {
            icon: L.divIcon({
              className: 'station-layer-icon station-mmi'+romanIntensity+'',
              iconSize: [14, 10],
              iconAnchor: [7, 8],
              popupAnchor: [0, -4]
            })
          });
        }
      },

      onEachFeature: function (feature, layer) {
        layer.options.title = _this._formatTitle(feature, true);
        layer.bindPopup(_this._generatePopupContent(feature),
            {minWidth:300});
      }
    };
  },

  onAdd: function (map) {
    if (this.data === null) {
      Xhr.ajax({
        url: this.stationURL,
        success: (function (layer) {
          return function (data) {
            layer.data = data;
            layer.addData(data);
            L.LayerGroup.prototype.onAdd.call(layer, map);
          };
        })(this)
      });
    } else {
      this.addData(this.data);
      L.LayerGroup.prototype.onAdd.call(this, map);
    }
  },

  _generatePopupContent: function (feature) {
    var p = feature.properties,
        romanIntensity = this._formatter.mmi(p.intensity);

    var markup = ['<div class="station-popup">',
      '<h2 class="station-title">', this._formatTitle(feature), '</h2>',
      '<ul class="station-summary">',
        '<li class="station-summary-intensity roman mmi', romanIntensity, '">',
          romanIntensity,
          '<br><abbr title="Modified Mercalli Intensity">mmi</abbr></br>',
        '</li>',
        '<li class="station-summary-pga">',
          this._formatter.number(p.pga, 3, '&ndash;'),
          '<br><abbr title="Maximum Horizontal Peak Ground Velocity (%g)">pga</abbr></br>',
        '</li>',
        '<li class="station-summary-pgv">',
          this._formatter.number(p.pgv, 3, '&ndash;'),
          '<br><abbr title="Maximum Horizontal Peak Ground Velocity (cm/s)">pgv</abbr></br>',
        '</li>',
        '<li class="station-summary-distance">',
          this._formatter.number(p.distance, 1, '&ndash;'),' km',
          '<br><abbr title="Distance (km)">dist</abbr></br>',
        '</li>',
      '</ul>',
      '<dl class="station-metadata horizontal">',
        '<dt class="station-metadata-type">Type</dt>',
          '<dd class="station-metadata-type">',
            (p.instrumentType||'&ndash;'),
          '</dd>',
        '<dt class="station-metadata-location">Location</dt>',
          '<dd class="station-metadata-location">',
            this._formatLocation(feature),
          '</dd>',
        '<dt class="station-metadata-source">Source</dt>',
          '<dd class="station-metadata-source">', (p.source || '&ndash;'), '</dd>',
        '<dt class="station-metadata-intensity">Intensity</dt>',
          '<dd class="station-metadata-intensity">',
            this._formatter.number(p.intensity, 1, '&ndash;'),
          '</dd>',
      '</dl>',
      this._createChannelTable(p.channels),
    '</div>'];

    return markup.join('');
  },

  _createChannelTable: function (channels) {
    var i = 0, numChannels = channels.length;

    var markup = [
      '<table class="station-channels-map">',
        '<thead>',
          '<tr>',
            '<th scope="col" class="station-channels-map-name">name</th>',
            '<th scope="col" class="station-channels-map-pga">pga</th>',
            '<th scope="col" class="station-channels-map-pgv">pgv</th>',
            '<th scope="col" class="station-channels-map-psa03">psa03</th>',
            '<th scope="col" class="station-channels-map-psa10">psa10</th>',
            '<th scope="col" class="station-channels-map-psa30">psa30</th>',
          '</tr>',
        '</thead>',
        '<tbody>'
    ];

    for (; i < numChannels; i++) {
      markup.push(this._createChannelRow(channels[i]));
    }

    markup.push('</tbody></table>');

    return markup.join('');
  },

  _createAmplitudesObject: function (amplitudes) {
    var amp = {},
        i,
        len = amplitudes.length,
        amplitude = null;

    for (i = 0; i < len; i++) {
      amplitude = amplitudes[i];
      amp[amplitude.name] = amplitude;
    }

    return amp;
  },

  _createChannelRow: function (channel) {
    var amplitude = this._createAmplitudesObject(channel.amplitudes);

    return [
      '<tr>',
        '<th scope="row" class="station-channel-name">',
          channel.name,
        '</th>',
        '<td class="station-channel-pga">',
        this._formatComponent(amplitude.pga),
        '</td>',
        '<td class="station-channel-pgv">',
        this._formatComponent(amplitude.pgv),
        '</td>',
        '<td class="station-channel-psa03">',
          this._formatComponent(amplitude.psa03),
        '<td class="station-channel-psa10">',
          this._formatComponent(amplitude.psa10),
        '</td>',
        '<td class="station-channel-psa30">',
          this._formatComponent(amplitude.psa30),
        '</td>',
      '</tr>'
    ].join('');
  },

  _formatTitle: function (feature, plainText) {
    var p = feature.properties;

    var title = [];

    if (!plainText) { title.push('<span class="station-code">'); }
    title.push(p.code || '&ndash;');
    if (!plainText) { title.push('</span>'); }

    title.push(' ');

    if (!plainText) { title.push('<span class="station-name">'); }
    title.push(p.name || '&ndash;');
    if (!plainText) { title.push('</span>'); }

    return title.join('');
  },

  _formatLocation: function (feature) {
    return ((feature.properties.location) ?
        (feature.properties.location + '<br/>') : '') + ' (' +
        feature.geometry.coordinates[1] + ', ' +
        feature.geometry.coordinates[0] + ')';
  },

  _formatComponent: function (data) {
    var content = [],
        flag,
        value;

    if (data) {
      flag = data.flag;
      value = data.value;

      // Add flag class for all non-zero flags
      if (flag && flag !== '0') {
        content.push('<span class="station-flag">');
        content.push(parseFloat(value, 10).toFixed(3));

        // display flag with title text
        if (FLAG_DESCRIPTIONS.hasOwnProperty(flag)) {
          content.push('<abbr title="' + FLAG_DESCRIPTIONS[flag] + '">(' +
              flag + ')</abbr>');
        } else {
          content.push('(' + flag + ')');
        }
        content.push('</span>');
      } else {
        content.push('<span>');
        content.push(parseFloat(value, 10).toFixed(3));
        content.push('</span>');
      }
    } else {
      content.push('<span>&ndash;</span>');
    }

    return content.join('');
  }
});


L.ShakeMapStationLayer = ShakeMapStationLayer;

L.shakeMapStationLayer = function (options) {
  return new ShakeMapStationLayer(options);
};


module.exports = L.shakeMapStationLayer;

},{"core/Formatter":"core/Formatter","util/Xhr":"util/Xhr"}],"moment-tensor/BeachBallView":[function(require,module,exports){
/* This is based on code in GMT, utilmeca.c. */
'use strict';

var Canvas = require('moment-tensor/Canvas'),
    Util = require('util/Util'),
    View = require('mvc/View');


var _D2R,
    _DEFAULTS,
    _EPSILON,
    _MERGE_THRESHOLD,
    _R2D,
    _SPLIT_THRESHOLD;

_D2R = Math.PI / 180;
_R2D = 180 / Math.PI;

_EPSILON = Number.EPSILON || 1e-16;

// threshold x and y pixel difference when polygons should be merged.
// Pixels are in the range [-1, 1], so 0.02 represents a 1% difference.
_MERGE_THRESHOLD = 0.02;

// threshold takeoff angle when polygons should be split.
_SPLIT_THRESHOLD = 85 * _D2R;

_DEFAULTS = {
  axisSize: null,
  bgColor: '#fff',
  fillColor: '#ddd',
  height: null,
  labelAxes: true,
  labelAxesFont: '24px Arial',
  labelPlanes: true,
  labelPlanesFont: '14px Arial',
  lineColor: '#000',
  lineWidth: 0.25,
  plotAxes: false,
  plotPlanes: true,
  radius: null,
  size: 200,
  tensor: null,
  width: null,
  x0: null,
  y0: null
};


/**
 * Make sure number is between 0 and 2pi.
 *
 * @param value {Number}
 *     angle in radians.
 * @return {Number}
 *     angle in radians, in the range [0, 2pi).
 */
var __0To2Pi = function (value) {
  var twoPi;

  twoPi = 2 * Math.PI;
  while (value < 0) {
    value += twoPi;
  }
  while (value >= twoPi) {
    value -= twoPi;
  }
  return value;
};

/**
 * Compute trig values of axis.
 *
 * @param axis {Vector3}
 *        principal axis, with value property.
 * @return {Object} with these keys:
 *         v: value,
 *         a: azimuth,
 *         ca: cos(azimuth),
 *         sa: sin(azimuth),
 *         p: plunge,
 *         cp: cos(plunge),
 *         sp: sin(plunge).
 */
var __axisCache = function (axis) {
  var azimuth,
      plunge;

  // Vector azimuth method returns clockwise from north
  // code in this file expects counter-clockwise from east
  azimuth = (Math.PI / 2) - axis.azimuth();
  plunge = axis.plunge();
  // make axis plunge downward (negative values are up)
  if (plunge < 0) {
    plunge *= -1;
    azimuth += Math.PI;
  }
  // make azimuth in range [0, 2*PI)
  azimuth = __0To2Pi(azimuth, 0, Math.PI * 2);

  return {
    v: axis.eigenvalue,
    a: azimuth,
    ca: Math.cos(azimuth),
    sa: Math.sin(azimuth),
    p: plunge,
    cp: Math.cos(plunge),
    sp: Math.sin(plunge)
  };
};


var BeachBallView = function (options) {
  var _this,
      _initialize,

      _axisSize,
      _bgColor,
      _canvas,
      _fillColor,
      _height,
      _labelAxes,
      _labelAxesFont,
      _labelPlanes,
      _labelPlanesFont,
      _lineColor,
      _lineWidth,
      _plotAxes,
      _plotPlanes,
      _radius,
      _size,
      _tensor,
      _width,
      _x0,
      _y0;

  _this = View(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _bgColor = options.bgColor;
    _fillColor = options.fillColor;
    _labelAxes = options.labelAxes;
    _labelAxesFont = options.labelAxesFont;
    _labelPlanes = options.labelPlanes;
    _labelPlanesFont = options.labelPlanesFont;
    _lineColor = options.lineColor;
    _lineWidth = options.lineWidth;
    _plotAxes = options.plotAxes;
    _plotPlanes = options.plotPlanes;
    _size = options.size;
    _tensor = options.tensor;

    // options with computed defaults
    _radius = options.radius || parseInt((_size - 2) / 2, 10);
    _axisSize = options.axisSize || parseInt(_radius / 12.5, 10);
    _height = options.height || _size;
    _width = options.width || _size;
    _x0 = options.x0 || _width / 2;
    _y0 = options.y0 || _height / 2;
  };


  /**
   * Complete polygon, by inserting points at edge of circle.
   *
   * @param poly {Object}
   *     polygon to potentially complete.
   * @return {Object}
   *     completed polygon.
   */
  _this.completePolygon = function (polygon) {
    var az,
        az1,
        az2,
        x,
        y;

    if (polygon.x.length === 360) {
      // already a complete polygon
      return polygon;
    }

    az1 = polygon.startAz.az;
    az2 = polygon.endAz.az;
    x = polygon.x;
    y = polygon.y;
    // fill in circle portion of polygons
    if (az1 - az2 > Math.PI) {
      az1 -= 2 * Math.PI;
    }
    if (az2 - az1 > Math.PI) {
      az1 += 2 * Math.PI;
    }
    if (az1 < az2) {
      for (az = az2 - _D2R; az > az1; az -= _D2R) {
        x.push(Math.sin(az));
        y.push(Math.cos(az));
      }
    } else {
      for (az = az2 + _D2R; az < az1; az += _D2R) {
        x.push(Math.sin(az));
        y.push(Math.cos(az));
      }
    }

    return polygon;
  };

  /**
   * Compute azimuth label relative positioning.
   *
   * @param label {Object}
   * @return {Object}
   *     same `label` object, with additional properties:
   *     - `align` {String}
   *         'left' or 'right'
   *     - `size` {Object}
   *         `width` and `height` of label
   *     - `tick` {Object}
   *         `x` and `y` relative tick coordinates.
   *     - `x` {Number}
   *         relative x coordinate of label.
   *     - `y` {Number}
   *         relative y coordinate of label.
   */
  _this.computeAzimuthLabel = function (label) {
    var align,
        point,
        labelOffset,
        size,
        tickLength,
        x,
        y;

    // point on edge
    point = _this.getPoint(label.azimuth, 0);
    x = point.x;
    y = point.y;
    align = (x < 0) ? 'right' : 'left';
    size = _this.measureText(label.text, label.font);

    labelOffset = (_radius + 10) / _radius;
    tickLength = (_radius + 5) / _radius;

    label.align = align;
    label.size = size;
    label.tick = {
      x: [x, x * tickLength],
      y: [y, y * tickLength],
    };
    label.x = x * labelOffset;
    label.y = y * labelOffset;

    if (y < 0) {
      // shift label down when in bottom half
      label.y = y * (_radius + 10 + Math.abs(y) * size.height / 2) / _radius;
    }

    return label;
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (!_this) {
      return;
    }

    _axisSize = null;
    _bgColor = null;
    _fillColor = null;
    _labelAxes = null;
    _labelAxesFont = null;
    _labelPlanes = null;
    _labelPlanesFont = null;
    _lineColor = null;
    _lineWidth = null;
    _plotAxes = null;
    _plotPlanes = null;
    _size = null;
    _tensor = null;

    _radius = null;
    _height = null;
    _width = null;
    _x0 = null;
    _y0 = null;

    _this = null;
    _initialize = null;
  }, _this.destroy);

  /**
   * Get a line for a nodal plane.
   *
   * @param np {Object}
   *     Nodal plane object with keys `strike`, `dip`, and `rake` and
   *     values in degrees.
   * @return {Object}
   *     With properties `x` and `y` that are Arrays of points in the
   *     range [-1, 1].
   */
  _this.getPlaneLine = function (np) {
    var dip,
        j,
        point,
        strike,
        tanDip,
        vertical,
        x,
        y;

    strike = np.strike * _D2R;
    dip = np.dip * _D2R;
    x = [];
    y = [];

    vertical = (Math.abs(dip - Math.PI / 2)) < _EPSILON;
    if (vertical) {
      x.push(Math.sin(strike), Math.sin(strike + Math.PI));
      y.push(Math.cos(strike), Math.cos(strike + Math.PI));
    } else {
      tanDip = Math.tan(dip);
      for (j = 0; j <= Math.PI; j += _D2R) {
        // dip from [0,0,0] to intersection of plane and focal sphere
        // at azimuth `strike + j`
        dip = Math.atan(tanDip * Math.sin(j));
        point = _this.getPoint(strike + j, dip);
        x.push(point.x);
        y.push(point.y);
      }
    }

    return {
      x: x,
      y: y
    };
  };

  /**
   * Get x, y coordinates for a vector.
   *
   * @param vector {Vector}
   *     vector reprenenting point.
   * @return {Object}
   *     with properties `x` and `y` in the range [-1, 1] representing location
   *     of point in focal sphere.
   */
  _this.getPoint = function (azimuth, plunge) {
    var r,
        x,
        y;

    if (plunge < 0) {
      plunge *= -1;
      azimuth += Math.PI;
    }
    azimuth = __0To2Pi(azimuth);

    r = Math.sqrt(1 - Math.sin(plunge));
    x = r * Math.sin(azimuth);
    y = r * Math.cos(azimuth);

    return {
      x: x,
      y: y
    };
  };

  /**
   * Get Polygons representing pressure and tension regions of the beachball.
   *
   * May swap foreground and background colors.
   *
   * @param tensor {Tensor}
   *        tensor.
   * @return {Array<Object>} each object will have properties:
   *         x: {Array<Number>} x coordinates of line,
   *         y: {Array<Number} y coordinates of line,
   *         startAz: {Object} start azimuth of line,
   *         endAz: {Object} end azimuth of line.
   */
  _this.getPolygons = function (tensor) {
    var alphan,
        az,
        azes,
        azp,
        c,
        cfi,
        f,
        fir,
        i,
        iso,
        n,
        p,
        polygon,
        polygons,
        r,
        s,
        s2alphan,
        sfi,
        swapColors,
        t,
        tmp,
        takeoff,
        vi,
        x,
        xe,
        xn,
        xz,
        y;

    t = __axisCache(tensor.T);
    n = __axisCache(tensor.N);
    p = __axisCache(tensor.P);

    azes = [];
    polygons = [];


    vi = (t.v + n.v + p.v) / 3;
    t.v -= vi;
    n.v -= vi;
    p.v -= vi;

    // compute f, iso
    f = (-n.v / t.v) || _EPSILON;
    iso = (vi / t.v) || _EPSILON;

    // build azes
    swapColors = false;
    for (i = 0; i < 360; i++) {
      fir = i * _D2R;
      sfi = Math.sin(fir);
      cfi = Math.cos(fir);
      s2alphan = (2 + 2 * iso) / (3 + (1 - 2 * f) * Math.cos(2 * fir));
      if (Math.abs(1 - s2alphan) <= _EPSILON) {
        s2alphan = 1;
      }
      if (s2alphan > 1) {
        // swap axes
        tmp = t;
        t = p;
        p = tmp;
        // swap bg/fill colors
        swapColors = !swapColors;
        // recompute f, iso, s2alphan
        f = (-n.v / t.v) || _EPSILON;
        iso = (vi / t.v) || _EPSILON;
        s2alphan = (2 + 2 * iso) / (3 + (1 - 2 * f) * Math.cos(2 * fir));
      }
      // compute z,n,e components
      alphan = Math.asin(Math.sqrt(s2alphan));
      s = Math.sin(alphan);
      c = Math.cos(alphan);
      xz = c * t.sp        + s * sfi * n.sp        + s * cfi * p.sp;
      xn = c * t.cp * t.ca + s * sfi * n.cp * n.ca + s * cfi * p.cp * p.ca;
      xe = c * t.cp * t.sa + s * sfi * n.cp * n.sa + s * cfi * p.cp * p.sa;
      // compute azimuth and takeoff angle
      if (Math.abs(xn) < _EPSILON && Math.abs(xe) < _EPSILON) {
        az = 0;
        takeoff = 0;
      } else {
        az = __0To2Pi(Math.atan2(xe, xn));
        takeoff = Math.acos(xz / Math.sqrt(xz*xz + xn*xn + xe*xe));
        if (takeoff > Math.PI / 2) {
          az = __0To2Pi(az + Math.PI);
          takeoff = Math.PI - takeoff;
        }
      }
      // save for later
      azes.push({
        az: az,
        takeoff: takeoff
      });
    }

    // build polygons
    polygon = null;
    for (i = 0; i < azes.length; i++) {
      az = azes[i];
      r = Math.SQRT2 * Math.sin(az.takeoff / 2);
      x = r * Math.sin(az.az);
      y = r * Math.cos(az.az);
      if (polygon !== null) {
        // check if current point should be part of this polygon
        azp = azes[(i === 0) ? azes.length - 1 : i - 1];
        if (Math.abs(Math.abs(az.az - azp.az) - Math.PI) < 10 * _D2R) {
          // polygons should only end at edge of beachball
          if (az.takeoff > _SPLIT_THRESHOLD &&
              azp.takeoff > _SPLIT_THRESHOLD) {
            // end a polygon
            if (polygon !== null) {
              polygon.endAz = azp;
              polygons.push(polygon);
              polygon = null;
            }
          }
        }
      }
      if (polygon === null) {
        // start a polygon
        polygon = {
          x: [],
          y: [],
          startAz: az,
          endAz: null
        };
      }
      // add point to current polygon
      polygon.x.push(x);
      polygon.y.push(y);
    }
    // close last polygon
    polygon.endAz = azes[azes.length - 1];
    polygons.push(polygon);

    // fix up polygons
    polygons = _this.mergePolygons(polygons);
    polygons = polygons.map(_this.completePolygon);
    polygons.swapColors = swapColors;
    return polygons;
  };

  /**
   * Call getPoint using a Vector.
   *
   * Vector azimuth is reported counter-clockwise from east.
   * getPoint expects azimuth to be clockwise from north.
   *
   * @param vector {Vector}
   *     the vector.
   * @return {Object}
   *     relative point within focal sphere.
   */
  _this.getVectorPoint = function (vector) {
    return _this.getPoint(
      (Math.PI / 2) - vector.azimuth(),
      vector.plunge()
    );
  };

  /**
   * Measure pixel size of text.
   *
   * @param text {String}
   *     text to measure.
   * @param font {String}
   *     css/canvas font property.
   * @return {Object}
   *     with `width` and `height` properties that are the pixel size of `text`.
   */
  _this.measureText = function (text, font) {
    var el,
        size;

    // create hidden element with text content
    el = document.createElement('div');
    el.setAttribute('style',
        'height:auto;' +
        'position:absolute;' +
        'visibility:hidden;' +
        'white-space:nowrap;' +
        'width:auto;' +
        'font:' + font + ';');
    el.innerText = text;

    // add to view element and measure
    _this.el.appendChild(el);
    size = {
      height: el.scrollHeight,
      width: el.scrollWidth
    };

    // clean up
    _this.el.removeChild(el);
    el = null;

    return size;
  };

  /**
   * Label an axis.
   *
   * @param axis {Vector}
   *     axis to label.
   * @param text {String}
   *     axis label.
   */
  _this.labelAxis = function (axis, text) {
    var point;

    point = _this.getVectorPoint(axis);
    _canvas.text(text,
        _labelAxesFont,
        _this.projectX(point.x),
        _this.projectY(point.y),
        null,
        'black',
        'center');
  };

  /**
   * Draw an azimuth label.
   *
   * @param label {Object}
   *     label object with `azimuth`, `text`, and `font` properties.
   */
  _this.labelAzimuth = function (label) {
    var tick;

    if (!('size' in label)) {
      label = _this.computeAzimuthLabel(label);
    }

    tick = label.tick;
    _canvas.line(
        tick.x.map(_this.projectX),
        tick.y.map(_this.projectY),
        'black');

    _canvas.text(label.text, label.font,
        _this.projectX(label.x),
        _this.projectY(label.y),
        null,
        'black',
        label.align);
  };

  /**
   * Adjust size to make room for azimuth labels.
   *
   * Updates _canvas, _height, _width, _x0, and _y0.
   * Resets canvas content, any rendering should occur after calling.
   *
   * @param label {Object}
   *     label object with `azimuth`, `text`, and `font` properties.
   */
  _this.makeRoomForAzimuthLabel = function (label) {
    var bottom,
        left,
        right,
        size,
        top,
        x,
        y;

    if (!('size' in label)) {
      label = _this.computeAzimuthLabel(label);
    }

    x = _this.projectX(label.x);
    y = _this.projectY(label.y);
    size = label.size;

    // measure actual top/right/bottom/left
    bottom = 0;
    left = 0;
    right = 0;
    top = 0;
    bottom = y - size.height;
    top = y + size.height;
    if (label.align === 'left') {
      left = x;
      right = x + size.width;
    } else {
      left = x - size.width;
      right = x;
    }

    // convert from actual size to relative size increase
    if (bottom < 0) {
      bottom = Math.abs(bottom);
    } else {
      bottom = 0;
    }
    if (top > _height) {
      top = top - _height;
    } else {
      top = 0;
    }
    if (left < 0) {
      left = Math.abs(left);
    } else {
      left = 0;
    }
    if (right > _width) {
      right = right - _width;
    } else {
      right = 0;
    }

    // change size
    _width = _width + left + right;
    _x0 = _x0 + left;
    _height = _height + top + bottom;
    _y0 = _y0 + top;
  };

  /**
   * Merge adjacent lines that should be part of the same polygon.
   *
   * @param polygons {Array<Object>}
   *     array of polygons to potentially merge.
   * @return {Array<Object>}
   *     array of polygons that remain after any merges.
   */
  _this.mergePolygons = function (polygons) {
    var i,
        nextI,
        p1,
        p1x,
        p1y,
        p2,
        p2x,
        p2y;

    if (polygons.length === 1) {
      // nothing to merge
      return polygons;
    }

    for (i = 0; i < polygons.length; i++) {
      nextI = (i === polygons.length - 1 ? 0 : i + 1);
      p1 = polygons[i];
      p1x = p1.x;
      p1y = p1.y;
      p2 = polygons[nextI];
      p2x = p2.x;
      p2y = p2.y;
      if (Math.abs(p1x[p1x.length - 1] - p2x[0]) < _MERGE_THRESHOLD &&
          Math.abs(p1y[p1y.length - 1] - p2y[0]) < _MERGE_THRESHOLD) {
        // merge polygons
        p1x.push.apply(p1x, p2x);
        p1y.push.apply(p1y, p2y);
        p1.endAz = p2.endAz;
        polygons.splice(nextI, 1);
      }
    }
    return polygons;
  };

  /**
   * Convert a relative x coordinate to a canvas pixel coordinate.
   *
   * @param x {Number}
   *     relative x coordinate.
   * @return {Number}
   *     canvas pixel x coordinate.
   */
  _this.projectX = function (x) {
    return _x0 + _radius * x;
  };

  /**
   * Convert a relative y coordinate to a canvas pixel coordinate.
   *
   * @param y {Number}
   *     relative y coordinate.
   * @return {Number}
   *     canvas pixel y coordinate.
   */
  _this.projectY = function (y) {
    return _height - (_y0 + _radius * y);
  };

  /**
   * Render view based on current model settings.
   */
  _this.render = function () {
    var azimuthLabels,
        point,
        polygons,
        tmp,
        x,
        y;

    azimuthLabels = [];
    // create azimuth labels, for now only nodal planes.
    if (_labelPlanes) {
      [_tensor.NP1, _tensor.NP2].forEach(function (np) {
        var azimuth,
            text;

        azimuth = np.strike * _D2R;
        text = '(' +
            np.strike.toFixed(0) + ', ' +
            np.dip.toFixed(0) + ', ' +
            np.rake.toFixed(0) +
            ')';
        azimuthLabels.push({
          'azimuth': azimuth,
          'font': _labelPlanesFont,
          'text': text
        });
      });
    }
    // adjust plot area so labels are visible.
    azimuthLabels.forEach(_this.makeRoomForAzimuthLabel);

    _canvas = Canvas({
      height: _height,
      width: _width
    });
    _canvas.context.lineWidth = _lineWidth;

    // get polygons
    // represents either solid regions (swapColors = false),
    // or holes (swapColors = true)
    polygons = _this.getPolygons(_tensor);
    if (polygons.swapColors) {
      tmp = _bgColor;
      _bgColor = _fillColor;
      _fillColor = tmp;
    }

    // center of beachball.
    x = _this.projectX(0);
    y = _this.projectY(0);

    // plot circle outline, with background color
    // in case polygons represent holes
    _canvas.circle(x, y, _radius * 2, _lineColor, _bgColor);

    // draw polygons
    polygons.forEach(function(p) {
      _canvas.polygon(
          p.x.map(_this.projectX),
          p.y.map(_this.projectY),
          _lineColor,
          _fillColor);
    });

    // draw nodal plane lines
    if (_plotPlanes) {
      [_tensor.NP1, _tensor.NP2].forEach(function (np) {
        var line;
        line = _this.getPlaneLine(np);
        _canvas.line(
            line.x.map(_this.projectX),
            line.y.map(_this.projectY),
            _lineColor);
      });
    }

    // plot circle without fill, in case polygons covered outline.
    _canvas.circle(x, y, _radius * 2, _lineColor);

    if (_labelAxes) {
      _this.labelAxis(_tensor.P, 'P');
      _this.labelAxis(_tensor.T, 'T');
    } else if (_plotAxes) {
      point = _this.getVectorPoint(_tensor.P);
      _canvas.circle(point.x, point.y, _axisSize, 'white', 'black');
      point = _this.getVectorPoint(_tensor.T);
      _canvas.circle(point.x, point.y, _axisSize, 'black', 'white');
    }

    // draw azimuth labels
    azimuthLabels.forEach(_this.labelAzimuth);

    Util.empty(_this.el);
    _this.el.appendChild(_canvas.canvas);
    _canvas.destroy();
    _canvas = null;
  };


  _initialize(options);
  options = null;
  return _this;
};


BeachBallView.zeroToTwoPi = __0To2Pi;


module.exports = BeachBallView;

},{"moment-tensor/Canvas":"moment-tensor/Canvas","mvc/View":"mvc/View","util/Util":"util/Util"}],"moment-tensor/Canvas":[function(require,module,exports){
'use strict';

var Util = require('util/Util');


var _DEFAULTS = {
  canvas: null,
  height: 100,
  width: 100
};


/**
 * Create a new Canvas object.
 *
 * @param options {Object}
 * @param options.canvas {DOMElement}
 *        Optional, An existing canvas element.
 *        If omitted, a new canvas element is created.
 * @param options.width {Number}
 *        Optional, default 100.
 *        Width of canvas, when options.canvas is null.
 * @param options.height {Number}
 *        Optional, default 100.
 *        Height of canvas, when options.canvas is null.
 */
var Canvas = function (options) {
  var _this,
      _initialize,

      _canvas,
      _context;

  _this = {};

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _canvas = options.canvas;
    if (_canvas === null) {
      _canvas = document.createElement('canvas');
      _canvas.width = options.width;
      _canvas.height = options.height;
    }
    _context = _canvas.getContext('2d');
    // expose these as public properties
    _this.canvas = _canvas;
    _this.context = _context;
  };


  /**
   * Clear the canvas.
   */
  _this.clear = function () {
    if (_context.clearRect) {
      _context.clearRect(0, 0, _canvas.width, _canvas.height);
    } else {
      _canvas.width = _canvas.width;
    }
  };

  /**
   * Free references.
   */
  _this.destroy = function () {
    _canvas = null;
    _context = null;
    _initialize = null;
    _this = null;
  };

  /**
   * Draw a circle
   *
   * @param x {Number}
   *        center of circle.
   * @param y {Number}
   *        center of circle.
   * @param size {Number}
   *        diameter of circle.
   * @param stroke {String}
   *        strokeStyle, or null to not stroke.
   * @param fill {String}
   *        fillStyle, or null to not fill.
   */
  _this.circle = function (x, y, size, stroke, fill) {
    var c;

    c = _context;
    c.beginPath();
    c.arc(x, y, size/2, 0, Math.PI*2, true);
    c.closePath();

    _this._strokeAndFill(stroke, fill);
  };

  /**
   * Draw a polygon
   *
   * @param x {Array<Number>}
   *        array of x coordinates.
   * @param y {Array<Number>}
   *        array of y coordinates.
   * @param stroke {String}
   *        strokeStyle, or null to not stroke.
   * @param fill {String}
   *        fillStyle, or null to not fill.
   */
  _this.polygon = function (x, y, stroke, fill) {
    var c,
        i,
        len;

    c = _context;
    c.beginPath();
    c.moveTo(x[0], y[0]);
    for (i = 1, len = x.length; i < len; i++) {
      c.lineTo(x[i], y[i]);
    }
    c.closePath();

    _this._strokeAndFill(stroke, fill);
  };

  /**
   * Draw a line.
   *
   * Same as polygon, without closingPath before calling stroke/fill.
   *
   * @param x {Array<Number>}
   *        array of x coordinates.
   * @param y {Array<Number}
   *        array of y coordinates.
   * @param stroke {String}
   *        strokeStyle, or null to not stroke.
   * @param fill {String}
   *        fillStyle, or null to not fill.
   */
  _this.line = function (x, y, stroke, fill) {
    var c,
        i,
        len;

    c = _context;
    c.beginPath();
    c.moveTo(x[0], y[0]);
    for (i = 1, len = x.length; i < len; i++) {
      c.lineTo(x[i], y[i]);
    }

    this._strokeAndFill(stroke, fill);
  };

  /**
   * Measure how many pixels are needed to plot text in the given font.
   *
   * @param font {String}
   *     context font property.
   * @param text {String}
   *     text to plot.
   * @return {TextMetrics}
   *     size of text once plotted, "width" is the only widely supported
   *     TextMetrics property.
   */
  _this.measureText = function (font, text) {
    var c;

    c = _context;
    c.font = font;
    return c.measureText(text);
  };

  /**
   * Draw text.
   *
   * @param text {String}
   *        text to draw.
   * @param font {String}
   *        font to use, e.g. '30px Arial'.
   * @param x {Number}
   *        x coordinate.
   * @param y {Number}
   *        y coordinate.
   * @param stroke {String}
   *        strokeStyle, or null to not stroke.
   * @param fill {String}
   *        fillStyle, or null to not fill.
   * @param align {String} default 'left'
   *        where to align text around x.
   *        'left' starts at x.
   *        'center' centers around x.
   *        'right' ends at x.
   */
  _this.text = function (text, font, x, y, stroke, fill, align) {
    var c,
        size;

    c = _context;
    align = align || 'left';

    c.font = font;
    if (align !== 'left') {
      size = c.measureText(text);
      if (align === 'center') {
        x = x - size.width / 2;
      } else if (align === 'right') {
        x = x - size.width;
      }
    }

    if (stroke) {
      c.strokeStyle = stroke;
      c.strokeText(text, x, y);
    }

    if (fill) {
      c.fillStyle = fill;
      c.fillText(text, x, y);
    }
  };


  /**
   * Stroke and fill the current path.
   *
   * @param context {Object}
   *        canvas context
   * @param stroke {String}
   *        strokeStyle, or null to not stroke.
   * @param fill {String}
   *        fillStyle, or null to not fill.
   */
  _this._strokeAndFill = function (stroke, fill) {
    var c;

    c = _context;

    if (stroke) {
      c.strokeStyle = stroke;
      c.stroke();
    }
    if (fill) {
      c.fillStyle = fill;
      c.fill();
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = Canvas;

},{"util/Util":"util/Util"}],"moment-tensor/MomentTensorModule":[function(require,module,exports){
'use strict';


var Formatter = require('core/Formatter'),
    Module = require('core/Module'),
    MomentTensorView = require('moment-tensor/MomentTensorView'),
    ScientificSummaryModule = require('scientific/ScientificSummaryModule'),
    Util = require('util/Util');


var _DEFAULTS,
    _ID,
    _TITLE,
    _TYPES;


_ID = 'moment-tensor';
_TITLE = 'Moment Tensor';
_TYPES = ['moment-tensor'];

_DEFAULTS = {
  formatter: null
};


/**
 * Module to display a moment-tensor type {Product}.
 *
 * @param options {Object}
 * @param options.formatter {Formatter}
 *     formatter object to pass to MomentTensorView.
 */
var MomentTensorModule = function (options) {
  var _this,
      _initialize,

      _formatter,
      _momentTensorView;


  _this = Module(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);
    _formatter = options.formatter || Formatter();

    _this.ID = _ID;
    _this.TITLE = _TITLE;
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (_momentTensorView) {
      _momentTensorView.destroy();
    }
    _momentTensorView = null;

    _formatter = null;
    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Render product content, or an error message if no product available.
   */
  _this.render = function () {
    var product;

    product = _this.getProduct('moment-tensor');

    _this.renderContent(product);
    _this.renderHeader(product);
    _this.renderFooter(product);
  };

  /**
   * Render the content section of this module.
   *
   * @param product {Product}
   *     product to render, or null if no product.
   */
  _this.renderContent = function (product) {
    if (_momentTensorView && _momentTensorView.destroy) {
      _momentTensorView.destroy();
      _momentTensorView = null;
    }

    if (!product) {
      _this.content.innerHTML = '<p class="alert error">' +
          'No Moment Tensor Found!' +
          '</p>';
    } else {
      _momentTensorView = MomentTensorView({
        el: _this.content,
        formatter: _formatter,
        model: product
      });
      _momentTensorView.render();
    }
  };

  /**
   * Render the footer section of this module.
   *
   * @param product {Product}
   *     product to render, or null if no product.
   */
  _this.renderFooter = function (product) {
    var downloads;

    Util.empty(_this.footer);
    if (product) {
      downloads = _this.getProductFooter({
        product: product
      });
      if (downloads) {
        _this.footer.appendChild(downloads);
      }
    }
  };

  /**
   * Render the header section of this module.
   *
   * @param product {Product}
   *     product to render, or null if no product.
   */
  _this.renderHeader = function (product) {
    var header;

    Util.empty(_this.header);
    _this.header.innerHTML = '<h3>' + _this.TITLE + '</h3>';

    if (product) {
      header = _this.getProductHeader({
        product: product,
        summaryModule: ScientificSummaryModule
      });

      if (header) {
        _this.header.appendChild(header);
      }
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


MomentTensorModule.ID = _ID;
MomentTensorModule.TITLE = _TITLE;
MomentTensorModule.TYPES = _TYPES;


module.exports = MomentTensorModule;

},{"core/Formatter":"core/Formatter","core/Module":"core/Module","moment-tensor/MomentTensorView":"moment-tensor/MomentTensorView","scientific/ScientificSummaryModule":"scientific/ScientificSummaryModule","util/Util":"util/Util"}],"moment-tensor/MomentTensorPinView":[function(require,module,exports){
'use strict';

var BasicPinView = require('core/BasicPinView'),
    BeachBallView = require('moment-tensor/BeachBallView'),
    MomentTensorModule = require('moment-tensor/MomentTensorModule'),
    Tensor = require('moment-tensor/Tensor'),
    Util = require('util/Util');


var _DEFAULTS = {
  className: 'moment-tensor-pin-beachball',
  fillColor: '#6ea8ff',
  module: MomentTensorModule
};


var MomentTensorPinView = function (options) {
  var _this,
      _initialize,

      _beachballView,
      _className,
      _fillColor,
      _tensor;

  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  _initialize = function (options) {
    _className = options.className;
    _fillColor = options.fillColor;
    _tensor = Tensor.fromProduct(_this.model);
  };

  _this.destroy = Util.compose(function () {
    if (_beachballView) {
      _beachballView.destroy();
    }

    _beachballView = null;
    _className = null;
    _fillColor = null;
    _tensor = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Creats pin content
   */
  _this.renderPinContent = function () {
    Util.empty(_this.content);

    _beachballView = BeachBallView({
      fillColor: _fillColor,
      labelAxes: false,
      labelPlanes: false,
      size: 200,
      tensor: _tensor
    });

    _beachballView.el.classList.add(_className);
    _this.content.appendChild(_beachballView.el);
    _beachballView.render();
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = MomentTensorPinView;

},{"core/BasicPinView":"core/BasicPinView","moment-tensor/BeachBallView":"moment-tensor/BeachBallView","moment-tensor/MomentTensorModule":"moment-tensor/MomentTensorModule","moment-tensor/Tensor":"moment-tensor/Tensor","util/Util":"util/Util"}],"moment-tensor/MomentTensorView":[function(require,module,exports){
'use strict';

var Attribution = require('core/Attribution'),
    BeachBallView = require('moment-tensor/BeachBallView'),
    Formatter = require('core/Formatter'),
    ProductView = require('core/ProductView'),
    Tensor = require('moment-tensor/Tensor'),
    Util = require('util/Util');


var _DEFAULTS = {
  empty: '&ndash;',
  fillColor: '#6ea8ff',
  formatter: null,
  tensor: null
};

var _R2D = 180 / Math.PI;


/**
 * View for a `moment-tensor` product.
 *
 * @param options {Object}
 * @param options.empty {String}
 *     string to display if a value is missing.
 *     default '&ndash;'.
 * @param options.fillColor {String}
 *     fill color for beachball.
 *     default '#6ea8ff'.
 * @param options.formatter {Formatter}
 *     formatter object.
 *     default `Formatter()`.`
 * @param options.model {Product}
 *     moment-tensor product to display.
 */
var MomentTensorView = function (options) {
  var _this,
      _initialize,

      _empty,
      _fillColor,
      _formatter,
      _tensor;


  _this = ProductView(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);
    _empty = options.empty;
    _fillColor = options.fillColor;
    _formatter = options.formatter || Formatter();
    _tensor = Tensor.fromProduct(_this.model);
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    _empty = null;
    _fillColor = null;
    _formatter = null;
    _initialize = null;
    _tensor = null;
    _this = null;
  }, _this.destroy);

  /**
   * Content for the "axes" section of the moment tensor view.
   *
   * @param tensor {Tensor}
   *     the tensor being displayed.
   * @return {DOMElement}
   *     markup for the axes section of the moment tensor view.
   */
  _this.getAxes = function (tensor) {
    var el,
        formatAxis,
        fragment;

    formatAxis = function (axis, name) {
      var azimuth,
          plunge,
          value;

      azimuth = (Math.PI / 2) - axis.azimuth();
      plunge = axis.plunge();
      value = axis.eigenvalue / tensor.scale;
      // make sure plunge is down
      if (plunge < 0) {
        azimuth = azimuth + Math.PI;
        plunge = plunge * -1;
      }
      azimuth = BeachBallView.zeroToTwoPi(azimuth);

      // format values
      azimuth = Math.round(azimuth * _R2D) + '&deg;';
      plunge = Math.round(plunge * _R2D) + '&deg';
      value = value.toFixed(3) + 'e+' + tensor.exponent + ' ' + tensor.units;

      return '<tr>' +
          '<th scope="row">' + name + '</th>' +
          '<td>' + value + '</td>' +
          '<td>' + plunge + '</td>' +
          '<td>' + azimuth + '</td>' +
          '</tr>';
    };

    fragment = document.createDocumentFragment();

    el = document.createElement('h4');
    el.innerHTML = 'Principal Axes';
    fragment.appendChild(el);

    el = document.createElement('div');
    el.classList.add('horizontal-scrolling');
    el.innerHTML =
        '<table>' +
          '<thead>' +
            '<tr>' +
              '<th>Axis</th>' +
              '<th>Value</th>' +
              '<th>Plunge</th>' +
              '<th>Azimuth</th>' +
            '</tr>' +
          '</thead>' +
          '<tbody>' +
            formatAxis(tensor.T, 'T') +
            formatAxis(tensor.N, 'N') +
            formatAxis(tensor.P, 'P') +
          '</tbody>' +
        '</table>';
    fragment.appendChild(el);

    return fragment;
  };

  /**
   * Content for the "info" section of the moment tensor view.
   *
   * @param tensor {Tensor}
   *     the tensor being displayed.
   * @return {DOMElement}
   *     markup for the info section of the moment tensor view.
   */
  _this.getInfo = function (tensor) {
    var catalog,
        contributor,
        dataSource,
        depth,
        el,
        halfDuration,
        magnitude,
        moment,
        percentDC,
        product;

    product = _this.model;

    catalog = product.getProperty('eventsource');
    contributor = product.get('source');
    dataSource = product.getProperty('beachball-source') || contributor;
    depth = _formatter.depth(tensor.depth, 'km');
    halfDuration = product.getProperty('sourcetime-duration');
    if (halfDuration) {
      halfDuration = (halfDuration / 2) + ' s';
    } else {
      halfDuration = _empty;
    }
    magnitude = _formatter.magnitude(
        tensor.magnitude,
        product.getProperty('derived-magnitude-type') || '');
    moment = (tensor.moment / tensor.scale).toFixed(3) +
        'e+' + tensor.exponent + ' ' + tensor.units;
    percentDC = Math.round(tensor.percentDC * 100) + ' %';

    catalog = catalog.toUpperCase();
    contributor = Attribution.getContributorReference(contributor);
    dataSource = Attribution.getContributorReference(dataSource);

    el = document.createElement('div');
    el.classList.add('moment-tensor-info');
    el.classList.add('horizontal-scrolling');
    el.innerHTML =
        '<table>' +
          '<tbody>' +
            '<tr>' +
              '<th scope="row">Moment</th></th>' +
              '<td>' + moment + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Magnitude</th>' +
              '<td>' + magnitude + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Depth</th>' +
              '<td>' + depth + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">' +
                'Percent <abbr title="Double Couple">DC</abbr>' +
              '</th>' +
              '<td>' + percentDC + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Half Duration</th>' +
              '<td>' + halfDuration + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Catalog</th>' +
              '<td>' + catalog + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Data Source</th>' +
              '<td>' + dataSource + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Contributor</th>' +
              '<td>' + contributor + '</td>' +
            '</tr>' +
          '</tbody>' +
        '</table>';

    return el;
  };

  /**
   * Content for the "planes" section of the moment tensor view.
   *
   * @param tensor {Tensor}
   *     the tensor being displayed.
   * @return {DOMElement}
   *     markup for the info section of the moment tensor view.
   */
  _this.getPlanes = function (tensor) {
    var el,
        formatPlane,
        fragment;

    formatPlane = function (plane, name) {
      var dip,
          rake,
          strike;

      dip = Math.round(plane.dip) + '&deg;';
      rake = Math.round(plane.rake) + '&deg;';
      strike = Math.round(plane.strike) + '&deg';

      return '<tr>' +
          '<th scope="row">' + name + '</th>' +
          '<td>' + strike + '</td>' +
          '<td>' + dip + '</td>' +
          '<td>' + rake + '</td>' +
        '</tr>';
    };

    fragment = document.createDocumentFragment();

    el = document.createElement('h4');
    el.innerHTML = 'Nodal Planes';
    fragment.appendChild(el);

    el = document.createElement('div');
    el.classList.add('horizontal-scrolling');
    el.innerHTML =
        '<table>' +
          '<thead>' +
            '<tr>' +
            '<th>Plane</th>' +
            '<th>Strike</th>' +
            '<th>Dip</th>' +
            '<th>Rake</th>' +
            '</tr>' +
          '</thead>' +
          '<tbody>' +
            formatPlane(tensor.NP1, 'NP1') +
            formatPlane(tensor.NP2, 'NP2') +
          '</tbody>' +
        '</table>';
    fragment.appendChild(el);

    return fragment;
  };

  /**
   * Get the title for this tensor.
   *
   * @param tensor {Tensor}
   *     tensor object.
   * @return {DOMElement}
   *     title for view.
   */
  _this.getTitle = function (tensor) {
    var el,
        title,
        type;

    type = tensor.type;
    if (type !== null) {
      // use derived magnitude type
      type = type.toUpperCase();
      if (type === 'MWW') {
        title = 'W-phase Moment Tensor (Mww)';
      } else if (type === 'MWC') {
        title = 'Centroid Moment Tensor (Mwc)';
      } else if (type === 'MWB') {
        title = 'Body-wave Moment Tensor (Mwb)';
      } else if (type === 'MWR') {
        title = 'Regional Moment Tensor (Mwr)';
      }
    }

    if (!title) {
      if (type !== null) {
        title = 'Moment Tensor (' + tensor.type + ')';
      } else {
        title = 'Moment Tensor';
      }
    }

    el = document.createElement('h3');
    el.innerHTML = title;

    return el;
  };

  /**
   * Render view.
   */
  _this.render = function () {
    var el,
        beachball,
        info,
        title;

    el = _this.el;
    el.innerHTML =
        '<section class="moment-tensor-view">' +
          '<header class="title"></header>' +
          '<div class="row">' +
            '<div class="column one-of-two"></div>' +
            '<div class="column one-of-two"></div>' +
          '</div>' +
        '</section>';
    title = el.querySelector('.title');
    info = el.querySelector('.column');
    beachball = el.querySelector('.column + .column');

    title.appendChild(_this.getTitle(_tensor));

    info.appendChild(_this.getInfo(_tensor));
    info.appendChild(_this.getPlanes(_tensor));
    info.appendChild(_this.getAxes(_tensor));

    beachball = BeachBallView({
      el: beachball,
      fillColor: _fillColor,
      size: 320,
      tensor: _tensor
    });
    beachball.render();
    beachball.destroy();
    beachball = null;
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = MomentTensorView;

},{"core/Attribution":"core/Attribution","core/Formatter":"core/Formatter","core/ProductView":"core/ProductView","moment-tensor/BeachBallView":"moment-tensor/BeachBallView","moment-tensor/Tensor":"moment-tensor/Tensor","util/Util":"util/Util"}],"moment-tensor/Tensor":[function(require,module,exports){
'use strict';

var Matrix = require('math/Matrix');


var _BEACHBALL_METHODS,
    _D2R,
    _R2D,
    __calculatePlane,
    __fromProduct,
    __fromStrikeDipRake,
    __range,
    __sortEigenvalues,
    Tensor;


_BEACHBALL_METHODS = {
  'smi:ci.anss.org/momentTensor/TMTS': 'TMTS',
  'smi:nc.anss.org/momentTensor/TMTS': 'TMTS',
  'smi:nc.anss.org/momentTensor/TMTS-ISO': 'TMTS-ISO',
  'smi:uu.anss.org/momentTensor/TDMT': 'TDMT'
};

_D2R = Math.PI / 180;
_R2D = 180 / Math.PI;

/**
 * Calculate one nodal plane.
 *
 * Argument order matters, so getPlane(v1, v2) and getPlane(v2, v1)
 * are different planes.
 *
 * @param v1 {Vector}
 *     first vector.
 * @param v2 {Vector}
 *     second vector.
 * @return {Object}
 *     computed plane, defined as the properties strike, dip, and rake.
 */
__calculatePlane = function (v1, v2) {
  v1 = v1.unit();
  v2 = v2.unit();
  // make sure first vector dips downward
  if (v1.z() > 0) {
    v1 = v1.multiply(-1);
    v2 = v2.multiply(-1);
  }
  return {
    strike: __range(Math.atan2(-v1.x(), v1.y()), 0, 2 * Math.PI) * _R2D,
    dip: Math.acos(-v1.z()) * _R2D,
    rake: Math.atan2(-v2.z(), v2.cross(v1).z()) * _R2D
  };
};

/**
 * Create a Tensor object from a Product object.
 *
 * @param product {Product}
 *     a focal-mechanism or moment-tensor product.
 */
__fromProduct = function (product) {
  var depth,
      props,
      type,
      tensor;

  tensor = null;
  type = product.get('type');
  props = product.get('properties') || {};

  if (type === 'focal-mechanism') {
    tensor = __fromStrikeDipRake(
        Number(props['nodal-plane-1-strike']),
        Number(props['nodal-plane-1-dip']),
        Number(props['nodal-plane-1-rake'] || props['nodal-plane-1-slip'] || 0),
        Number(props['scalar-moment'] || Math.SQRT2));
  } else if (type === 'moment-tensor') {
    tensor = Tensor({
      mrr: Number(props['tensor-mrr']),
      mtt: Number(props['tensor-mtt']),
      mpp: Number(props['tensor-mpp']),
      mrt: Number(props['tensor-mrt']),
      mrp: Number(props['tensor-mrp']),
      mtp: Number(props['tensor-mtp'])
    });

    depth = product.getProperty('derived-depth');
    if (depth === null)  {
      depth = product.getProperty('depth');
    }

    tensor.depth = depth;
  }

  if (tensor) {
    type = product.getProperty('derived-magnitude-type');
    if (!type) {
      type = product.getProperty('beachball-type');
      if (type && _BEACHBALL_METHODS.hasOwnProperty(type)) {
        type = _BEACHBALL_METHODS[type];
      }
    }

    if (type) {
      tensor.type = type;
    }
  }

  return tensor;
};

/**
 * Create a Tensor from strike, dip, and rake of one nodal plane.
 *
 * @param strike {Number}
 *        strike of nodal plane in degrees.
 * @param dip {Number}
 *        dip of nodal plane in degrees.
 * @param rake {Number}
 *        rake of nodal plane in degrees.
 * @param moment {Number}
 *        scale resulting matrix by this number.
 * @return Tensor object.
 */
__fromStrikeDipRake = function(strike, dip, rake, moment) {
  var c2d,
      c2s,
      cd,
      cr,
      cs,
      d,
      mxx,
      mxy,
      mxz,
      myy,
      myz,
      mzz,
      r,
      s,
      s2d,
      s2s,
      sd,
      sr,
      ss;

  s = strike * _D2R;
  ss = Math.sin(s);
  cs = Math.cos(s);
  s2s = Math.sin(2*s);
  c2s = Math.cos(2*s);
  d = dip * _D2R;
  sd = Math.sin(d);
  cd = Math.cos(d);
  s2d = Math.sin(2*d);
  c2d = Math.cos(2*d);
  r = (rake % 90 !== 0 ? rake : rake + 1e-15) * _D2R;
  sr = Math.sin(r);
  cr = Math.cos(r);

  // mtt
  mxx = -1 * (sd * cr * s2s + s2d * sr * ss * ss);
  // -mtp
  mxy =      (sd * cr * c2s + s2d * sr * s2s * 0.5);
  // mrt
  mxz = -1 * (cd * cr * cs  + c2d * sr * ss);
  // mpp
  myy =      (sd * cr * s2s - s2d * sr * cs * cs);
  // -mrp
  myz = -1 * (cd * cr * ss  - c2d * sr * cs);
  // mrr
  mzz =      (s2d * sr);

  return Tensor({
    mrr:  mzz * moment,
    mtt:  mxx * moment,
    mpp:  myy * moment,
    mtp: -mxy * moment,
    mrp: -myz * moment,
    mrt:  mxz * moment
  });
};

/**
 * Shift a number until it is in the specified range.
 *
 * Add or subtract the range size (max - min) until value is between.
 *
 * @param value {Number}
 *        value to normalize.
 * @param min {Number}
 *        range minimum.
 * @param max {Number}
 *        range maximum.
 * @return {Number} value in the range [min, max).
 */
__range = function (value, min, max) {
  var span = max - min;
  while (value < min) {
    value += span;
  }
  while (value >= max) {
    value -= span;
  }
  return value;
};

/**
 * Sort eigen vectors in descending order by magnitude.
 *
 * @param v1 {Vector}
 *     first vector.
 * @param v2 {Vector}
 *     second vector.
 */
__sortEigenvalues = function (v1, v2) {
  var v1mag,
      v2mag;
  // largest value first
  v1mag = v1.eigenvalue;
  v2mag = v2.eigenvalue;
  if (v1mag < v2mag) {
    return 1;
  } else if (v1mag > v2mag) {
    return -1;
  } else {
    return 0;
  }
};

/**
 * Construct a new tensor.
 *
 * @param mtt {Number}
 *        mtt value in N-m.
 * @param mpp {Number}
 *        mpp value in N-m.
 * @param mrr {Number}
 *        mrr value in N-m.
 * @param mrt {Number}
 *        mrt value in N-m.
 * @param mrp {Number}
 *        mrp value in N-m.
 * @param mtp {Number}
 *        mtp value in N-m.
 */
 Tensor = function (options) {
  var _this,
      _initialize;

  _this = {};

  _initialize = function (options) {
    var eigen,
        exponent,
        l,
        moment,
        moment_log10,
        mpp,
        mrr,
        mrt,
        mrp,
        mtp,
        mtt,
        n,
        p,
        t;

    _this.mtt = mtt = options.mtt || options.mxx || 0;
    _this.mpp = mpp = options.mpp || options.myy || 0;
    _this.mrr = mrr = options.mrr || options.mzz || 0;
    _this.mrt = mrt = options.mrt || options.mxz || 0;
    _this.mrp = mrp = options.mrp || -options.myz || 0;
    _this.mtp = mtp = options.mtp || -options.mxy || 0;
    _this.units = 'N-m';

    // calculate moment and derived values
    _this.moment = moment = Math.sqrt(0.5 *
        ( (mrr * mrr + mtt * mtt + mpp * mpp) +
        2 * (mrt * mrt + mrp * mrp + mtp * mtp) ));
    _this.moment_log10 = moment_log10 = Math.log(moment) / Math.LN10;
    _this.exponent = exponent = parseInt(moment_log10, 10);
    _this.scale = Math.pow(10, exponent);
    _this.magnitude = (2/3) * (moment_log10 - 9.1);

    // calculate principal axes
    _this.matrix = Matrix([
      mtt, -mtp, mrt,
      -mtp, mpp, -mrp,
      mrt, -mrp, mrr
    ], 3, 3);
    eigen = _this.matrix.jacobi();
    eigen.sort(__sortEigenvalues);
    _this.T = t = eigen[0];
    _this.N = n = eigen[1];
    _this.P = p = eigen[2];
    _this.fCLVD = n.eigenvalue /
        Math.max(Math.abs(t.eigenvalue), Math.abs(p.eigenvalue));
    _this.percentDC = Math.abs(1 - Math.abs(_this.fCLVD) / 0.5);
    _this.forceThrust = Math.pow(Math.sin(t.plunge()), 2);
    _this.forceStrikeSlip = Math.pow(Math.sin(n.plunge()), 2);
    _this.forceNormal = Math.pow(Math.sin(p.plunge()), 2);

    // calculate nodal planes
    // p = (n - l) / sqrt2
    // t = (n + l) / sqrt2
    l = t.subtract(p).unit();
    n = t.add(p).unit();
    _this.NP1 = __calculatePlane(l, n);
    _this.NP2 = __calculatePlane(n, l);
  };


  _initialize(options);
  options = null;
  return _this;
};


// add static methods
Tensor.calculatePlane = __calculatePlane;
Tensor.fromProduct = __fromProduct;
Tensor.fromStrikeDipRake = __fromStrikeDipRake;


module.exports = Tensor;

},{"math/Matrix":30}],"mvc/Model":[function(require,module,exports){
'use strict';

var Events = require('../util/Events'),
    Util = require('../util/Util');

/**
 * Constructor
 *
 * @param data {Object}
 *      key/value attributes of this model.
 */
var Model = function (data) {
  var _this,
      _initialize,

      _model;


  _this = Events();

  _initialize = function () {
    _model = Util.extend({}, data);

    // track id at top level
    if (data && data.hasOwnProperty('id')) {
      _this.id = data.id;
    }

    data = null;
  };

  /**
   * Get one or more values.
   *
   * @param key {String}
   *      the value to get; when key is undefined, returns the object with all
   *      values.
   * @return
   *      - if key is specified, the value or null if no value exists.
   *      - when key is not specified, the underlying object is returned.
   *        (Any changes to this underlying object will not trigger events!!!)
   */
  _this.get = function (key) {
    if (typeof(key) === 'undefined') {
      return _model;
    }

    if (_model.hasOwnProperty(key)) {
      return _model[key];
    }

    return null;
  };

  /**
   * Update one or more values.
   *
   * @param data {Object}
   *      the keys and values to update.
   * @param options {Object}
   *      options for this method.
   * @param options.silent {Boolean}
   *      default false. true to suppress any events that would otherwise be
   *      triggered.
   */
  _this.set = function (data, options) {
    // detect changes
    var changed = {},
      anyChanged = false,
      c;

    for (c in data) {
      if (!_model.hasOwnProperty(c) || _model[c] !== data[c]) {
        changed[c] = data[c];
        anyChanged = true;
      }
    }

    // persist changes
    _model = Util.extend(_model, data);

    // if id is changing, update the model id
    if (data && data.hasOwnProperty('id')) {
      _this.id = data.id;
    }

    if (options && options.hasOwnProperty('silent') && options.silent) {
      // don't trigger any events
      return;
    }

    // trigger events based on changes
    if (anyChanged ||
        (options && options.hasOwnProperty('force') && options.force)) {
      for (c in changed) {
        // events specific to a property
        _this.trigger('change:' + c, changed[c]);
      }
      // generic event for any change
      _this.trigger('change', changed);
    }
  };

  /**
   * Override toJSON method to serialize only model data.
   */
  _this.toJSON = function () {
    var json = Util.extend({}, _model),
        key,
        value;

    for (key in json) {
      value = json[key];

      if (typeof value === 'object' &&
          value !== null &&
          typeof value.toJSON === 'function') {
        json[key] = value.toJSON();
      }
    }

    return json;
  };


  _initialize();
  return _this;
};

module.exports = Model;

},{"../util/Events":"util/Events","../util/Util":"util/Util"}],"mvc/View":[function(require,module,exports){
'use strict';
/**
 * A lightweight view class.
 *
 * Primarily manages an element where a view can render its data.
 */


var Model = require('./Model'),

    Events = require('../util/Events'),
    Util = require('../util/Util');


var _DEFAULTS = {
};


/** create a new view. */
var View = function (params) {
  var _this,
      _initialize,

      _destroyModel;


  _this = Events();

  /**
   * @constructor
   *
   */
  _initialize = function (params) {
    params = Util.extend({}, _DEFAULTS, params);

    // Element where this view is rendered
    _this.el = (params && params.hasOwnProperty('el')) ?
        params.el : document.createElement('div');

    _this.model = params.model;

    if (!_this.model) {
      _this.model = Model({});
      _destroyModel = true;
    }

    _this.model.on('change', 'render', _this);
  };


  /**
   * API Method
   *
   * Renders the view
   */
  _this.render = function () {
    // Impelementations should update the view based on the current
    // model properties.
  };

  /**
   * API Method
   *
   * Cleans up resources allocated by the view. Should be called before
   * discarding a view.
   */
  _this.destroy = Util.compose(function () {
    if (_this ===  null) {
      return; // already destroyed
    }

    _this.model.off('change', 'render', _this);

    if (_destroyModel) {
      _this.model.destroy();
    }

    _destroyModel = null;

    _this.model = null;
    _this.el = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);


  _initialize(params);
  params = null;
  return _this;
};

module.exports = View;

},{"../util/Events":"util/Events","../util/Util":"util/Util","./Model":"mvc/Model"}],"oaf/ForecastTableView":[function(require,module,exports){
'use strict';


var ForecastView = require('oaf/ForecastView'),
    Formatter = require('core/Formatter'),
    Util = require('util/Util');


var _DEFAULTS = {

};


var ForecastTableView = function (options) {
  var _this,
      _initialize,

      _formatter;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ForecastView(options);

  _initialize = function (options) {
    _this.el.classList.add('oaf-forecast-table-view');

    _formatter = options.formatter || Formatter();
  };

  _this.destroy = Util.compose(function () {
    _this.el.classList.remove('oaf-forecast-table-view');

    _formatter = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.getRowHeader = function (info) {
    var th;

    th = document.createElement('th');
    th.setAttribute('scope', 'row');
    th.setAttribute('rowspan', info.bins.length);

    th.innerHTML = [
      '<strong>', info.label, '</strong>',
      '<br/>',
      _formatter.datetime(new Date(info.timeStart)),
      '<br/>through<br/>',
      _formatter.datetime(new Date(info.timeEnd))
    ].join('');

    return th;
  };

  _this.getTable = function (data) {
    var table,
        wrapper;

    wrapper = document.createElement('div');
    wrapper.classList.add('horizontal-scrolling');

    table = wrapper.appendChild(document.createElement('table'));

    table.innerHTML = [
      '<thead>',
        '<tr>',
          '<th scope="col">',
            'Time Window for Analysis',
          '</th>',
          '<th scope="col">',
            'Magnitude (M) range of aftershocks considered',
          '</th>',
          '<th scope="col">',
            'Most likely number of aftershocks (95 % condidence)',
          '</th>',
          '<th scope="col">',
            'Probability of one or more aftershocks',
          '</th>',
        '</tr>',
      '</thead>'
    ].join('');

    table.appendChild(_this.getTableBody(data));

    return wrapper;
  };

  _this.getTableBody = function (data) {
    var body;

    body = document.createElement('tbody');

    data.forecast.forEach(function (info) {
      body.appendChild(_this.getTableRow(info));
    });

    return body;
  };

  _this.getTableRow = function (info) {
    var fragment,
        row;

    fragment = document.createDocumentFragment();

    row = fragment.appendChild(document.createElement('tr'));
    row.classList.add('separator');
    row.appendChild(_this.getRowHeader(info));

    info.bins.forEach(function (bin, index) {
      var detailRow;

      if (index === 0) {
        detailRow = row;
      } else {
        detailRow = fragment.appendChild(document.createElement('tr'));
      }

      detailRow.appendChild(_this.getTableRowDetails(bin));
    });

    return fragment;
  };

  _this.getTableRowDetails = function (bin) {
    var expCell,
        magCell,
        p95Cell,
        row;

    row = document.createDocumentFragment();

    // Magnitude
    magCell = row.appendChild(document.createElement('td'));
    magCell.innerHTML = 'M &ge; ' + bin.magnitude;

    // 95 % confidence
    p95Cell = row.appendChild(document.createElement('td'));
    if (bin.p95minimum + bin.p95maximum) {
      p95Cell.innerHTML = bin.p95minimum + ' to ' + bin.p95maximum;
    } else {
      p95Cell.innerHTML = '*';
    }

    // Expectation
    expCell = row.appendChild(document.createElement('td'));
    if (bin.probability < 0.01) {
      expCell.innerHTML = '&lt; 1 %';
    } else if (bin.probability < 1.0) {
      expCell.innerHTML = _formatter.number(
          bin.probability*100, 0, '&ndash', '%');
    } else {
      expCell.innerHTML = '&gt; 99 %';
    }

    return row;
  };

  _this.renderForecast = function () {
    var footnote,
        topnote;

    _this.el.innerHTML = '';

    topnote = _this.el.appendChild(document.createElement('p'));
    topnote.classList.add('alert');
    topnote.innerHTML = [
      'Note: The expected rate of earthquakes continues to decline throughout ',
      'the time windows. The probabilities in the longer time windows are ',
      'higher only because the rates are being summed over a longer time ',
      'period. These longer periods may be useful when planning recovery ',
      'and rebuliding projects.'
    ].join('');

    _this.el.appendChild(_this.getTable(_this.forecast || {forecast:[]}));

    footnote = _this.el.appendChild(document.createElement('small'));
    footnote.innerHTML = '* Earthquake possible but with a low probability.';
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = ForecastTableView;

},{"core/Formatter":"core/Formatter","oaf/ForecastView":"oaf/ForecastView","util/Util":"util/Util"}],"oaf/ForecastTextView":[function(require,module,exports){
'use strict';


var ForecastView = require('oaf/ForecastView'),
    Formatter = require('core/Formatter'),
    Product = require('pdl/Product'),
    Util = require('util/Util');


var _DEFAULTS = {

};


var ForecastTextView = function (options) {
  var _this,
      _initialize,

      _catalogEvent,
      _formatter,
      _product;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ForecastView(options);

  _initialize = function (options) {
    _this.el.classList.add('oaf-forecast-text-view');

    _catalogEvent = options.catalogEvent;
    _formatter = options.formatter || Formatter();
    _product = options.product || Product();
  };


  _this.getCommentary = function (forecast) {
    var awarenessTimeSpan,
        commentary,
        elevatedTimeSpan,
        feltTimeSpan,
        m3display,
        m5display,
        m6display,
        m7display,
        magDisplay,
        magnitude,
        mostAftershocksTimeSpan,
        place,
        summary,
        wcDisplay,
        weekFromIssue,
        weekInfo;

    if (_catalogEvent) {
      summary = _catalogEvent.getSummary() || {properties: {}};
      magnitude = _catalogEvent.getMagnitude();

      elevatedTimeSpan = (magnitude >= 6.0) ?
          'the next year or longer' :
          'the next month or longer';

      mostAftershocksTimeSpan = (magnitude >= 6.0) ?
          'the first few weeks' :
          'the first few days';

      magDisplay = _formatter.magnitude(magnitude);
      place = summary.properties.place;

      wcDisplay = _formatter.distance(
          2 * _product.getProperty('wcradius'), 'km');

      awarenessTimeSpan = (magnitude >= 6.0) ?
          'the coming months' :
          'the coming weeks';

      weekFromIssue = _formatter.datetime(604800000 +
          _product.get('updateTime') || 0);

      weekInfo = forecast.forecast[1];

      m3display = _this.getProbAndExp(weekInfo.bins[0]);
      m5display = _this.getProbAndExp(weekInfo.bins[1]);
      m6display = _this.getProbAndExp(weekInfo.bins[2]);
      m7display = _this.getProbAndExp(weekInfo.bins[3]);

      feltTimeSpan = (magnitude >= 6.0) ?
          'next month and next year' :
          'next week and next month';
    } else {
      // What are doing if no event ... ???
      elevatedTimeSpan = 'the next month or longer';
      mostAftershocksTimeSpan = 'the first few days';
      place = '&ndash;';
      wcDisplay = '&ndash;';
      awarenessTimeSpan = 'the coming weeks';
      weekFromIssue = _formatter.datetime(604800000 + (new Date()).getTime());

      m3display = {
        expectation: '&ndash;',
        probability: '&ndash;'
      };

      m5display = {
        expectation: '&ndash;',
        probability: '&ndash;'
      };

      m6display = {
        expectation: '&ndash;',
        probability: '&ndash;'
      };

      m7display = {
        expectation: '&ndash;',
        probability: '&ndash;'
      };

      feltTimeSpan = 'next week and next month';
    }

    commentary = document.createElement('article');
    commentary.innerHTML = [
      '<h2>What to Expect</h2>',
      '<p>',
        'It is normal for an earthquake of this size to cause an ',
        'increase in the number of earthquakes (called aftershocks) ',
        'in the area within ',
        elevatedTimeSpan, '. ',
        'Most of these aftershocks will likely occur within ',
        mostAftershocksTimeSpan, ' ',
        'and the number of aftershocks will drop off over time, but a ',
        'large aftershock can increase the numbers again, temporarily.',
      '</p>',
      '<p>',
        'The aftershocks will occur mostly in the area affected by the ',
        'magnitude ', magDisplay, ' ', place, ' ',
        'earthquake, approximately within ',
        wcDisplay, ' of ', place, '.',
      '</p>',
      '<p>',
        'When there are more earthquakes, the chance of a large ',
        'earthquake is greater and the chance of damage is greater. ',
        'The USGS advises everyone to remain aware of the possibility ',
        'of aftershocks in ', awarenessTimeSpan, ', ',
        'especially when in or around vulnerable structures such as ',
        'unreinforced masonry buildings.',
      '</p>',
      '<p>',
        'No one can predict the exact time or place of any earthquake, ',
        'including aftershocks. The USGS can forecast how many ',
        'earthquakes to expect, or the chance of having an earthquake ',
        'within a given time period.',
      '</p>',

      '<h2>Current Aftershock Forecast</h2>',
      '<p>',
        'The USGS estimates the chance of more aftershocks as follows.<br/>',
        'Within the next week until ', weekFromIssue,
      '</p>',
      '<ul>',
        '<li>',
          'the chance of an earthquake large enough to feel ',
          '(magnitude 3 or higher) is ',
          m3display.probability, ', and ', m3display.expectation, '.',
        '</li>',
        '<li>',
          'the chance of an earthquake of magnitude 5 or higher is ',
          m5display.probability, ', and ', m5display.expectation, '.',
        '</li>',
        '<li>',
          'the chance of an earthquake of magnitude 6 or higher is ',
          m6display.probability, ', and ', m6display.expectation, '.',
        '</li>',
        '<li>',
          'the chance of an earthquake of magnitude 7 or higher is ',
          m7display.probability, ', and ', m7display.expectation, '.',
        '</li>',
      '</ul>',
      '<p>',
        'The chance of earthquakes large enough to be felt or to cause ',
        'damage remains elevated for the ', feltTimeSpan, '.',
      '</p>',
      '<p>',
        'The USGS calculates this earthquake forecast using a statistical ',
        'analysis based on past earthquakes and the aftershocks recorded ',
        'for this sequence. The forecast changes as time passes due to ',
        'the decay in the frequency of aftershocks, larger aftershocks ',
        'that may trigger further earthquakes, and changes in forecast ',
        'modeling based on the earthquake data collected.',
      '</p>'
    ].join('');

    return commentary;
  };

  _this.getProbAndExp = function (info) {
    var expectation,
        probability;

    if (info.probability <= 0.01) {
      probability = '1 in 100';
    } else if (info.probability < 1.0) {
      probability = _formatter.number(
          info.probability * 100, 0, '&ndash', '%');
    } else {
      probability = '&gt; 99 %';
    }

    if (info.p95minimum + info.p95maximum) {
      expectation = 'it is most likely that ' +
          info.p95minimum + ' to ' + info.p95maximum +
          ' such earthquakes may occur' ;
    } else {
      expectation = 'such an earthquake is possible, but with low probability';
    }

    return {
      expectation: expectation,
      probability: probability
    };
  };

  _this.destroy = Util.compose(function () {
    _this.el.classList.remove('oaf-forcast-text-view');

    _catalogEvent = null;
    _formatter = null;
    _product = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.renderForecast = function () {
    _this.el.innerHTML = '';
    _this.el.appendChild(_this.getCommentary(_this.forecast));
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = ForecastTextView;

},{"core/Formatter":"core/Formatter","oaf/ForecastView":"oaf/ForecastView","pdl/Product":"pdl/Product","util/Util":"util/Util"}],"oaf/ForecastView":[function(require,module,exports){
'use strict';


var ContentView = require('core/ContentView'),
    Util = require('util/Util');


var _DEFAULTS = {

};


var ForecastView = function (options) {
  var _this,
      _initialize;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ContentView(options);

  _initialize = function (/*options*/) {

  };


  _this.destroy = Util.compose(function () {

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.onError = function (/*status, xhr*/) {
    _this.el.innerHTML = '<p class="alert error">' +
        'Failed to load forecast data.</p>';
  };

  _this.onSuccess = function (data/*, xhr*/) {
    _this.forecast = data;
    _this.render();
    _this.trigger('forecast', _this.forecast);
  };

  _this.render = function () {
    if (!_this.forecast) {
      _this.el.innerHTML = '<p>Loading content&hellip;</p>';
      _this.fetchData();
    } else {
      _this.renderForecast();
    }
  };

  _this.renderForecast = function () {
    _this.el.innerHTML = JSON.stringify(_this.forecast);
  };

  _this.setForecast = function (forecast) {
    _this.forecast = forecast;
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = ForecastView;

},{"core/ContentView":"core/ContentView","util/Util":"util/Util"}],"oaf/ModelDetailsView":[function(require,module,exports){
'use strict';


var ForecastView = require('oaf/ForecastView'),
    Util = require('util/Util');


var _DEFAULTS = {

};


var ModelDetailsView = function (options) {
  var _this,
      _initialize;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ForecastView(options);

  _initialize = function (/*options*/) {

  };


  _this.destroy = Util.compose(function () {

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.renderForecast = function () {
    var model;

    // This is the aftershock mathematical model and has nothing to do with MVC
    model = _this.forecast.model;

    _this.el.innerHTML = [
      '<h3>', model.name, '</h3>',
      '<p>',
        'Reference Link: ',
        '<a href="', model.reference, '">', model.reference, '</a>',
      '</p>',
      '<table class="oaf-model-parameters">',
        '<tbody>',
          Object.keys(model.parameters).reduce(function (markup, key) {
            markup.push('<tr><th scope="row">' + key + '</th>' +
                '<td>' + model.parameters[key] + '</td></tr>');

            return markup;
          }, []).join(''),
        '</tbody>',
      '</table>'
    ].join('');
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = ModelDetailsView;

},{"oaf/ForecastView":"oaf/ForecastView","util/Util":"util/Util"}],"oaf/OafModule":[function(require,module,exports){
'use strict';


var Formatter = require('core/Formatter'),
    LinkProductView = require('core/LinkProductView'),
    OafView = require('oaf/OafView'),
    ScientificSummaryModule = require('scientific/ScientificSummaryModule'),
    TextProductView = require('core/TextProductView'),
    Util = require('util/Util'),
    Module = require('core/Module');


var _DEFAULTS,
    _ID,
    _TITLE,
    _TYPES;

_ID = 'oaf';
_TITLE = 'Aftershock Forecast';
_TYPES = ['oaf'];

_DEFAULTS = {

};


var OafModule = function (options) {
  var _this,
      _initialize,

      _formatter,
      _oafView,
      _subviews;


  options = Util.extend({}, _DEFAULTS, options);
  _this = Module(options);

  _initialize = function (options) {
    _this.ID = _ID;
    _this.TITLE = _TITLE;

    _formatter = options.formatter || Formatter();
    _subviews = [];
  };


  _this.destroy = Util.compose(function () {
    _this.destroyViews();

    _formatter = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.destroyViews = function () {
    if (_oafView && _oafView.destroy) {
      _oafView.destroy();
    }

    if (_subviews) {
      _subviews.forEach(function (view) {
        if (view && view.destroy) {
          try { view.destroy(); } catch (e) { /* ignore */ }
        }
      });
    }

    _oafView = null;
    _subviews = null;
  };

  _this.getOafLinkViews = function () {
    var header,
        products,
        ul,
        wrapper;

    wrapper = document.createDocumentFragment();

    products = _this.getProducts('oaf-link');
    if (products.length) {
      header = wrapper.appendChild(document.createElement('h3'));
      ul = wrapper.appendChild(document.createElement('ul'));

      header.innerHTML = 'More Aftershock Information';

      products.forEach(function (product) {
        var view;

        view = LinkProductView({
          el: ul.appendChild(document.createElement('li')),
          formatter: _formatter,
          model: product
        });

        view.render();

        _subviews.push(view);
      });
    }

    return wrapper;
  };

  _this.getOafTextViews = function () {
    var fragment,
        products;

    fragment = document.createDocumentFragment();
    products = _this.getProducts('oaf-header');

    products.forEach(function (product) {
      var view;

      view = TextProductView({
        model: product,
        el: fragment.appendChild(document.createElement('div'))
      });

      view.render();

      _subviews.push(view);
    });

    return fragment;
  };

  _this.render = function () {
    var product;

    _this.destroyViews();
    _subviews = [];

    _this.header.innerHTML = '';
    _this.content.innerHTML = '';
    _this.footer.innerHTML = '';

    product = _this.getProduct('oaf');

    if (product) {
      _this.renderHeader(product);
      _this.renderContent(product);
      _this.renderFooter(product);
    } else {
      _this.content.innerHTML = '<p class="alert info">' +
          'No aftershock forecast is available for this event.</p>';
    }
  };

  _this.renderContent = function (product) {
    if (product) {
      _oafView = OafView({
        catalogEvent: _this.model.get('event'),
        el: _this.content,
        model: product
      });

      _oafView.render();
    }
  };

  _this.renderFooter = function (product) {
    var expires;

    if (product) {
      expires = _this.footer.appendChild(document.createElement('small'));
      expires.innerHTML = [
        'This advisory will be updated on or before: ',
        _formatter.datetime(new Date(604800000 + product.get('updateTime')))
      ].join('');
    }

    _this.footer.appendChild(_this.getOafLinkViews());

    if (product) {
      // Generates download section
      _this.footer.appendChild(_this.getProductFooter({
        product: product
      }));
    }
  };

  _this.renderHeader = function (product) {
    _this.header.innerHTML = '<h3>' + _this.TITLE + '</h3>';

    if (product) {
      _this.header.appendChild(_this.getProductHeader({
        product: product,
        summaryModule: ScientificSummaryModule
      }));
    }

    _this.header.appendChild(_this.getOafTextViews());
  };


  _initialize(options);
  options = null;
  return _this;
};


OafModule.ID = _ID;
OafModule.TITLE = _TITLE;
OafModule.TYPES = _TYPES;


module.exports = OafModule;

},{"core/Formatter":"core/Formatter","core/LinkProductView":"core/LinkProductView","core/Module":"core/Module","core/TextProductView":"core/TextProductView","oaf/OafView":"oaf/OafView","scientific/ScientificSummaryModule":"scientific/ScientificSummaryModule","util/Util":"util/Util"}],"oaf/OafView":[function(require,module,exports){
'use strict';


var ForecastTableView = require('oaf/ForecastTableView'),
    ForecastTextView = require('oaf/ForecastTextView'),
    ModelDetailsView = require('oaf/ModelDetailsView'),
    ProductView = require('core/ProductView'),
    TabList = require('tablist/TabList'),
    Util = require('util/Util');


var _DEFAULTS,
    _RESOURCES;

_DEFAULTS = {
};

_RESOURCES = {
  'forecast-text': {
    title: 'Commentary',
    content: 'forecast.json',
    subview: ForecastTextView
  },
  'forecast-table': {
    title: 'Forecast Probabilities',
    content: 'forecast.json',
    subview: ForecastTableView
  },
  'forecast-model': {
    title: 'Model Details',
    content: 'forecast.json',
    subview: ModelDetailsView
  }
};


var OafView = function (options) {
  var _this,
      _initialize,

      _catalogEvent,
      _resources,
      _subviews,
      _tabList,
      _tabs;

  options = Util.extend({}, _DEFAULTS, options);
  _this = ProductView(options);

  _initialize = function (options) {
    _this.el.classList.add('oaf-view');

    _catalogEvent = options.catalogEvent;

    _resources = Util.extend({}, _RESOURCES, options.resources);
  };


  _this.createTab = function (params) {
    var content,
        subview,
        tab;

    content = _this.model.getContent(params.content);

    if (content && params.subview) {
      subview = params.subview({
          catalogEvent: _catalogEvent,
          model: content,
          product: _this.model
      });

      subview.on('forecast', 'setSubviewForecast', _this);
      _subviews.push(subview);

      tab = {
        title: params.title,
        content: subview.el,
        onDestroy: function () {
          try { subview.destroy(); } catch (e) { /* ignore */ }
        },
        onSelect: function () {
          subview.render();
        }
      };
    }

    return tab;
  };

  _this.destroy = Util.compose(function () {
    _this.el.classList.remove('oaf-view');

    _this.destroyTabList();

    _resources = null;
    _tabList = null;
    _tabs = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.destroyTabList = function () {
    if (_tabList && _tabList.destroy) {
      _tabList.destroy();
    }

    _subviews = null;
    _tabList = null;
    _tabs = null;
  };

  _this.render = function () {
    _this.destroyTabList();

    _tabList = TabList({
      el: _this.el,
      tabs: []
    });

    _subviews = [];
    _tabs = {};

    Object.keys(_resources).forEach(function (key) {
      var info,
          tab;

      info = _resources[key];
      tab = _this.createTab(info);
      if (tab) {
        _tabs[key] = _tabList.addTab(tab);
      }
    });
  };

  _this.setSubviewForecast = function (forecast) {
    _subviews.forEach(function (subview) {
      if (subview && typeof subview.setForecast === 'function') {
        subview.setForecast(forecast);
      }
    });
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = OafView;

},{"core/ProductView":"core/ProductView","oaf/ForecastTableView":"oaf/ForecastTableView","oaf/ForecastTextView":"oaf/ForecastTextView","oaf/ModelDetailsView":"oaf/ModelDetailsView","tablist/TabList":"tablist/TabList","util/Util":"util/Util"}],"origin/MagnitudesView":[function(require,module,exports){
'use strict';


var Accordion = require('accordion/Accordion'),
    Attribution = require('core/Attribution'),
    QuakemlView = require('origin/QuakemlView'),
    Util = require('util/Util');


var _DEFAULTS = {

};

// Value to display when a value is not provided
var _NOT_REPORTED = '&ndash;';


/**
 * View for displaying magnitude information found in a quakeml.xml {Content}
 * object. This view uses event delegation through a single {Accordion} instance
 * to deal with click events and it manually builds accordion markup for
 * each magnitude item.
 *
 * @param options {Object}
 *     Configuration options for this view. See _initialize method documentation
 *     for details.
 */
var MagnitudesView = function (options) {
  var _this,
      _initialize,

      _accordion;


  options = Util.extend({}, _DEFAULTS, options);
  _this = QuakemlView(options);

  /**
   * Constructor. Initializes a new {MagnitudesView}.
   *
   * @param options {Object}
   *     Configuration options for this view.
   * @param options.model {Content}
   *     The content model to render.
   * @param options.product {Product}
   *     The product that contains the given {Content}. Typically an origin
   *     or phase-data product.
   */
  _initialize = function (/*options*/) {
    _accordion = Accordion({
      el: _this.el
    });
  };


  /**
   * Frees resources allocated to this view.
   *
   */
  _this.destroy = Util.compose(function () {
    _accordion.destroy();

    _accordion = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Returns markup for the contributions table. This includes
   * a scrolling wrapper for responsiveness. If no contributions are provided,
   * this markup consists of an informational alert message.
   *
   * @param contributions {Array}
   *     An array of contribution information.
   *
   * @return {String}
   */
  _this.getContributionsMarkup = function (contributions) {
    if (!contributions || contributions.length === 0) {
      return '<p class="alert info">' +
          'No amplitudes contributed for this magnitude.</p>';
    } else {
      return [
        '<div class="horizontal-scrolling">',
          '<table class="magnitude-stations">',
            '<thead>',
              _this.getStationTableHeaderRow(),
            '</thead>',
            '<tbody>',
              contributions.reduce(function (markup, contribution) {
                markup.push(_this.getStationTableRow(contribution));
                return markup;
              }, []).join(''),
            '</tbody>',
          '</table>',
        '</div>'
      ].join('');
    }
  };

  /**
   * Returns markup for the table header row for the station details table.
   *
   * @return {String}
   */
  _this.getStationTableHeaderRow = function () {
    return [
      '<tr>',
        '<th scope="col">',
          '<abbr title="Network Station Channel Location">Channel</abbr>',
        '</th>',
        '<th scope="col">Type</th>',
        '<th scope="col">Amplitude</th>',
        '<th scope="col">Period</th>',
        '<th scope="col">Status</th>',
        '<th scope="col">Magnitude</th>',
        '<th scope="col">Weight</th>',
      '</tr>'
    ].join('');
  };

  /**
   * Returns markup for a single row in the station details table body.
   *
   * @param contribution {Object}
   *     An object containing contribution information. See {quakeml/Quakeml}
   *     for more details.
   *
   * @return {String}
   */
  _this.getStationTableRow = function (contribution) {
    var amp,
        amplitude,
        mag,
        period,
        station,
        stationMagnitude,
        status,
        type,
        weight;

    stationMagnitude = contribution.stationMagnitude;
    amplitude = stationMagnitude.amplitude || {};

    station = stationMagnitude.waveformID || amplitude.waveformID;

    amp = _NOT_REPORTED;
    mag = stationMagnitude.mag.value || _NOT_REPORTED;
    period = _NOT_REPORTED;
    status = amplitude.evaluationMode || stationMagnitude.status || 'automatic';
    type = stationMagnitude.type;
    weight = contribution.weight || _NOT_REPORTED;

    if (amplitude.genericAmplitude) {
      amp = amplitude.genericAmplitude.value + '&nbsp;' +
          (amplitude.unit || '');
    }

    if (amplitude.period) {
      period = amplitude.period.value + ' s';
    }

    if (period === _NOT_REPORTED && amplitude.unit === 's') {
      // quakeml requires a period value to be placed in the amplitude
      // if there is no other amplitude information
      period = amp;
      amp = _NOT_REPORTED;
    }

    return [
      '<tr>',
        '<th scope="row">',
          station.networkCode,
          ' ', station.stationCode,
          ' ', station.channelCode,
          ' ', station.locationCode,
        '</th>',
        '<td class="type">', type, '</td>',
        '<td class="amplitude">', amp, '</td>',
        '<td class="period">', period, '</td>',
        '<td class="status">', status, '</td>',
        '<td class="magnitude">', mag, '</td>',
        '<td class="weight">', weight, '</td>',
      '</tr>'
    ].join('');
  };

  /**
   * Returns markup for the magnitude error list item bubble.
   *
   * @param error {String}
   *     The error value to render.
   *
   * @return {String}
   */
  _this.getErrorMarkup = function (error) {
    return [
      '<li>',
        '<span class="bubble">',
          '<span>', error, '</span>',
          '<abbr title="Magnitude Error">Error</abbr>',
        '</span>',
      '</li>'
    ].join('');
  };

  /**
   * Returns markup for a single magnitude found in the quakeml.
   *
   * @param magnitude {Object}
   *     An object containing magntiude information as parsed out of
   *     the quakeml.
   *
   * @return {String}
   */
  _this.getMagnitudeMarkup = function (magnitude) {
    var contributions,
        error,
        mag,
        preferredType,
        source,
        stations,
        type,
        value;

    magnitude = magnitude || {};
    mag = magnitude.mag || {};

    if (magnitude.creationInfo) {
      source = magnitude.creationInfo.agencyID;
    } else {
      source = _this.product.get('source');
    }

    contributions = magnitude.contributions || [];

    type = magnitude.type || _NOT_REPORTED;
    value = mag.value || _NOT_REPORTED;
    error = mag.uncertainty || _NOT_REPORTED;
    stations = magnitude.stationCount || _NOT_REPORTED;
    preferredType = this.product.getProperty('magnitude-type') || '';

    return [
      '<section class="accordion accordion-closed magnitude-view-item">',
        (preferredType.toLowerCase() === type.toLowerCase() ?
            '<h3 class="preferred">': '<h3>' ),
          type,
        '</h3>',
        '<ul class="magnitude-summary">',
          _this.getValueMarkup(value),
          _this.getErrorMarkup(error),
          _this.getStationsMarkup(stations),
          _this.getSourceMarkup(source),
        '</ul>',
        '<a href="javascript:void(null);" class="accordion-toggle">Details</a>',
        '<div class="accordion-content">',
          _this.getContributionsMarkup(contributions),
        '</div>',
      '</section>'
    ].join('');
  };

  /**
   * Returns markup for all the magnitudes found in the quakeml.
   *
   * @param magnitudes {Array}
   *     An array of objects containing magnitude information as parsed
   *     out of the quakeml.
   *
   * @return {String}
   */
  _this.getMagnitudesMarkup = function (magnitudes) {
    magnitudes = magnitudes || [];

    return magnitudes.reduce(function (markup, magnitude) {
      markup.push(_this.getMagnitudeMarkup(magnitude));
      return markup;
    }, []).join('');
  };

  /**
   * Returns markup for the magnitude source list item bubble.
   *
   * @param source {String}
   *     The source value to render.
   *
   * @return {String}
   */
  _this.getSourceMarkup = function (source) {
    return [
      '<li>',
        '<span class="bubble">',
          Attribution.getContributorReference(source),
          '<abbr title="Magnitude Data Source">Source</abbr>',
        '</span>',
      '</li>'
    ].join('');
  };

  /**
   * Returns markup for the magnitude stations list item bubble.
   *
   * @param stations {String}
   *     The stations value to render.
   *
   * @return {String}
   */
  _this.getStationsMarkup = function (stations) {
    return [
      '<li>',
        '<span class="bubble">',
          '<span>', stations, '</span>',
          '<abbr title="Number of Stations">Stations</abbr>',
        '</span>',
      '</li>'
    ].join('');
  };

  /**
   * Returns markup for the magnitude value list item bubble.
   *
   * @param value {String}
   *     The magnitude value to render.
   *
   * @return {String}
   */
  _this.getValueMarkup = function (value) {
    return [
      '<li>',
        '<span class="bubble bubble-border">',
          '<span><strong>', value, '</strong></span>',
          '<abbr title="Magnitude">Mag</abbr>',
        '</span>',
      '</li>'
    ].join('');
  };

  /**
   * Renders the quakeml.
   *
   */
  _this.renderQuakeml = function () {
    var magnitudes;

    if (_this.quakeml) {
      // Already have quakeml, render it
      magnitudes = _this.quakeml.getMagnitudes();

      if (magnitudes.length) {
        _this.el.innerHTML = _this.getMagnitudesMarkup(magnitudes);
      } else {
        _this.el.innerHTML = '<p class="alert info">' +
            'No magnitude data available.</p>';
      }
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = MagnitudesView;

},{"accordion/Accordion":2,"core/Attribution":"core/Attribution","origin/QuakemlView":"origin/QuakemlView","util/Util":"util/Util"}],"origin/OriginModule":[function(require,module,exports){
'use strict';

var Formatter = require('core/Formatter'),
    Module = require('core/Module'),
    OriginView = require('origin/OriginView'),
    ScientificSummaryModule = require('scientific/ScientificSummaryModule'),
    Util = require('util/Util');


var _DEFAULTS,
    _ID,
    _TITLE,
    _TYPES;


_ID = 'origin';
_TITLE = 'Origin';
_TYPES = ['origin', 'phase-data'];

_DEFAULTS = {

};


var OriginModule = function (options) {
  var _this,
      _initialize,

      _formatter,
      _originView;


  _this = Module(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);

    _formatter = options.formatter || Formatter;

    _this.ID = _ID;
    _this.TITLE = _TITLE;
  };


  _this.destroy = Util.compose(function () {
    if (_originView && _originView.destroy) {
      _originView.destroy();
    }

    _formatter = null;
    _originView = null;

    _initialize = null;
    _this =  null;
  }, _this.destroy);

  /**
   * Finds the proper origin-like product. First tries to get an origin product
   * if successful, checks if a phase-data product with the same source,
   * type and code exists, if so, uses that phase-data product instead.
   *
   * @return {Product}
   */
  _this.getOriginProduct = function () {
    var ev,
        origin,
        phase,
        product;

    origin = _this.getProduct('origin');

    if (origin) {
      ev = _this.model.get('event');
      phase = ev.getProductById('phase-data', origin.get('source'),
          origin.get('code'));
    }

    if (phase) {
      product = phase;
    } else {
      product = origin;
    }

    return product;
  };

  /**
   * Render the header, content and footer. Content rendering delegated
   * to {OriginView}.
   *
   */
  _this.render = function () {
    var product;

    product = _this.getOriginProduct();

    _this.renderHeader(product);
    _this.renderContent(product);
    _this.renderFooter(product);
  };

  _this.renderContent = function (product) {
    var config,
        geoserve;

    if (_originView && _originView.destroy) {
      _originView.destroy();
      _originView = null;
      // remove previous _originView skeleton
      Util.empty(_this.content);
    }

    config = _this.model.get('config');

    if (!product) {
      _this.content.innerHTML = '<p class="alert error">' +
          'No origin found!</p>';
    } else {
      geoserve = _this.getProduct('geoserve');
      _originView = OriginView({
        el: _this.content,
        formatter: _formatter,
        model: product,
        geoserve: geoserve,
        url: (config ? config.GEOSERVE_WS_URL : null)
      });

      _originView.render();
    }
  };

  /**
   * Renders the footer content. This delegates to the getProductFooter method.
   *
   */
  _this.renderFooter = function (product) {
    var downloads;

    Util.empty(_this.footer);
    if (product) {
      downloads = _this.getProductFooter({
        product: product
      });

      if (downloads) {
        _this.footer.appendChild(downloads);
      }
    }
  };

  /**
   * Renders the header content. This delegates to teh getProductHeader method.
   *
   */
  _this.renderHeader = function (product) {
    var header;

    Util.empty(_this.header);
    _this.header.innerHTML = '<h3>' + _this.TITLE + '</h3>';

    if (product) {
      header = _this.getProductHeader({
        product: product,
        summaryModule: ScientificSummaryModule,
        type: 'origin'
      });

      if (header) {
        _this.header.appendChild(header);
      }
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


OriginModule.ID = _ID;
OriginModule.TITLE = _TITLE;
OriginModule.TYPES = _TYPES;


module.exports = OriginModule;

},{"core/Formatter":"core/Formatter","core/Module":"core/Module","origin/OriginView":"origin/OriginView","scientific/ScientificSummaryModule":"scientific/ScientificSummaryModule","util/Util":"util/Util"}],"origin/OriginPinView":[function(require,module,exports){
'use strict';

var BasicPinView = require('core/BasicPinView'),
    Formatter = require('core/Formatter'),
    OriginModule = require('origin/OriginModule'),
    Util = require('util/Util');


var _DEFAULTS = {
  module: OriginModule
};


var OriginPinView = function (options) {
  var _this,
      _initialize,

      _formatter;

  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);

  _initialize = function (options) {
    _formatter = options.formatter || Formatter();
  };

  _this.destroy = Util.compose(function () {
    _formatter = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Renders Origin content
   */
  _this.renderPinContent = function () {
    var depth,
        magnitude,
        magnitudeType,
        product,
        reviewStatus,
        time;

    product = _this.model;

    depth = product.getProperty('depth');
    magnitude = product.getProperty('magnitude');
    magnitudeType = product.getProperty('magnitude-type');
    reviewStatus = product.getProperty('review-status');
    time = product.getProperty('eventtime');

    depth = _formatter.depth(depth, 'km');
    magnitude = _formatter.magnitude(magnitude, magnitudeType);
    reviewStatus = (reviewStatus === null) ? '&ndash;' :
        reviewStatus.toUpperCase();
    time = (time === null ? '&ndash;' :
        '<time datetime="' + time + '">' +
          time.replace('T', '<br />').replace('Z', ' (UTC)') +
        '</time>');

    _this.content.innerHTML =
        '<dl class="no-style origin-pin-view">' +
          '<dt>Review Status</dt>' +
            '<dd class="origin-pin-review-status">' + reviewStatus + '</dd>' +
          '<dt>Magnitude</dt>' +
            '<dd class="origin-pin-magnitude">' + magnitude + '</dd>' +
          '<dt>Depth</dt>' +
            '<dd class="origin-pin-depth">' + depth + '</dd>' +
          '<dt>Time</dt>' +
            '<dd class="origin-pin-time">' + time + '</dd>' +
        '</dl>';
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = OriginPinView;

},{"core/BasicPinView":"core/BasicPinView","core/Formatter":"core/Formatter","origin/OriginModule":"origin/OriginModule","util/Util":"util/Util"}],"origin/OriginView":[function(require,module,exports){
'use strict';


var Attribution = require('core/Attribution'),
    Formatter = require('core/Formatter'),
    MagnitudesView = require('origin/MagnitudesView'),
    Model = require('mvc/Model'),
    PhasesView = require('origin/PhasesView'),
    ProductView = require('core/ProductView'),
    TabList = require('tablist/TabList'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');


var _DEFAULTS = {
  url: 'https://earthquake.usgs.gov/ws/geoserve/'
};
var NOT_REPORTED = '&ndash;';


var OriginView = function (options) {

  var _this,
      _initialize,

      _formatter,
      _geoserve,
      _region,
      _magnitudesView,
      _phasesView,
      _tabList,
      _url;

  options = Util.extend({}, _DEFAULTS, options);
  _this = ProductView(options);

  _initialize = function (options) {
    _formatter = options.formatter || Formatter();
    _geoserve = options.geoserve || null;
    _url = options.url;

    // Bind to geoserve model change
    _region = Model();
    _region.on('change:regions', 'buildFeRegionView', _this);
  };

  _this.destroy = Util.compose(function () {
    _region.off('change:regions', 'buildFeRegionView', _this);

    if (_tabList && _tabList.destroy) {
      _tabList.destroy();
      _tabList = null;
    }

    _formatter = null;
    _geoserve = null;
    _magnitudesView = null;
    _phasesView = null;
    _region = null;
    _url = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Build Fe Region string from the hazdev-geoserve-ws project.
   *
   * If no data is available a default message is displayed
   */
  _this.buildFeRegionView = function () {
    var fe,
        feElement,
        feName,
        feNumber;

    feElement = _this.el.querySelector('.fe-info');

    try {
      fe = _region.get('regions').fe.features[0].properties;
      feName = fe.name.toUpperCase();
      feNumber = fe.number;
      feElement.innerHTML = (feNumber ? feName + ' (' + feNumber + ')' : feName);
    } catch (e) {
      feElement.innerHTML = NOT_REPORTED;
    }
  };


  /**
   * Converts a product into an identifiable catalog and id string.
   *
   * @param product {Product}
   *    a Product model
   */
  _this.getCatalogDetail = function (product) {
    var eventId,
        eventSource,
        eventSourceCode;

    eventSource = product.getProperty('eventsource');
    eventSourceCode = product.getProperty('eventsourcecode');
    eventId = '';

    if (!eventSource) {
      return NOT_REPORTED;
    }

    eventId = (eventSource + eventSourceCode).toLowerCase();
    return eventSource.toUpperCase() + ' <small>(' + eventId + ')</small>';
  };

/**
 * Get fe region information.
 *
 * Attempts to load from a geoserve product first.
 * If no such product is found _getGeoserveFeRegion() is called
 * to retreive the fe region string from the geoserve ws.
 *
 * Once load is complete, _buildFeRegionView is called.
 */
  _this.getFeRegion = function () {
    var geoserveJson,
        that;

    that = _this;

    if (_geoserve) {
      geoserveJson = _geoserve.getContent('geoserve.json');
    }

    if (geoserveJson) {
      // if a geoserve product exists, use it
      Xhr.ajax({
        url: geoserveJson.get('url'),
        success: function (geoserve) {
          that.formatFeRegion(geoserve.fe);
        },
        error: function () {
          that.formatFeRegion(null);
        }
      });
    } else {
      // make a geoserve request
      _this.getGeoserveFeRegion();
    }
  };

  /**
   * Set _region with fe region data from the geoserve ws
   */
  _this.getGeoserveFeRegion = function () {
    var latitude,
        longitude;

    // get location
    latitude = _this.model.getProperty('latitude');
    longitude = _this.model.getProperty('longitude');

    if (latitude !== null && longitude !== null) {
      // request region information
      Xhr.ajax({
        url: _url + 'regions.json',
        data: {
          latitude: latitude,
          longitude: longitude,
          type: 'fe'
        },
        success: function (data) {
          _region.set({
            regions: data
          });
        },
        error: function () {
          throw new Error('Geoserve web service not found');
        }
      });
    }
  };

  /**
   * Builds markup for origin detail table
   *
   * @param product {Product}
   *    a Product model
   *
   * @return {string}
   *    html markup for the origin table
   */
  _this.getOriginDetailTable = function (product) {
    var azimuthalGap,
        buf,
        depth,
        depthError,
        eventTime,
        horizontalError,
        latitude,
        longitude,
        magnitude,
        magnitudeError,
        magnitudeSource,
        magnitudeType,
        minimumDistance,
        numPhases,
        numStations,
        originSource,
        reviewStatus,
        standardError;

    buf = [];

    // required attributes for origins
    latitude = product.getProperty('latitude');
    longitude = product.getProperty('longitude');
    eventTime = product.getProperty('eventtime');

    // optional attributes for origins
    magnitude = product.getProperty('magnitude');
    magnitudeType = product.getProperty('magnitude-type');
    magnitudeError = product.getProperty('magnitude-error');
    horizontalError = product.getProperty('horizontal-error');
    depth = product.getProperty('depth');
    depthError = product.getProperty('vertical-error');
    numStations = product.getProperty('num-stations-used');
    numPhases = product.getProperty('num-phases-used');
    minimumDistance = product.getProperty('minimum-distance');
    standardError = product.getProperty('standard-error');
    azimuthalGap = product.getProperty('azimuthal-gap');
    reviewStatus = product.getProperty('review-status') || 'automatic';
    originSource = product.getProperty('origin-source') || product.get('source');
    magnitudeSource = product.getProperty('magnitude-source') || product.get('source');


    buf.push(
      '<div class="horizontal-scrolling">',
      '<table class="origin-detail"><tbody>'
    );

    buf.push('<tr><th scope="row">Magnitude',
        (magnitudeError ? '<span class="uncertainty">uncertainty</span>' : ''),
        '</th><td>',
        _formatter.magnitude(magnitude, magnitudeType, magnitudeError),
        '</td></tr>');

    buf.push('<tr><th scope="row">Location',
        (horizontalError ? '<span class="uncertainty">uncertainty</span>' : ''),
        '</th><td>',
        _formatter.location(latitude, longitude),
        _formatter.uncertainty(horizontalError, 1, NOT_REPORTED, 'km'),
        '</td></tr>');

    buf.push('<tr><th scope="row">Depth',
        (depthError ? '<span class="uncertainty">uncertainty</span>' : ''),
        '</th><td>',
        _formatter.depth(depth, 'km', depthError) +
        '</td></tr>');

    buf.push('<tr><th scope="row">Origin Time</th><td>',
        (typeof eventTime === 'string' ?
            '<time datetime="' + eventTime + '">' +
                eventTime.replace('T', ' ').replace('Z', ' UTC') +
            '</time>' :
            ''),
        '</td></tr>');

    buf.push('<tr><th scope="row">Number of Stations</th><td>',
        (numStations === null ? NOT_REPORTED : numStations),
        '</td></tr>');

    buf.push('<tr><th scope="row">Number of Phases</th><td>',
        (numPhases === null ? NOT_REPORTED : numPhases),
        '</td></tr>');

    buf.push('<tr><th scope="row">Minimum Distance</th><td>',
        _formatter.distance((minimumDistance * 0.0174532925 * 6378.1), 'km'),
        ' (', _formatter.angle(minimumDistance, 2), ')',
        '</td></tr>');

    buf.push('<tr><th scope="row">Travel Time Residual</th><td>',
        (standardError === null ? NOT_REPORTED : standardError + ' s'),
        '</td></tr>');

    buf.push('<tr><th scope="row">Azimuthal Gap</th><td>',
        _formatter.angle(azimuthalGap),
        '</td></tr>');

    buf.push('<tr>',
        '<th scope="row">',
          '<abbr title="Flinn Engdahl">FE</abbr> Region',
        '</th>',
        '<td class="fe-info">' + _this.getFeRegion() + '</td></tr>');

    buf.push('<tr><th scope="row">Review Status</th><td>',
        reviewStatus.toUpperCase(),
        '</td></tr>');

    buf.push(
        '<tr><th scope="row">Catalog</th><td>',
          _this.getCatalogDetail(product),
        '</td></tr>',
        '<tr><th scope="row">Location Source</th><td>',
          Attribution.getContributorReference(originSource),
        '</td></tr>',
        '<tr><th scope="row">Magnitude Source</th><td>',
          Attribution.getContributorReference(magnitudeSource),
        '</td></tr>',
        '<tr><th scope="row">Contributor</th><td>',
          Attribution.getContributorReference(product.get('source')),
        '</td></tr>');

    buf.push('</tbody></table></div>');

    return buf.join('');
  };

  /**
   * Massage data from geoserve product into the same model object
   * that FeRegionView expects.
   *
   * @param fe {Object}
   *          fe.number {Number} fe region number.
   *          fe.name {String} fe region name.
   */
  _this.formatFeRegion = function(fe) {
    // only update model if an object is passed
    if (!fe) {
      return;
    }

    // set the (massaged) fe object
    _region.set({
      'regions': {
        'fe': {
          'features': [
            {
              'properties': {
                'name': fe.longName,
                'number': fe.number
              }
            }
          ]
        }
      }
    });
  };

  _this.render = function () {
    var content,
        product,
        quakeml;

    // Destroy tablist if it already exists
    if (_tabList && _tabList.destroy) {
      _tabList.destroy();
    }

    _tabList = TabList({
      el: _this.el,
      tabs: []
    });

    product = _this.model;
    if (product) {
      content = _this.getOriginDetailTable(product);
      _tabList.addTab({
        'title': 'Origin Detail',
        'content': content
      });

      if (product.get('type') === 'phase-data') {
        quakeml = product.getContent('quakeml.xml');

        _phasesView = PhasesView({
          el: document.createElement('div'),
          model: quakeml,
          product: product
        });

        _tabList.addTab({
          'title': 'Phases',
          'content': _phasesView.el,
          onDestroy: function () {
            _phasesView.destroy();
          },
          onSelect: function () {
            _phasesView.render();
          }
        });

        _magnitudesView = MagnitudesView({
          el: document.createElement('div'),
          model: quakeml,
          product: product
        });

        _tabList.addTab({
          'title': 'Magnitudes',
          'content': _magnitudesView.el,
          onDestroy: function () {
            _magnitudesView.destroy();
          },
          onSelect: function () {
            _magnitudesView.render();
          }
        });
      }

    } else {
      content = '<p class="alert error">' +
        'No Origin product exists.' +
        '</p>';
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = OriginView;

},{"core/Attribution":"core/Attribution","core/Formatter":"core/Formatter","core/ProductView":"core/ProductView","mvc/Model":"mvc/Model","origin/MagnitudesView":"origin/MagnitudesView","origin/PhasesView":"origin/PhasesView","tablist/TabList":"tablist/TabList","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"origin/PhasesView":[function(require,module,exports){
'use strict';


var Collection = require('mvc/Collection'),
    DataTable = require('mvc/DataTable'),
    QuakemlView = require('origin/QuakemlView'),
    Util = require('util/Util');


var _DEFAULTS,
    _PHASE_DATA_COLUMNS,
    _PHASE_DATA_SORTS;


_DEFAULTS = {

};

// columns for phase data table
_PHASE_DATA_COLUMNS = [
  {
    'className': 'channel',
    'title': 'Channel',
    'format': function (arrival) {
      var station = arrival.pick.waveformID;
      return station.networkCode + ' ' + station.stationCode +
          (station.channelCode ? ' ' + station.channelCode +
              (station.locationCode ? ' ' + station.locationCode : '')
              : '');
    },
    'header': true
  },
  {
    'className': 'distance',
    'title': 'Distance',
    'format': function (arrival) {
      return parseFloat(arrival.distance).toFixed(2) + '&deg;';
    },
    'downloadFormat': function (arrival) {
      return arrival.distance;
    }
  },
  {
    'className': 'azimuth',
    'title': 'Azimuth',
    'format': function (arrival) {
      return parseFloat(arrival.azimuth).toFixed(2) + '&deg;';
    },
    'downloadFormat': function (arrival) {
      return arrival.azimuth;
    }
  },
  {
    'className': 'phase',
    'title': 'Phase',
    'format': function (arrival) {
      return arrival.phase;
    }
  },
  {
    'className': 'time',
    'title': 'Arrival Time',
    'format': function (arrival) {
      var pick = arrival.pick,
          time;

      time = pick.time.value.split('T')[1].split('Z')[0].split(':');
      time[2] = parseFloat(time[2]).toFixed(2);
      if (time[2] < 10) {
        time[2] = '0' + time[2];
      }
      time = time.join(':');
      return time;
    },
    'downloadFormat': function (arrival) {
      return arrival.pick.time.value;
    }
  },
  {
    'className': 'status',
    'title': 'Status',
    'format': function (arrival) {
      return arrival.pick.evaluationMode;
    }
  },
  {
    'className': 'residual',
    'title': 'Residual',
    'format': function (arrival) {
      return parseFloat(arrival.timeResidual).toFixed(2);
    },
    'downloadFormat': function (arrival) {
      return arrival.timeResidual;
    }
  },
  {
    'className': 'weight',
    'title': 'Weight',
    'format': function (arrival) {
      return parseFloat(arrival.timeWeight).toFixed(2);
    },
    'downloadFormat': function (arrival) {
      return arrival.timeWeight;
    }
  }
];

// sort options for phase data table
_PHASE_DATA_SORTS = [
  {
    'id': 'channel',
    'title': 'Channel',
    'sortBy': function (arrival) {
      var station = arrival.pick.waveformID;
      return station.networkCode + ' ' + station.stationCode +
          ' ' + station.channelCode + ' ' + station.locationCode;
    }
  },
  {
    'id': 'distance',
    'title': 'Distance',
    'sortBy': function (arrival) {
      return parseFloat(arrival.distance);
    }
  },
  {
    'id': 'azimuth',
    'title': 'Azimuth',
    'sortBy': function (arrival) {
      return parseFloat(arrival.azimuth);
    }
  },
  {
    'id': 'phase',
    'title': 'Phase',
    'sortBy': function (arrival) {
      return arrival.phase;
    }
  },
  {
    'id': 'time',
    'title': 'Arrival Time',
    'sortBy': function (arrival) {
      return arrival.pick.time.value;
    }
  },
  {
    'id': 'residual',
    'title': 'Residual',
    'sortBy': function (arrival) {
      return parseFloat(arrival.timeResidual);
    }
  },
  {
    'id': 'weight',
    'title': 'Weight',
    'sortBy': function (arrival) {
      return parseFloat(arrival.timeWeight);
    }
  }
];


/**
 * View for rendering phase data.
 *
 * @see QuakemlView
 */
var PhasesView = function (options) {
  var _this,

      _phaseTable;


  options = Util.extend({}, _DEFAULTS, options);
  _this = QuakemlView(options);


  /**
   * Frees resources associated with this view.
   *
   */
  _this.destroy = Util.compose(function () {
    if (_phaseTable && _phaseTable.destroy) {
      _phaseTable.destroy();
    }
    _phaseTable = null;

    _this = null;
  }, _this.destroy);

  /**
   * Loops over all the given origins and looks for the preferred origin.
   *
   * @param origins {Array}
   *     An array of origin objects.
   */
  _this.getPreferredOrigin = function (origins) {
    var preferred;

    origins = origins || [];
    preferred = null;

    origins.some(function (origin) {
      if (origin.isPreferred) {
        preferred = origin;
        return true;
      }
    });

    return preferred;
  };

  /**
   * Returns markup for an error message when no phases exist.
   *
   * @param el {DOMElement}
   *     The DOM element into which to render.
   *
   * @return {String}
   */
  _this.renderNoPreferred = function (el) {
    el.innerHTML = '<p class="error alert">No Phase Data Exists</p>';
  };

  /**
   * Renders a table for the given origin
   *
   * @param origin {Object}
   *     An object containing origin information.
   * @param el {DOMElement}
   *     The DOM element into which to render.
   */
  _this.renderPreferred = function (origin, el) {
    var arrivals;

    origin = origin || {};

    // add ids to arrivals
    arrivals = origin.arrivals;
    arrivals.map(function (arrival, index) {
      arrival.id = index;
      return arrival;
    });

    _phaseTable = DataTable({
      el: el,
      className: 'hypocenter-phase',
      collection: Collection(arrivals),
      emptyMarkup: '<p class="error alert">No Phase Data Exists</p>',
      columns: _PHASE_DATA_COLUMNS,
      sorts: _PHASE_DATA_SORTS,
      defaultSort: 'distance'
    });

    el.querySelector('.datatable-data').classList.add('horizontal-scrolling');
  };

  /**
   * Renders the quakeml.
   *
   */
  _this.renderQuakeml = function () {
    var dataTableEl,
        origins,
        preferred;

    _this.el.innerHTML = '<section class="hypocenter-phase">' +
        '<header><h3>Phase Arrival Times</h3></header>' +
        '<div class="datatable"></div>' +
      '</section>';

    dataTableEl = _this.el.querySelector('.datatable');

    if (_this.quakeml) {
      origins = _this.quakeml.getOrigins();

      preferred = _this.getPreferredOrigin(origins);


      if (!preferred || !preferred.arrivals) {
        _this.renderNoPreferred(dataTableEl);
      } else {
        _this.renderPreferred(preferred, dataTableEl);
      }
    }
  };


  options = null;
  return _this;
};


module.exports = PhasesView;

},{"mvc/Collection":32,"mvc/DataTable":35,"origin/QuakemlView":"origin/QuakemlView","util/Util":"util/Util"}],"origin/QuakemlView":[function(require,module,exports){
'use strict';


var ContentView = require('core/ContentView'),
    Product = require('pdl/Product'),
    Quakeml = require('quakeml/Quakeml'),
    Util = require('util/Util');


var _DEFAULTS = {

};


/**
 * Abstract view for displaying quakeml.xml {Content} object.
 *
 * @param options {Object}
 *     Configuration options for this view. See _initialize method
 *     documentation for details.
 */
var QuakemlView = function (options) {
  var _this,
      _initialize;


  options = Util.extend({}, _DEFAULTS, options);
  _this = ContentView(options);

  /**
   * Constructor. Initializes a new {QuakemlView}.
   *
   * @param options {Object}
   *     Configuration options for this view.
   * @param options.model {Content}
   *     The content model to render.
   * @param options.product {Product}
   *     The product that contains the given {Content}. Typically an origin
   *     or phase-data product.
   */
  _initialize = function (options) {
    _this.product = options.product || Product();
  };


  /**
   * Frees resources allocated to this view.
   *
   */
  _this.destroy = Util.compose(function () {
    _initialize = null;
    _this = null;
  }, _this.destroy);


  /**
   * Callback executed when fetchData fails. Displays an error message.
   *
   * @param status {String}
   *     An error message. Currently ignored.
   * @param xhr {XMLHttpRequest}
   *     The XHR object used to fetch the data.
   */
  _this.onError = function (/*status, xhr*/) {
    _this.el.innerHTML = '<p class="alert error">' +
        'Failed to load quakeml data.</p>';
  };

  /**
   * Callback executed when fetchData succeeds. Parses and renders the
   * quakeml data and triggers an event offering the parsed quakeml back
   * so others can save the effort.
   *
   * @param data {String}
   *     The raw QuakeML XML string content.
   * @param xhr {XMLHttpRequest}
   *     The XHR object used to fetch the data.
   *
   */
  _this.onSuccess = function (data/*, xhr*/) {
    try {
      _this.quakeml = Quakeml({xml: data});

      _this.render();

      // Let others know about our success so they don't have to download
      // and parse it themselves...
      _this.trigger('quakeml', _this.quakeml);
    } catch (e) {
      // Ignore ...
      console.log(e.stack);
    }
  };

  /**
   * Fetches quakeml based on the current model, or renders it if the quakeml
   * is already available. Delegates to sub methods.
   *
   */
  _this.render = function () {
    if (!_this.quakeml) {
      // Don't have quakeml yet, try to get it
      _this.el.innerHTML = '<p>Loading content&hellip;</p>';
      _this.fetchData();
    } else {
      _this.renderQuakeml();
    }
  };

  /**
   * Renders the quakeml. This should be overriden by implementing classes.
   *
   */
  _this.renderQuakeml = function () {
    _this.el.innerHTML = JSON.stringify(_this.quakeml);
  };

  /**
   * Sets the quakeml to render. This is useful in case some external party
   * already downloaded/parsed the quakeml, thus saving time internally.
   *
   * @param quakeml {Quakeml}
   *     The parsed Quakeml to render.
   */
  _this.setQuakeml = function (quakeml) {
    _this.quakeml = quakeml;
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = QuakemlView;

},{"core/ContentView":"core/ContentView","pdl/Product":"pdl/Product","quakeml/Quakeml":39,"util/Util":"util/Util"}],"pdl/CatalogEvent":[function(require,module,exports){
'use strict';


var Product = require('pdl/Product'),
    Util = require('util/Util');


var _DEFAULTS = {
  config: {}
};


/**
 * Convert a product map to an array.
 *
 * @param map {Object}
 *        keys are product types.
 *        values are arrays of products.
 * @return {Array}
 *         array containing all products.
 */
var __productMapToList = function (map) {
  var list = [],
      type;
  for (type in map) {
    list.push.apply(list, map[type]);
  }
  return list;
};


/**
 * Filter superseded products (old versions) from array.
 *
 * @param list {Array}
 *        array of products.
 * @return {Array}
 *         array without superseded versions.
 */
var __getWithoutSuperseded = function (list) {
  var unique = {},
      products;
  list.forEach(function (product) {
    var key,
        modified;

    key = product.get('source') + '_' +
        product.get('type') + '_' +
        product.get('code');
    modified = -1;
    if (unique.hasOwnProperty(key)) {
      modified = unique[key].get('updateTime');
    }
    if (modified < product.get('updateTime')) {
      unique[key] = product;
    }
  });
  products = [];
  for (var id in unique) {
    products.push(unique[id]);
  }
  return products;
};

/**
 * Filter deleted products from array.
 *
 * @param list {Array}
 *        array of products.
 * @return {Array}
 *         array without deleted versions.
 */
var __getWithoutDeleted = function (list) {
  var withoutDeleted = [];
  list.forEach(function (product) {
    if (!product.isDeleted()) {
      withoutDeleted.push(product);
    }
  });
  return withoutDeleted;
};

/**
 * Sort products based on preferred weight.
 *
 * When preferred weights are equal, most recent updateTime is preferred.
 *
 * @param list {Array}
 *        array of products.
 * @return {Array}
 *         sorted array, most preferred first.
 */
var __getSortedMostPreferredFirst = function (list) {
  var sorted = list.splice(0);
  sorted.sort(function (p1, p2) {
    var diff;
    diff = p2.get('preferredWeight') - p1.get('preferredWeight');
    if (diff !== 0) {
      return diff;
    }
    diff = p2.get('updateTime') - p1.get('updateTime');
    if (diff !== 0) {
      return diff;
    }
    return (p1.id > p2.id ? 1 : -1);
  });
  return sorted;
};

/**
 * Check whether product has origin properties.
 *
 * Origin properties include event id (eventsource, eventsourcecode) and
 * event location (latitude, longitude, eventtime).
 *
 * @param product {Object}
 *        product to check.
 * @return true if product has all origin properties, false otherwise.
 */
var __productHasOriginProperties = function (product) {
  var props = product.get('properties');
  if (props.hasOwnProperty('eventsource') &&
      props.hasOwnProperty('eventsourcecode') &&
      props.hasOwnProperty('latitude') &&
      props.hasOwnProperty('longitude') &&
      props.hasOwnProperty('eventtime')) {
    return true;
  }
  return false;
};

/**
 * Get the most preferred product with origin properties.
 *
 * Origin properties include event id (eventsource, eventsourcecode) and
 * event location (latitude, longitude, eventtime).
 *
 * Products are sorted using __getSortedMostPreferredFirst before checking
 * for properties.
 *
 * @param list {Array}
 *        array of products.
 * @return {Object}
 *         most preferred product with origin properties.
 */
var __getProductWithOriginProperties = function (list) {
  var i,
      product;
  list = __getSortedMostPreferredFirst(list);
  for (i = 0; i < list.length; i++) {
    product = list[i];
    if (__productHasOriginProperties(product)) {
      return product;
    }
  }
  return null;
};


/**
 * Get the most preferred product with event id properties.
 *
 * Event ID properties are eventsource and eventsourcecode.
 *
 * Products are sorted using __getSortedMostPreferredFirst before checking
 * for properties.
 *
 * @param list {Array}
 *        array of products.
 * @return {Object}
 *         most preferred product with event id properties.
 */
var __getProductWithEventIdProperties = function (list) {
  var i,
      props;
  list = __getSortedMostPreferredFirst(list);
  for (i = 0; i < list.length; i++) {
    props = list[i].get('properties');
    if (props.hasOwnProperty('eventsource') &&
        props.hasOwnProperty('eventsourcecode')) {
      return list[i];
    }
  }
  return null;
};


/**
 * An event is a collection of products.
 */
var CatalogEvent = function (eventDetails, options) {
  var _this,
      _initialize,

      _config,
      _products,
      _properties,
      _summary;

  _this = Object.create({});

  _initialize = function (eventDetails, options) {
    var type;

    options = Util.extend({}, _DEFAULTS, options);

    _config = options.config;

    _products = {};
    _properties = {};

    if (eventDetails && eventDetails.properties) {
      _products = Util.extend({}, eventDetails.properties.products);
      _properties = Util.extend({}, eventDetails.properties, {products:null});
    }

    // convert all products to Product objects
    for (type in _products) {
      _products[type] = _products[type].map(Product);
    }
    _summary = null;
  };

  /**
   * Add a product to this event.
   *
   * @param product {Object}
   *        product to add.
   */
  _this.addProduct = function (product) {
    var type;

    type = product.get('type');
    if (!_products.hasOwnProperty(type)) {
      _products[type] = [];
    }
    _products[type].push(product);
    _summary = null;
  };

  /**
   * Remove a product from this event.
   *
   * @param product {Object}
   *        product to remove.
   */
  _this.removeProduct = function (product) {
    var type,
        typeProducts,
        index;
    type = product.get('type');
    if (_products.hasOwnProperty(type)) {
      typeProducts = _products[type];
      index = typeProducts.indexOf(product);
      if (index >= 0) {
        typeProducts.splice(index, 1);
        if (typeProducts.length === 0) {
          delete _products[type];
        } else {
          _products[type] = typeProducts;
        }
        _summary = null;
      }
    }
  };

  /**
   * Free references.
   */
  _this.destroy = function () {
    var key;

    if (_this === null) {
      return;
    }

    for (key in _products) {
      _products[key].map(function (model) {
        model.destroy();
      });
    }

    _initialize = null;
    _products = null;
    _properties = null;
    _summary = null;
    _this = null;
  };

  /**
   * Get event products.
   */
  _this.getProducts = function (type) {
    if (type) {
      return _products[type] || [];
    } else {
      return _products;
    }
  };

  /**
   * Get the preferred product of the specified type.
   *
   * @param type {String}
   *     type of product.
   * @return {Product}
   *     preferred product of type, or null if no product of that type exists.
   */
  _this.getPreferredProduct = function (type) {
    var products;
    products = _this.getProducts(type);
    products = __getSortedMostPreferredFirst(
        __getWithoutSuperseded(products));
    if (products.length > 0) {
      return products[0];
    }
    return null;
  };

  /**
   * Get all versions of a product (type, souce, code).
   */
  _this.getAllProductVersions = function (type, source, code) {
    var products;

    if (_products.hasOwnProperty(type)) {
      products = _products[type].filter(function (p) {
        return p.get('source') === source &&
            p.get('code') === code;
      });
    } else {
      products = [];
    }
    // sort most recent first.
    products.sort(function (p1, p2) {
      return p2.get('updateTime') - p1.get('updateTime');
    });
    return products;
  };

  /**
   * Gets a product based on the productId parameters.
   *
   * @param type {String}
   *     The type of the product to get
   * @param source {String}
   *     The source of the product to get
   * @param code {String}
   *     The code of the product to get
   * @param updateTime {Number} Optional.
   *     The updateTime of the product to get
   *
   * @return {Product}
   *     The product matching the given type, source, code, and updateTime. If
   *     no updateTime is specified, the most recently updated product matching
   *     type, source and code is returned instead.
   */
  _this.getProductById = function (type, source, code, updateTime) {
    var i,
        len,
        product,
        products;

    product = null;
    products = _this.getAllProductVersions(type, source, code);
    len = products.length;

    if (typeof updateTime !== 'undefined' && updateTime !== null) {
      for (i = 0; i < len; i++) {
        if (products[i].get('updateTime') === updateTime) {
          product = products[i];
          break;
        }
      }
    } else if (len) {
      // No updateTime specified, most recently updated product
      product = products[0]; // Products are sorted, so first is most recent
    }

    return product;
  };

  /**
   * Get the preferred event id.
   *
   * @return {String}
   *         the preferred event id, or null if none.
   */
  _this.getEventId = function () {
    var product = _this.getEventIdProduct(),
        props;
    if (product !== null) {
      props = product.get('properties');
      return props.eventsource + props.eventsourcecode;
    }
    return null;
  };

  /**
   * Get the preferred event source.
   *
   * @return {String}
   *         the preferred event source, or null if none.
   */
  _this.getSource = function () {
    var product = _this.getEventIdProduct();
    if (product !== null) {
      return product.getProperty('eventsource');
    }
    return null;
  };

  /**
   * Get the preferred event code.
   *
   * @return {String}
   *         the preferred event code, or null if none.
   */
  _this.getSourceCode = function () {
    var product = _this.getEventIdProduct();
    if (product !== null) {
      return product.getProperty('eventsourcecode');
    }
    return null;
  };

  /**
   * Get the preferred event time.
   *
   * @return {Date}
   *         the preferred origin time for this event, or null if none.
   */
  _this.getTime = function () {
    var product = _this.getProductWithOriginProperties();
    if (product !== null) {
      return new Date(product.getProperty('eventtime'));
    }
    return null;
  };

  /**
   * Get the preferred event latitude.
   *
   * @return {Number}
   *         the preferred latitude for this event, or null if none.
   */
  _this.getLatitude = function () {
    var product = _this.getProductWithOriginProperties();
    if (product !== null) {
      return Number(product.getProperty('latitude'));
    }
    return null;
  };

  /**
   * Get the preferred event longitude.
   *
   * @return {Number}
   *         the preferred longitude for this event, or null if none.
   */
  _this.getLongitude = function () {
    var product = _this.getProductWithOriginProperties();
    if (product !== null) {
      return Number(product.getProperty('longitude'));
    }
    return null;
  };

  /**
   * Get the preferred event depth.
   *
   * @return {Number}
   *         the preferred depth for this event, or null if none.
   */
  _this.getDepth = function () {
    var product = _this.getProductWithOriginProperties(),
        props;
    if (product !== null) {
      props = product.get('properties');
      return (props.hasOwnProperty('depth') ? Number(props.depth) : null);
    }
    return null;
  };

  /**
   * Get the preferred event magnitude.
   *
   * @return {Number}
   *         the preferred magnitude for this event, or null if none.
   */
  _this.getMagnitude = function () {
    var product = _this.getPreferredMagnitudeProduct(),
        props;
    if (product === null) {
      product = _this.getProductWithOriginProperties();
    }
    if (product !== null) {
      props = product.get('properties');
      return (props.hasOwnProperty('magnitude') ?
          Number(props.magnitude) : null);
    }
    return null;
  };

  /**
   * Check whether event is deleted.
   *
   * @return {Boolean}
   *         true if deleted, false otherwise.
   */
  _this.isDeleted = function () {
    var product = _this.getPreferredOriginProduct();
    if (product !== null &&
        !product.isDeleted() &&
        __productHasOriginProperties(product)) {
      // have "origin" product, that isn't deleted, and has origin properties.
      return false;
    }
    // otherwise, deleted
    return true;
  };

  /**
   * Get the product with event id properties.
   *
   * This may be a superseded or deleted product.
   *
   * @return {Number}
   *         the preferred latitude for this event, or null if none.
   */
  _this.getEventIdProduct = function () {
    var product = _this.getPreferredOriginProduct();
    if (product === null) {
      product = _this.getProductWithOriginProperties();
    }
    return product;
  };

  /**
   * Get the product with origin properties.
   *
   * This may be a superseded or deleted product.
   *
   * @return {Number}
   *         the product with origin properties this event, or null if none.
   */
  _this.getProductWithOriginProperties = function () {
    var originType,
        product;

    originType = Product.getFullType('origin', _config);

    if (_products.hasOwnProperty(originType)) {
      // origin products not superseded or deleted
      product = __getProductWithOriginProperties(
          __getWithoutDeleted(__getWithoutSuperseded(
              _products[originType])));

      if (product !== null) {
        return product;
      }

      // origin products superseded by a delete
      product = __getProductWithOriginProperties(
          __getWithoutSuperseded(__getWithoutDeleted(
              _products[originType])));

      if (product !== null) {
        return product;
      }
    }

    // products not superseded or deleted
    product = __getProductWithOriginProperties(
        __getWithoutDeleted(__getWithoutSuperseded(
            __productMapToList(_products))));

    if (product !== null) {
      return product;
    }

    // products superseded by a delete
    product = __getProductWithOriginProperties(
        __getWithoutSuperseded(__getWithoutDeleted(
            __productMapToList(_products))));
    return product;
  };

  /**
   * Get the preferred product with origin properties.
   *
   * If no preferred product has origin properties,
   * look for preferred product with event id.
   *
   * @return {Number}
   *         the preferred product with origin properties this event, or null.
   */
  _this.getPreferredOriginProduct = function () {
    var originType,
        product;

    originType = Product.getFullType('origin', _config);

    if (_products.hasOwnProperty(originType)) {
      // origin products not superseded or deleted
      product = __getProductWithOriginProperties(
          __getWithoutDeleted(__getWithoutSuperseded(
              _products[originType])));

      if (product !== null) {
        return product;
      }

      // origin products not superseded that have event id
      product = __getProductWithEventIdProperties(
          __getWithoutSuperseded(_products[originType]));

      if (product !== null) {
        return product;
      }

      // origin exists, but is incomplete
      return null;
    }

    // products not superseded or deleted
    product = __getProductWithOriginProperties(
        __getWithoutDeleted(__getWithoutSuperseded(
            __productMapToList(_products))));

    if (product !== null) {
      return product;
    }

    // products not superseded that have eventid.
    product = __getProductWithEventIdProperties(
        __getWithoutSuperseded(__productMapToList(_products)));

    if (product !== null) {
      return product;
    }

    // products superseded by a delete that have eventid
    product = __getProductWithEventIdProperties(
        __getWithoutSuperseded(__getWithoutDeleted(
          __productMapToList(_products))));
    return product;
  };


  /**
   * Get the preferred magnitude product.
   *
   * Current calls getPreferredOriginProduct.  Method is a placeholder in case
   * moment-tensor or other products become preferred source of magnitude.
   *
   * @return {Object}
   *         the product that defines the magnitude for the event, or null.
   */
  _this.getPreferredMagnitudeProduct = function () {
    return _this.getPreferredOriginProduct();
  };

  /**
   * Break this event into events by contributor.
   *
   * All products that do not include an event id are included with the
   * preferred sub event.
   *
   * @return {Object}
   *         keys are event ids.
   *         values are CatalogEvents.
   */
  _this.getSubEvents = function () {
    var preferredEvent,
        preferredEventId,
        productEvents,
        subEvents,
        withoutSuperseded;

    preferredEventId = _this.getEventId();
    preferredEvent = CatalogEvent();
    productEvents = {};
    subEvents = {};
    subEvents[preferredEventId] = preferredEvent;

    withoutSuperseded = __getWithoutSuperseded(
        __productMapToList(_products));
    withoutSuperseded.forEach(function (product) {
      var key,
          eventCode,
          eventSource,
          subEvent,
          subEventId;
      key = product.get('source') + '_' +
          product.get('type') + '_' +
          product.get('code');
      eventSource = product.getProperty('eventsource');
      eventCode = product.getProperty('eventsourcecode');
      if (eventSource === null || eventCode === null) {
        subEvent = preferredEvent;
      } else {
        subEventId = eventSource + eventCode;
        if (!subEvents.hasOwnProperty(subEventId)) {
          subEvents[subEventId] = CatalogEvent();
        }
        subEvent = subEvents[subEventId];
      }
      subEvent.addProduct(product);
      productEvents[key] = subEvent;
    });

    __productMapToList(_products).forEach(function (product) {
      var key;
      if (withoutSuperseded.indexOf(product) !== -1) {
        return;
      }
      key = product.get('source') + '_' +
          product.get('type') + '_' +
          product.get('code');
      productEvents[key].addProduct(product);
    });

    return subEvents;
  };

  /**
   * Return a map of all event ids associated to this event.
   *
   * @param includeDeleted {Boolean}
   *        optional, default false.
   * @return {Object}
   *         keys are event sources.
   *         values are array of codes from the corresponding source.
   */
  _this.getAllEventCodes = function (includeDeleted) {
    var allEventCodes = {},
        codes,
        id,
        source,
        sourceCode,
        subEvents,
        subEvent;

    subEvents = _this.getSubEvents();
    for (id in subEvents) {
      subEvent = subEvents[id];
      // skip the deleted subEvent
      if (!includeDeleted && subEvent.isDeleted()) {
        continue;
      }

      source = subEvent.getSource();
      sourceCode = subEvent.getSourceCode();
      if (!(source in allEventCodes)) {
        allEventCodes[source] = [];
      }
      codes = allEventCodes[source];
      if (codes.indexOf(sourceCode) === -1) {
        codes.push(sourceCode);
      }
    }
    return allEventCodes;
  };

  /**
   * Get event summary.
   *
   * @return {Object}
   *         event summary.
   */
  _this.getSummary = function () {
    var eventIdProduct,
        originProduct,
        magnitudeProduct,
        props;

    if (_summary !== null) {
      return _summary;
    }

    _summary = {
      depth: null,
      eventCodes: null,
      id: null,
      isDeleted: null,
      latitude: null,
      longitude: null,
      magnitude: null,
      properties: null,
      source: null,
      sourceCode: null,
      time: null,
      // products for above information
      eventIdProduct: null,
      originProduct: null,
      magnitudeProduct: null
    };
    _summary.isDeleted = _this.isDeleted();

    eventIdProduct = _this.getEventIdProduct();
    if (eventIdProduct !== null) {
      props = eventIdProduct.get('properties');
      _summary.id = props.eventsource + props.eventsourcecode;
      _summary.source = props.eventsource;
      _summary.sourceCode = props.eventsourcecode;
      _summary.eventIdProduct = eventIdProduct;
    }

    originProduct = _this.getProductWithOriginProperties();
    if (originProduct !== null) {
      props = originProduct.get('properties');
      _summary.depth = Number(props.depth);
      _summary.latitude = Number(props.latitude);
      _summary.longitude = Number(props.longitude);
      _summary.time = new Date(props.eventtime);
      _summary.originProduct = originProduct;
    }

    magnitudeProduct = _this.getPreferredMagnitudeProduct();
    if (magnitudeProduct !== null) {
      _summary.magnitude = Number(magnitudeProduct.getProperty('magnitude'));
      _summary.magnitudeProduct = magnitudeProduct;
    }

    _summary.eventCodes = _this.getAllEventCodes();
    _summary.properties = _properties;

    return _summary;
  };


  _initialize(eventDetails, options);
  eventDetails = null;
  options = null;
  return _this;
};


// add static methods
CatalogEvent.productMapToList = __productMapToList;
CatalogEvent.getWithoutDeleted = __getWithoutDeleted;
CatalogEvent.getWithoutSuperseded = __getWithoutSuperseded;
CatalogEvent.getSortedMostPreferredFirst = __getSortedMostPreferredFirst;
CatalogEvent.productHasOriginProperties = __productHasOriginProperties;


module.exports = CatalogEvent;

},{"pdl/Product":"pdl/Product","util/Util":"util/Util"}],"pdl/Content":[function(require,module,exports){
'use strict';

var Model = require('mvc/Model'),
    Util = require('util/Util');


/**
 * Check if attribute is valid.
 *
 * @param attrs {Object}
 *     object with keys/values.
 * @param attr {String}
 *     attribute name.
 * @return
 *     true, when `attrs` hsa a property named `attr`
 *     with a value that is not undefined; false, otherwise.
 */
var __attrIsValid = function (attrs, attr) {
  var value;

  if (attrs.hasOwnProperty(attr)) {
    value = attrs[attr];

    if (value !== null && typeof value !== 'undefined') {
      return true;
    }
  }

  return false;
};

/**
 * Product content.
 *
 * @param options {Object}
 * @param options.bytes {String}
 *     content as a string.
 *     Content should have `url` or `bytes`, but not both.
 * @param options.contentType {String}
 *     mime type, default 'text/plain'.
 * @param options.id {String}
 *     unique identifier, default null.
 * @param options.lastModified {Number}
 *     millisecond epoch time stamp, default new Date().getTime().
 * @param options.length {String}
 *     reported length of content.
 * @param options.url {String}
 *     url where content is available.
 *     Content should have `url` or `bytes`, but not both.
 */
var Content = function (options) {
  var _this,
      _initialize;


  _this = Model(Util.extend({
    bytes: null,
    contentType: 'text/plain',
    id: null,
    lastModified: (new Date()).getTime(),
    length: 0,
    url: null
  }, options));

  _initialize = function (/*options*/) {
    var bytes = _this.get('bytes'),
        url = _this.get('url');

    if (bytes === null && url === null) {
      throw new Error('Invalid product contents. Must have one of bytes or ' +
          'url.');
    }

    if (bytes !== null && bytes.length !== _this.get('length')) {
      console.log('Invalid product contents. Actual length and claimed ' +
          'length differ.');
    }
  };

  /**
   * Override set method to ensure only one of `url` or `bytes` is set.
   *
   * @param attributes {Object}
   *     attributes to set.
   */
  _this.set = Util.compose(function (attributes) {
    var hasBytes,
        hasUrl;

    hasBytes = attributes.hasOwnProperty('bytes');
    hasUrl = attributes.hasOwnProperty('url');

    // Content has either bytes, or url, but not both. If one is set,
    // clear the other...
    if (hasUrl && attributes.url !== null) {
      attributes.bytes = null;
    } else if (hasBytes && attributes.bytes !== null) {
      attributes.url = null;
    }

    return attributes;
  }, _this.set);

  /**
   * Validate content attributes.
   *
   * Checks that content has an `id` and one of `url` or `bytes` attributes.
   *
   * @throws {Error}
   *     when content is invalid
   */
  _this.validate = function () {
    var attrs;

    attrs = _this.get();

    if (!__attrIsValid(attrs, 'id')) {
      throw new Error('Product content must have a valid id');
    } else if (!__attrIsValid(attrs, 'url') && !__attrIsValid(attrs, 'bytes')) {
      throw new Error('Product content must have content');
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = Content;

},{"mvc/Model":"mvc/Model","util/Util":"util/Util"}],"pdl/Product":[function(require,module,exports){
'use strict';

var Collection = require('mvc/Collection'),
    Content = require('pdl/Content'),
    Model = require('mvc/Model'),
    Util = require('util/Util');


var _STATUS_UPDATE = 'UPDATE',
    _STATUS_DELETE = 'DELETE';

var _getBaseType,
    _getFullType;

/**
 * Remove "internal-" prefix and "-scenario" suffix from product "type".
 *
 * @param type {String}
 *     The initial product type.
 *
 * @return {String}
 *     The base product type without any known prefix or suffix.
 */
_getBaseType = function (type) {
  var base;

  base = type;

  if (base && base.match(/^internal-/)) {
    base = base.replace('internal-', '');
  }

  if (base && base.match(/-scenario$/)) {
    base = base.replace('-scenario', '');
  }

  return base;
};

/**
 * Add "internal-" prefix or "-scenario" suffix to product "type".
 *
 * @param type {String}
 *     The base product type.
 * @param config {Object}
 *     Configuration object containing INTERNAL_MODE and/or SCENARIO_MODE flags
 *     as appropriate.
 *
 * @return {String}
 *     The actual product type depending on the current configuration.
 */
_getFullType = function (type, config) {
  var fullType;

  config = config || {};
  fullType = type;

  if (config.INTERNAL_MODE) {
    fullType = 'internal-' + fullType;
  }

  if (config.SCENARIO_MODE) {
    fullType += '-scenario';
  }

  return fullType;
};


/**
 * A product object.
 *
 * Typically created from an event detail feed.
 * Created manually for new products.
 *
 * @param options {Object}
 *        a product object from an event detail feed.
 * @param options.code {String}
 *        product code.
 * @param options.contents {Collection<Content>}.
 * @param options.id {String}
 *        product id URN, unique per product.
 * @param options.indexid {String}
 *        server id for product, may vary between servers.
 * @param options.indexTime {Number}
 *        millisecond epoch timestamp when product was indexed on server.
 * @param options.links {Object}
 *        keys are link relation names.
 *        values are arrays of uri Strings for relation.
 * @param options.preferredWeight {Number}
 *        optional, current preferred weight of product.
 * @param options.properties {Object}
 *        keys are property names.
 *        values must be strings.
 * @param options.source {String}
 *        product source.
 * @param options.status {String}
 *        product status.
 *        default Product.STATUS_UPDATE,
 *        use Product.STATUS_DELETE for deletes.
 * @param options.type {String}
 *        product type.
 * @param options.updateTime {Number}
 *        product update time.
 */
var Product = function (options) {
  var _this,
      _initialize;


  _this = Model(Util.extend({
    code: null,
    contents: null,
    id: null,
    indexid: null,
    indexTime: null,
    links: {},
    preferredWeight: null,
    properties: {},
    source: null,
    status: _STATUS_UPDATE,
    type: null,
    updateTime: null
  }, options));

  _initialize = function (/*options*/) {
    var contents,
        properties;

    // make sure contents and properties are defined
    contents = _this.get('contents') || [];
    properties = _this.get('properties') || [];

    // make sure contents are Content objects
    if (Array.isArray(contents)) {
      // Handle case if given an array
      contents = contents.map(function (content) {
        if (!content.get) {
          content = Content(content);
        }
        return content;
      });
      contents = Collection(contents);
    } else if (!contents.hasOwnProperty('get') ||
        !contents.hasOwnProperty('add')) {
      // Handle case when given an object map (like from data feed)
      contents = Object.keys(contents).map(function (key) {
        return Content(Util.extend({'id': key}, contents[key]));
      });
      contents = Collection(contents);
    }

    _this.set({
      'contents': contents,
      'properties': properties
    });
  };

  /**
   * Convenience method to access product content.
   *
   * @param path {String}
   *     content path.
   * @return {Content}
   *     content object, or null if not found.
   */
  _this.getContent = function (path) {
    var contents;
    contents = _this.get('contents');
    return contents.get(path);
  };

  /**
   * Convenience method to access product property..
   *
   * @param name {String}
   *     property name.
   * @return {Content}
   *     property value, or null if not found.
   */
  _this.getProperty = function (name) {
    var properties;
    properties = _this.get('properties');
    if (properties.hasOwnProperty(name)) {
      return properties[name];
    }
    return null;
  };

  /**
   * Check whether product is deleted.
   *
   * @return {Boolean}
   *     true, if product status is Product.STATUS_DELETE.
   *     false, otherwise.
   */
  _this.isDeleted = function () {
    var status;
    status = this.get('status').toUpperCase();
    if (status === Product.STATUS_DELETE) {
      return true;
    }
    return false;
  };

  /**
   * Check whether product is reviewed.
   *
   * @return {Boolean}
   *    true, if product review-status property is `reviewed`,
   *    false, if product review-status property is any other value,
   *    null, if product does not have a review-status property.
   */
  _this.isReviewed = function () {
    var reviewed;
    reviewed = _this.getProperty('review-status');
    if (reviewed !== null) {
      return (reviewed.toUpperCase() === 'REVIEWED');
    }
    return null;
  };

  _this.setProperty = function (obj) {
    var changes,
        properties;

    properties = _this.get('properties');
    changes = [];

    Object.keys(obj).forEach(function (property) {
      var value;

      value = obj[property];

      if (properties[property] !== value) {
        changes.push(property);
        properties[property] = value;
      }
    });

    changes.forEach(function (change) {
      _this.trigger('change:property:' + change);
    });

    _this.trigger('change:property');
    _this.trigger('change');
  };

  /**
   * Override toJSON method so contents are output as object map.
   *
   * @param json {Object}
   *     JSONified object from Model.toJSON.
   * @return {Object}
   *     object, with contents as an object with content paths as keys.
   */
  _this.toJSON = Util.compose(_this.toJSON, function (json) {
    var objectContents = {};

    json.contents.forEach(function (content) {
      var id;

      id = content.id;

      objectContents[id] = {
        contentType: content.contentType,
        length: content.length,
        lastModified: content.lastModified
      };

      if (content.hasOwnProperty('url') && content.url !== null) {
        objectContents[id].url = content.url;
      } else if (content.hasOwnProperty('bytes') && content.bytes !== null) {
        objectContents[id].bytes = content.bytes;
      }
    });

    json.contents = objectContents;

    return json;
  });


  _initialize(options);
  options = null;
  return _this;
};


Product.getBaseType = _getBaseType;
Product.getFullType = _getFullType;

Product.STATUS_UPDATE = _STATUS_UPDATE;
Product.STATUS_DELETE = _STATUS_DELETE;


module.exports = Product;

},{"mvc/Collection":32,"mvc/Model":"mvc/Model","pdl/Content":"pdl/Content","util/Util":"util/Util"}],"scientific/ScientificSummaryModule":[function(require,module,exports){
'use strict';


var Attribution = require('core/Attribution'),
    BeachBallView = require('moment-tensor/BeachBallView'),
    Formatter = require('core/Formatter'),
    Product = require('pdl/Product'),
    SummaryModule = require('core/SummaryModule'),
    Tensor = require('moment-tensor/Tensor'),
    Util = require('util/Util'),

    // these modules create a circular dependency,
    // require them in initialize
    FiniteFaultModule,
    FocalMechanismModule,
    MomentTensorModule,
    OriginModule;



var _DEFAULTS,
    _ID,
    _TITLE,
    _TYPES;


_ID = 'scientific';
_TITLE = 'Technical';
_TYPES = [
  'origin',
  'phase-data',
  'moment-tensor',
  'focal-mechanism',
  'finite-fault',
  'scitech-link'
];

_DEFAULTS = {
  mtFillColor: '#6ea8ff',
  fmFillColor: '#ffaa69'
};


/**
 * Module for the scientific summary page. This module renders a table-like
 * set of summary-level data for the products contained within the "scientific"
 * section of the event page.
 *
 * @param options {Object}
 *     Configuration options for this module. See initialize documentation for
 *     details.
 */
var ScientificSummaryModule = function (options) {
  var _this,
      _initialize,

      _fmFillColor,
      _formatter,
      _mtFillColor;


  options = Util.extend({}, _DEFAULTS, options);
  _this = SummaryModule(options);

  /**
   * Constructor. Initializes a new {ScientificSummaryModule}.
   *
   * @param options {Object}
   *     Configuration options for the module. Specifically...
   * @param options.mtFillColor {String}
   *     A hexadecimal color to be used when rendering moment tensors.
   * @param options.fmFillColor {String}
   *     A hexadecimal color to be used when rendering focal mechanisms.
   */
  _initialize = function (options) {
    _this.ID = _ID;
    _this.TITLE = _TITLE;

    _formatter = options.formatter || Formatter();
    _mtFillColor = options.mtFillColor;
    _fmFillColor = options.fmFillColor;

    // these modules create a circular dependency,
    // require them first time initialize is called
    FiniteFaultModule = FiniteFaultModule ||
        require('finite-fault/FiniteFaultModule');
    FocalMechanismModule = FocalMechanismModule ||
        require('focal-mechanism/FocalMechanismModule');
    MomentTensorModule = MomentTensorModule ||
        require('moment-tensor/MomentTensorModule');
    OriginModule = OriginModule ||
        require('origin/OriginModule');
  };

  /**
   * Frees resources associated with this module.
   *
   */
  _this.destroy = Util.compose(function () {
    _fmFillColor = null;
    _formatter = null;
    _mtFillColor = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Creates the summary section for the finite fault product(s).
   *
   * @param products {Array}
   *     An array of products to summarize.
   *
   * @return {DocumentFragment}
   *     A (potentially empty) document fragment containing the summary for
   *     the given set of products.
   */
  _this.getFiniteFaultSummary = function (products) {
    return _this.createSummary(products, 'Finite Fault', [
        'Catalog',
        'Preview',
        'Source'
      ],
      _this.getFiniteFaultRow
    );
  };

  /**
   * Creates a row with summary information for the given product.
   *
   * @param product {Product}
   *     The product to summarize
   * @param index {Number}
   *     The place in which this product ranks among other products of the
   *     same type within the context of the current event. 0 = most preferred
   *
   * @return {DOMElement}
   *     A TR DOM element.
   */
  _this.getFiniteFaultRow = function (product, index) {
    var map,
        preferred,
        row;

    map = product.getContent('basemap.png');
    preferred = (index === 0);
    row = _this.createRow(preferred);

    row.innerHTML = [
      '<th scope="row">',
        _this.getCatalogMarkup(FiniteFaultModule, product, preferred),
      '</th>',
      '<td>',
        '<img src="', map.get('url'), '" class="image" alt="Finite Fault"/>',
      '</td>',
      '<td>',
        Attribution.getProductAttribution(product),
      '</td>'
    ].join('');

    return row;
  };

  /**
   * Creates the summary section for the focal mechanism product(s).
   *
   * @param products {Array}
   *     An array of products to summarize.
   *
   * @return {DocumentFragment}
   *     A (potentially empty) document fragment containing the summary for
   *     the given set of products.
   */
  _this.getFocalMechanismSummary = function (products) {
    return _this.createSummary(products, 'Focal Mechanism', [
        'Catalog',
        'Mechanism',
        'Nodal Plan 1<br/><small>Strike, Dip, Rake</small>',
        'Nodal Plan 1<br/><small>Strike, Dip, Rake</small>',
        'Source'
      ],
      _this.getFocalMechanismRow);
  };

  /**
   * Creates a row with summary information for the given product.
   *
   * @param product {Product}
   *     The product to summarize
   * @param index {Number}
   *     The place in which this product ranks among other products of the
   *     same type within the context of the current event. 0 = most preferred
   *
   * @return {DOMElement}
   *     A TR DOM element.
   */
  _this.getFocalMechanismRow = function (product, index) {
    var beachball,
        np1,
        np2,
        preferred,
        row,
        tensor;

    preferred = (index === 0);
    row = _this.createRow(preferred);

    tensor = Tensor.fromProduct(product);
    np1 = tensor.NP1;
    np2 = tensor.NP2;

    row.innerHTML = [
      '<th scope="row">',
        _this.getCatalogMarkup(FocalMechanismModule, product, preferred),
      '</th>',
      '<td class="beachball"></td>',
      '<td>(',
        _formatter.angle(np1.strike), ', ',
        _formatter.angle(np1.dip), ', ',
        _formatter.angle(np1.rake),
      ')</td>',
      '<td>(',
        _formatter.angle(np2.strike), ', ',
        _formatter.angle(np2.dip), ', ',
        _formatter.angle(np2.rake),
      ')</td>',
      '<td>',
        Attribution.getProductAttribution(product),
      '</td>'
    ].join('');

    beachball = BeachBallView({
      el: row.querySelector('.beachball'),
      fillColor: _fmFillColor,
      labelAxes: false,
      labelPlanes: false,
      size: 30,
      tensor: tensor
    });

    beachball.render();
    beachball.destroy();
    beachball = null;

    return row;
  };

  _this.getLinksHeader = function () {
    var header;

    header = document.createElement('h3');
    header.innerHTML = 'Scientific and Technical Links';

    return header;
  };

  /**
   * Creates the summary section for the moment tensor product(s).
   *
   * @param products {Array}
   *     An array of products to summarize.
   *
   * @return {DocumentFragment}
   *     A (potentially empty) document fragment containing the summary for
   *     the given set of products.
   */
  _this.getMomentTensorSummary = function (products) {
    return _this.createSummary(products, 'Moment Tensor', [
        'Catalog',
        'Tensor',
        'Magnitude',
        'Depth',
        '% <abbr title="Double Couple">DC</abbr>',
        'Source'
      ],
      _this.getMomentTensorRow
    );
  };

  /**
   * Creates a row with summary information for the given product.
   *
   * @param product {Product}
   *     The product to summarize
   * @param index {Number}
   *     The place in which this product ranks among other products of the
   *     same type within the context of the current event. 0 = most preferred
   *
   * @return {DOMElement}
   *     A TR DOM element.
   */
  _this.getMomentTensorRow = function (product, index) {
    var beachball,
        preferred,
        row,
        tensor;

    tensor = Tensor.fromProduct(product);
    preferred = (index === 0);
    row = _this.createRow(preferred);

    row.innerHTML = [
      '<th scope="row">',
        _this.getCatalogMarkup(MomentTensorModule, product, preferred),
      '</th>',
      '<td class="beachball"></td>',
      '<td>',
        _formatter.magnitude(
          tensor.magnitude,
          product.getProperty('derived-magnitude-type') || 'Mw'
        ),
      '</td>',
      '<td>',
        _formatter.depth(tensor.depth, 'km'),
      '</td>',
      '<td>',
        Math.round(tensor.percentDC * 100) + ' %',
      '</td>',
      '<td>',
        Attribution.getProductAttribution(product),
      '</td>'
    ].join('');

    beachball = BeachBallView({
      el: row.querySelector('.beachball'),
      fillColor: _mtFillColor,
      labelAxes: false,
      labelPlanes: false,
      size: 30,
      tensor: tensor
    });

    beachball.render();
    beachball.destroy();
    beachball = null;

    return row;
  };

  /**
   * Checks origin and phase-data type products on the given event. Prefers
   * phase-data from the same source and code unless there is a newer
   * corresponding origin.
   *
   * @param ev {CatalogEvent}
   *     The event to check.
   *
   * @return {Array}
   *     An array of {Product}s of either origin or phase-data type. Most
   *     preferred product first.
   */
  _this.getOriginProducts = function (ev) {
    var config,
        products;

    config = _this.model.get('config');

    if (ev) {
      products = ev.getProducts(Product.getFullType('origin', config)).map(
      function (origin) {
        var phase;

        // Find a corresponding phase-data product
        phase = ev.getProductById(Product.getFullType('phase-data', config),
            origin.get('source'), origin.get('code'));

        // Prefer the phase-data product if it is at least as new as the origin
        if (phase && phase.get('updateTime') >= origin.get('updateTime')) {
          return phase;
        } else {
          return origin;
        }
      });
    } else {
      products = [];
    }

    return products;
  };

  /**
   * Creates the summary section for the origin product(s).
   *
   * @param products {Array}
   *     An array of products to summarize.
   *
   * @return {DocumentFragment}
   *     A (potentially empty) document fragment containing the summary for
   *     the given set of products.
   */
  _this.getOriginSummary = function (products) {
    return _this.createSummary(products, 'Origin', [
        'Catalog',
        '<abbr title="Magnitude">Mag</abbr>',
        'Time',
        'Depth',
        'Review Status',
        'Location',
        'Source'
      ],
      _this.getOriginRow
    );
  };

  /**
   * Creates a row with summary information for the given product.
   *
   * @param product {Product}
   *     The product to summarize
   * @param index {Number}
   *     The place in which this product ranks among other products of the
   *     same type within the context of the current event. 0 = most preferred
   *
   * @return {DOMElement}
   *     A TR DOM element.
   */
  _this.getOriginRow = function (product, index) {
    var eventTime,
        preferred,
        reviewStatus,
        row;

    eventTime = new Date(product.getProperty('eventtime'));
    preferred = (index === 0);
    row = _this.createRow(preferred);
    reviewStatus = product.getProperty('review-status') || 'automatic';

    row.innerHTML = [
      '<th scope="row">',
        _this.getCatalogMarkup(OriginModule, product, preferred),
      '</th>',
      '<td>',
        _formatter.magnitude(
          product.getProperty('magnitude'),
          product.getProperty('magnitude-type')
        ),
      '</td>',
      '<td>',
        '<abbr title="', _formatter.datetime(eventTime, 0), '">',
          _formatter.time(eventTime),
        '</abbr>',
      '</td>',
      '<td>',
        _formatter.depth(product.getProperty('depth')),
      '</td>',
      '<td>',
        reviewStatus.toUpperCase(),
      '</td>',
      '<td>',
        _formatter.location(
          product.getProperty('latitude'),
          product.getProperty('longitude')
        ),
      '</td>',
      '<td>',
        Attribution.getProductAttribution(product),
      '</td>'
    ].join('');

    return row;
  };

  /**
   * Renders the module header, content, and footer.
   *
   */
  _this.render = function () {
    var faults,
        fragment,
        headers,
        links,
        mechs,
        origins,
        tensors,
        texts;

    fragment = document.createDocumentFragment();

    _this.clearLinks(true);
    _this.clearTexts(true);

    faults = _this.getProducts('finite-fault');
    headers = _this.getProducts('scitech-header');
    links = _this.getProducts('scitech-link');
    mechs = _this.getProducts('focal-mechanism');
    origins = _this.getOriginProducts(_this.model.get('event'));
    tensors = _this.getProducts('moment-tensor');
    texts = _this.getProducts('scitech-text');

    Util.empty(_this.header);
    _this.header.appendChild(_this.getTexts(headers));

    fragment.appendChild(_this.getOriginSummary(origins));
    fragment.appendChild(_this.getMomentTensorSummary(tensors));
    fragment.appendChild(_this.getFiniteFaultSummary(faults));
    fragment.appendChild(_this.getFocalMechanismSummary(mechs));
    fragment.appendChild(_this.getTexts(texts));
    fragment.appendChild(_this.getLinks(links));

    Util.empty(_this.content);
    _this.content.appendChild(fragment);

    _this.footer.innerHTML = '';
  };

  _initialize(options);
  options = null;
  return _this;
};


ScientificSummaryModule.ID = _ID;
ScientificSummaryModule.TITLE = _TITLE;
ScientificSummaryModule.TYPES = _TYPES;


module.exports = ScientificSummaryModule;

},{"core/Attribution":"core/Attribution","core/Formatter":"core/Formatter","core/SummaryModule":"core/SummaryModule","finite-fault/FiniteFaultModule":"finite-fault/FiniteFaultModule","focal-mechanism/FocalMechanismModule":"focal-mechanism/FocalMechanismModule","moment-tensor/BeachBallView":"moment-tensor/BeachBallView","moment-tensor/MomentTensorModule":"moment-tensor/MomentTensorModule","moment-tensor/Tensor":"moment-tensor/Tensor","origin/OriginModule":"origin/OriginModule","pdl/Product":"pdl/Product","util/Util":"util/Util"}],"shakemap/ShakeMapInfoView":[function(require,module,exports){
'use strict';


var ContentView = require('core/ContentView'),
    Formatter = require('core/Formatter'),
    Util = require('util/Util');


var _DEFAULTS = {
  empty: '&ndash;',
  formatter: null
};


/**
 * View for ShakeMap info.json content.
 *
 * @param options {Object}
 * @param options.empty {String}
 *     value to display if a field is missing or empty.
 *     default '&ndash;'.
 * @param options.formatter {Formatter}
 *     formatting object.
 */
var ShakeMapInfoView = function (options) {
  var _this,
      _initialize,

      _empty,
      _formatter;


  _this = ContentView(options);

  _initialize = function (options) {
    options = Util.extend({}, _DEFAULTS, options);
    _empty = options.empty;
    _formatter = options.formatter || Formatter();
  };


  /**
   * Format one ground motion row.
   *
   * @param gm {Object}
   *     ground motion object.
   * @param label {String}
   *     markup for `th` element.
   * @return {String}
   *     markup for table row.
   */
  _this.formatGroundMotion = function (gm, label) {
    var units;

    units = gm.units;

    return '<tr>' +
        '<th scope="row">' + label + '</th>' +
        '<td>' + gm.max_grid + ' ' + units + '</td>' +
        '<td>' + gm.max + ' ' + units + '</td>' +
        '<td>' + gm.bias + '</td>' +
        '</tr>';
  };

  /**
   * Format the output ground motions table.
   *
   * @param groundMotions {Object}
   *     the output ground motions section of info.json.
   * @return {String}
   *     markup for output ground motions table.
   */
  _this.formatOutputGroundMotions = function (groundMotions) {
    var buf,
        headers;

    buf = [];
    buf.push('<h3>Ground Motion/Intensity Information</h3>');

    buf.push(
        '<div class="horizontal-scrolling">' +
        '<table>' +
        '<thead>' +
          '<tr>' +
            '<th scope="col">Type</th>' +
            '<th scope="col">Max value in grid</th>' +
            '<th scope="col">Max value on land</th>' +
            '<th scope="col">Bias</th>' +
          '</tr>' +
        '</thead>' +
        '<tbody>');

    headers = {
      'intensity': 'Intensity',
      'pga': '<abbr title="Peak Ground Acceleration">PGA</abbr>',
      'pgv': '<abbr title="Peak Ground Velocity">PGV</abbr>',
      'psa03': '<abbr title="Pseudo Spectral Acceleration 0.3 s">' +
          'PSA03</abbr>',
      'psa10': '<abbr title="Pseudo Spectral Acceleration 1.0 s">' +
          'PSA10</abbr>',
      'psa30': '<abbr title="Pseudo Spectral Acceleration 3.0 s">' +
          'PSA30</abbr>'
    };

    Object.keys(headers).forEach(function (key) {
      if (key in groundMotions) {
        buf.push(_this.formatGroundMotion(groundMotions[key], headers[key]));
      }
    });

    Object.keys(groundMotions).forEach(function (key) {
      if (!(key in headers)) {
        // unknown groundMotion
        buf.push(_this.formatGroundMotion(groundMotions[key], key));
      }
    });

    buf.push(
        '</tbody>' +
        '</table>' +
        '</div>');

    return buf.join('');
  };

  /**
   * Format the output map information table.
   *
   * @param mapInformation {Object}
   *     the output map information section of info.json.
   * @return {String}
   *     markup for the map information table.
   */
  _this.formatOutputMapInformation = function (mapInformation) {
    var gridPoints,
        gridSpan,
        gridSpacing,
        max,
        min;

    gridPoints = mapInformation.grid_points;
    gridSpan = mapInformation.grid_span;
    gridSpacing = mapInformation.grid_spacing;
    max = mapInformation.max;
    min = mapInformation.min;

    return '<h3>Map Information</h3>' +
        '<div class="horizontal-scrolling">' +
        '<table>' +
          '<thead>' +
          '<tr>' +
            '<th scope="col">Type</th>' +
            '<th scope="col">Latitude</th>' +
            '<th scope="col">Longitude</th>' +
          '</tr>' +
          '</thead>' +
          '<tbody>' +
          '<tr>' +
            '<th scope="row">Span</th>' +
            '<td>' + gridSpan.latitude + '&deg;</td>' +
            '<td>' + gridSpan.longitude + '&deg;</td>' +
          '</tr>' +
          '<tr>' +
            '<th scope="row">Grid Spacing</th>' +
            '<td>' + gridSpacing.latitude + ' km</td>' +
            '<td>' + gridSpacing.longitude + ' km</td>' +
          '</tr>' +
          '<tr>' +
            '<th scope="row">Number of points</th>' +
            '<td>' + gridPoints.latitude + '</td>' +
            '<td>' + gridPoints.longitude + '</td>' +
          '</tr>' +
          '<tr>' +
            '<th scope="row">Min</th>' +
            '<td>' + _formatter.latitude(min.latitude) + '</td>' +
            '<td>' + _formatter.longitude(min.longitude) + '</td>' +
          '</tr>' +
          '<tr>' +
            '<th scope="row">Max</th>' +
            '<td>' + _formatter.latitude(max.latitude) + '</td>' +
            '<td>' + _formatter.longitude(max.longitude) + '</td>' +
          '</tr>' +
          '</tbody>' +
        '</table>' +
        '</div>';
  };

  /**
   * Format the processing ground motions table.
   *
   * @param groundMotions {Object}
   *     the processing ground motions section of info.json.
   * @return {String}
   *     markup for processing ground motions table.
   */
  _this.formatProcessingGroundMotions = function (groundMotions) {
    var buf,
        headers,
        formatGroundMotion;

    buf = [];
    buf.push('<h3>Ground Motion/Intensity Information</h3>');

    buf.push(
        '<div class="horizontal-scrolling">' +
        '<table>' +
          '<thead>' +
            '<tr>' +
            '<th scope="col">Type</th>' +
            '<th scope="col">Module</th>' +
            '<th scope="col">Reference</th>' +
            '</tr>' +
          '</thead>' +
          '<tbody>');

    /**
     * Format one ground motion row.
     *
     * @param gm {Object}
     *     ground motion object.
     * @param label {String}
     *     markup for `th` element.
     * @return {String}
     *     markup for table row.
     */
    formatGroundMotion = function (gm, label) {
      var units;

      units = gm.units;

      return '<tr>' +
          '<th scope="row">' + label + '</th>' +
          '<td>' + gm.module + '</td>' +
          '<td>' + gm.reference + '</td>' +
        '</tr>';
    };

    headers = {
      'gmpe': '<abbr title="Ground Motion Prediction Equation">GMPE</abbr>',
      'ipe': '<abbr title="Intensity Prediction Equation">IPE</abbr>',
      'mi2pgm': '<abbr title="Ground Motion Intensity Conversion Equation">' +
          'GMICE</abbr>',
      'pgm2mi':
          '<abbr title="Inverse Ground Motion Intensity Conversion Equation">' +
          'IGMICE</abbr>',
      'directivity': 'Directivity',
      'basin_correction': 'Basin'
    };

    Object.keys(headers).forEach(function (key) {
      if (key in groundMotions) {
        buf.push(formatGroundMotion(groundMotions[key], headers[key]));
      }
    });
    Object.keys(groundMotions).forEach(function (key) {
      if (!(key in headers)) {
        // unknown groundMotion
        buf.push(formatGroundMotion(groundMotions[key], key));
      }
    });

    buf.push('</tbody>' +
        '</table>' +
      '</div>');

    return buf.join('');
  };

  /**
   * Format the processing ground motions table.
   *
   * @param rois {Object}
   *     the processing rois section of info.json.
   * @return {String}
   *     markup for processing rois table.
   */
  _this.formatProcessingRois = function (rois) {
    var groundMotion,
        intensity;

    groundMotion = rois.gm;
    intensity = rois.intensity;

    return '<h3>ROI</h3>' +
      '<div class="horizontal-scrolling">' +
        '<table>' +
          '<thead>' +
            '<tr>' +
              '<th scope="col">Type</th>' +
              '<th scope="col">ROI</th>' +
              '<th scope="col">Observation Decay</th>' +
            '</tr>' +
          '</thead>' +
          '<tbody>' +
            '<tr>' +
              '<th scope="row">Ground Motion</th>' +
              '<td>' + groundMotion.roi + ' km</td>' +
              '<td>' + groundMotion.decay + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Intensity</th>' +
              '<td>' + intensity.roi + ' km</td>' +
              '<td>' + intensity.decay + '</td>' +
            '</tr>' +
          '</tbody>' +
        '</table>' +
      '</div>';
  };

  /**
   * Error callback if unable to load info.json.
   */
  _this.onError = function () {
    _this.el.innerHTML = '<p class="alert error">' +
        'Unable to load ShakeMap information' +
      '</p>';
  };

  /**
   * Success callback, once info.json has loaded.
   */
  _this.onSuccess = function (json) {
    var el = _this.el;

    el.innerHTML =
        '<div class="row">' +
          '<div class="one-of-two column shakemapinfo-input"></div>' +
          '<div class="one-of-two column shakemapinfo-output"></div>' +
        '</div>' +
        '<div class="shakemapinfo-processing"></div>';

    _this.renderInput(json, el.querySelector('.shakemapinfo-input'));
    _this.renderProcessing(json, el.querySelector('.shakemapinfo-processing'));
    _this.renderOutput(json, el.querySelector('.shakemapinfo-output'));
  };

  /**
   * Render the input section of info.json.
   *
   * @param el {DOMElement}
   *        element where content should be rendered.
   */
  _this.renderInput = function (json, el) {
    var buf,
        info,
        input;

    input = json.input;

    buf = [];
    buf.push('<h2>Input</h2>');

    info = input.event_information;
    buf.push('<h3>Event Information</h3>' +
      '<div class="horizontal-scrolling">' +
        '<table>' +
          '<tbody>' +
            '<tr>' +
              '<th scope="row">Description</th>' +
              '<td>' + info.event_description + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">ID</th>' +
              '<td>' + info.event_id + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Magnitude</th>' +
              '<td>' + _formatter.magnitude(info.magnitude) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Depth</th>' +
              '<td>' + _formatter.depth(info.depth, 'km') + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Longitude</th>' +
              '<td>' + _formatter.longitude(info.longitude) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Latitude</th>' +
              '<td>' + _formatter.latitude(info.latitude) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Origin Time</th>' +
              '<td>' + info.origin_time + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Mechanism</th>' +
              '<td>' + (info.src_mech || _empty) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Mechanism source</th>' +
              '<td>' + (info.mech_src || _empty) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Location</th>' +
              '<td>' + info.location + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Flinn Engdahl region</th>' +
              '<td>' + info.feregion + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Fault file(s)</th>' +
              '<td>' + (info.faultfiles || _empty) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Fault reference(s)</th>' +
              '<td>' + (info.fault_ref || _empty) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Tectonic regime</th>' +
              '<td>' + (info.tectonic_regime || _empty) + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Number of seismic stations</th>' +
              '<td>' + info.seismic_stations + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Number of DYFI stations</th>' +
              '<td>' + info.intensity_observations + '</td>' +
            '</tr>' +
          '</tbody>' +
        '</table>' +
      '</div>');

    el.innerHTML = buf.join('');
  };

  /**
   * Render the output section of info.json.
   *
   * @param json {Object}
   *        parsed info.json content.
   * @param el {DOMElement}
   *        element where content should be rendered.
   */
  _this.renderOutput = function (json, el) {
    var buf,
        output,
        uncertainty;

    output = json.output;

    buf = [];
    buf.push('<h2>Output</h2>');
    buf.push(_this.formatOutputGroundMotions(output.ground_motions));
    buf.push(_this.formatOutputMapInformation(output.map_information));

    uncertainty = output.uncertainty;
    buf.push('<h3>Uncertainty</h3>' +
      '<div class="horizontal-scrolling">' +
        '<table>' +
          '<tbody>' +
            '<tr>' +
              '<th scope="row">Mean of map uncertainty</th>' +
              '<td>' + uncertainty.mean_uncertainty_ratio + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Emperical ShakeMap grade</th>' +
              '<td>' + uncertainty.grade + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Flagged seismic stations</th>' +
              '<td>' + uncertainty.total_flagged_pgm + '</td>' +
            '</tr>' +
            '<tr>' +
              '<th scope="row">Flagged DYFI stations</th>' +
              '<td>' + uncertainty.total_flagged_mi + '</td>' +
            '</tr>' +
          '</tbody>' +
        '</table>' +
      '</div>');

    el.innerHTML = buf.join('');
  };

  /**
   * Render the processing section of info.json.
   *
   * @param json {Object}
   *        parsed info.json content.
   * @param el {DOMElement}
   *        element where content should be rendered.
   */
  _this.renderProcessing = function (json, el) {
    var buf,
        misc,
        processing,
        response,
        versions;

    processing = json.processing;

    buf = [];
    buf.push('<h2>Processing</h2>' +
        '<div class="row">');

    buf.push('<div class="one-of-two column">' +
        _this.formatProcessingGroundMotions(processing.ground_motion_modules) +
      '</div>');

    misc = processing.miscellaneous;
    buf.push(
      '<div class="one-of-two column">' +
        '<h3>Miscellaneous</h3>' +
        '<div class="horizontal-scrolling">' +
          '<table>' +
            '<tbody>' +
              '<tr>' +
                '<th scope="row">Used log amp to compute bias?</th>' +
                '<td>' + misc.bias_log_amp + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">' +
                  'Maximum distance to include station in bias' +
                '</th>' +
                '<td>' +
                  _formatter.distance(misc.bias_max_range, 'km') +
                '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Max magnitude to compute bias</th>' +
                '<td>' + _formatter.magnitude(misc.bias_max_mag) + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Min allowed bias</th>' +
                '<td>' + (misc.bias_min_bias || _empty) + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Maximum magnitude to flag outliers</th>' +
                '<td>' + _formatter.magnitude(misc.outlier_max_mag) + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Norm of the bias</th>' +
                '<td>' + (misc.bias_norm || _empty) + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">' +
                  'Min # of stations necessary to compute bias' +
                '</th>' +
                '<td>' + (misc.bias_min_stations || _empty) + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Max allowed bias</th>' +
                '<td>' + (misc.bias_max_bias || _empty) + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Outlier level (# of std dev)</th>' +
                '<td>' + (misc.outlier_deviation_level || _empty) + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Median distance used</th>' +
                '<td>' + misc.median_dist + '</td>' +
              '</tr>' +
            '</tbody>' +
          '</table>' +
        '</div>' +
      '</div>');

    versions = processing.shakemap_versions;
    buf.push(
      '<div class="one-of-two column">' +
        '<h3>ShakeMap Versions</h3>' +
        '<div class="horizontal-scrolling">' +
          '<table>' +
            '<tbody>' +
              '<tr>' +
                '<th scope="row">Code</th>' +
                '<td>' + versions.shakemap_revision + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Map</th>' +
                '<td>' + versions.map_version + '</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Date</th>' +
                '<td>' + versions.process_time + '</td>' +
              '</tr>' +
            '</tbody>' +
          '</table>' +
        '</div>' +
      '</div>');

    response = processing.site_response;
    buf.push(
      '<div class="one-of-two column">' +
        '<h3>Site Response</h3>' +
        '<div class="horizontal-scrolling">' +
          '<table>' +
            '<tbody>' +
              '<tr>' +
                '<th scope="row">Reference rock Vs30</th>' +
                '<td>' + response.vs30default + ' m/s</td>' +
              '</tr>' +
              '<tr>' +
                '<th scope="row">Site correction applied</th>' +
                '<td>' + response.site_correction + '</td>' +
              '</tr>' +
            '</tbody>' +
          '</table>' +
        '</div>' +
      '</div>');

    buf.push(
      '<div class="one-of-two column">' +
        _this.formatProcessingRois(processing.roi) +
      '</div>');

    buf.push('</div>');
    el.innerHTML = buf.join('');
  };


  _initialize(options);
  options = null;
  return _this;
};


module.exports = ShakeMapInfoView;

},{"core/ContentView":"core/ContentView","core/Formatter":"core/Formatter","util/Util":"util/Util"}],"shakemap/ShakeMapModule":[function(require,module,exports){
'use strict';

var ImpactSummaryModule = require('impact/ImpactSummaryModule'),
    Module = require('core/Module'),
    ShakeMapView = require('shakemap/ShakeMapView'),
    Util = require('util/Util');


var _ID,
    _TITLE,
    _TYPES;


// Note: These should be overridden by each implementing sub-class.
_ID = 'shakemap';
_TITLE = 'ShakeMap';
_TYPES = ['shakemap'];


var _DEFAULTS = {

};


/**
 * Bridges the event page framework with the product rendering.
 *
 */
var ShakeMapModule = function (options) {
  var _this,
      _initialize,

      _shakeMapView;


  options = Util.extend({}, _DEFAULTS, options);
  _this = Module(options);

  /**
   * Initialize a new module.
   *
   * @see Module#_initialize
   */
  _initialize = function (/*options*/) {
    _this.ID = _ID;
    _this.TITLE = _TITLE;
  };


  /**
   * Destroy this module and sub-view(s).
   *
   */
  _this.destroy = Util.compose(function () {
    if (_shakeMapView) {
      _shakeMapView.destroy();
    }
    _shakeMapView = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Renders the details for this module. Defers bulk of header Information
   * to generalized header rendering. Uses {ShakeMapView} for bulk of content
   * rendering.
   *
   */
  _this.render = function () {
    var additionalFooter,
        product;


    _this.header.innerHTML = '<h3>ShakeMap</h3>';

    product = _this.getProduct('shakemap');
    if (!product) {
      _this.content.innerHTML =
          '<p class="alert warning">No ShakeMap Found</p>';
    } else {
      _this.header.appendChild(_this.getProductHeader({
        product: product,
        summaryModule: ImpactSummaryModule
      }));

      additionalFooter = _this.getProductFooter({
        product: product
      });

      // Load content from ShakeMapView
      _shakeMapView = ShakeMapView({
        el: _this.content,
        model: product
      });

      _shakeMapView.render();
    }

    _this.footer.innerHTML =
      '<h3>For More Information</h3>' +
      '<ul>' +
        '<li>' +
          '<a href="https://usgs.github.io/shakemap">ShakeMap Manual</a>' +
        '</li>' +
      '</ul>';

    if (additionalFooter) {
      _this.footer.appendChild(additionalFooter);
    }
  };


  _initialize(options);
  options = null;
  return _this;
};


ShakeMapModule.ID = _ID;
ShakeMapModule.TITLE = _TITLE;
ShakeMapModule.TYPES = _TYPES;


module.exports = ShakeMapModule;

},{"core/Module":"core/Module","impact/ImpactSummaryModule":"impact/ImpactSummaryModule","shakemap/ShakeMapView":"shakemap/ShakeMapView","util/Util":"util/Util"}],"shakemap/ShakeMapPinView":[function(require,module,exports){
'use strict';

var BasicPinView = require('core/BasicPinView'),
    Formatter = require('core/Formatter'),
    ShakeMapModule = require('shakemap/ShakeMapModule'),
    Util = require('util/Util');


var _DEFAULTS = {
  module: ShakeMapModule
};

var ShakeMapPinView = function (options) {
  var _this,
      _initialize,

      _formatter;


  options = Util.extend({}, _DEFAULTS, options);
  _this = BasicPinView(options);


  _initialize = function (options) {
    _formatter = options.formatter || Formatter();
  };

  /**
   * Frees resources associated with this view.
   *
   */
  _this.destroy = Util.compose(function () {
    _formatter = null;

    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * Renders content for ShakeMapPinView
   *
   */
  _this.renderPinContent = function () {
    var img,
        markup;

    img = _this.model.getContent('pin-thumbnail.png');
    if (!img) {
      img = _this.model.getContent('download/tvmap.jpg');
    }

    if (img) {
      markup = '<div class="shakemap-tvmap">' +
          '<img src="' + img.get('url') + '" alt="Intensity Map"/>' +
          '</div>';
    } else {
      markup = '<p class="alert warning">Map not available</p>';
    }

    _this.content.innerHTML = markup;
  };

  /**
   * Render header for ShakeMapPinView with impact bubble
   *
   */
  _this.renderPinHeader = Util.compose(_this.renderPinHeader, function () {
    _this.header.insertAdjacentHTML('beforeend',
        _formatter.intensity(_this.model.getProperty('maxmmi'), null));
  });

  _initialize(options);
  options = null;
  return _this;
};


module.exports = ShakeMapPinView;

},{"core/BasicPinView":"core/BasicPinView","core/Formatter":"core/Formatter","shakemap/ShakeMapModule":"shakemap/ShakeMapModule","util/Util":"util/Util"}],"shakemap/ShakeMapStationListView":[function(require,module,exports){
'use strict';

var Accordion = require('accordion/Accordion'),
    ContentView = require('core/ContentView'),
    Formatter = require('core/Formatter'),
    Util = require('util/Util');

var _NO_CONTENT_MESSAGE = 'No stations list available.';

var FLAG_DESCRIPTIONS = {
  'M': 'Manually flagged',
  'T': 'Outlier',
  'G': 'Glitch (clipped or below noise)',
  'I': 'Incomplete time series',
  'N': 'Not in list of known stations'
};


/**
 * View for a Station List.
 *
 * @param options {Object}
 *
 * @param options.formatter {Formatter}
 *     The formatter object to use for formatting intrinsic values.
 */
var ShakeMapStationListView = function (options) {
  var _this,
      _initialize,

      _accordion,
      _formatter;

  options = options || {};
  _this = ContentView(options);

  _initialize = function(options) {
    _this.el.classList.add('shakemap-stations');
    _formatter = options.formatter || Formatter();
  };


  /**
   * Generate summary markup for station list.
   *
   * @param  data {array},
   *         list of station objects.
   *
   * @return {string}
   *         HTML markup.
   */
  _this.buildStationList = function (data) {
    var distance,
        i,
        pga,
        pgv,
        props,
        stations,
        station,
        title;

    data = data.features;
    if (data.length === 0) {
      return '<p>No station data available at this time.</p>';
    }

    data.sort(_this.sortByDistance);
    stations = [];
    for (i = 0; i < data.length; i++) {
      station = data[i];
      props = station.properties;

      pga = props.pga;
      pgv = props.pgv;

      pgv = _formatter.number(pgv, 3);
      pga = _formatter.number(pga, 3);

      distance = _formatter.number(props.distance, 1);

      // Do not repeat the zip code if it's already part of the name
      if (props.name.indexOf('ZIP Code') === -1) {
        title = props.code + '<small>' + props.name + '</small>';
      } else {
        title = props.name;
      }

      stations.push([
        '<div class="accordion accordion-section accordion-closed station">',
          '<h3>', title, '</h3>',
          '<ul class="station-summary">',
            '<li>',
              _formatter.intensity(props.intensity,
                  '<abbr title="Modified Mercalli Intensity">mmi</abbr>'),
            '</li>',
            '<li>',
              '<span>', pga ,' %g</span>',
              '<abbr title="Maximum Horizontal Peak Ground Acceleration">',
                'pga',
              '</abbr>',
            '</li>',
            '<li>',
              '<span>', pgv ,' cm/s</span>',
              '<abbr title="Maximum Horizontal Peak Ground Velocity">',
                'pgv',
              '</abbr>',
            '</li>',
            '<li>',
              '<span>', distance , ' km','</span>',
              '<abbr title="Distance (km)">dist</abbr>',
            '</li>',
          '</ul>',
          '<a class="accordion-toggle" data-id="', i ,'">Details</a>',
          _this.buildStationDetails(station),
        '</div>'
      ].join(''));
    }

    return stations.join('');
  };

  /**
   * Generate details markup for station details. This is only called
   * when a station details section is expanded.
   *
   * @param  index {string},
   *         a data-id value that identifies the station details
   *         section that is expanded on a click event.
   *
   * @return {string}
   *         HTML markup.
   */
  _this.buildStationDetails = function (feature) {
    var props;

    props = feature.properties;

    return [
        '<div class="accordion-content">',
          '<dl class="station-metadata vertical">',
            '<dt class="station-metadata-type">Type</dt>',
              '<dd class="station-metadata-type">',
                (props.instrumentType||'&ndash;'),
              '</dd>',
            '<dt class="station-metadata-location">Location</dt>',
              '<dd class="station-metadata-location">',
                _this.formatLocation(feature),
              '</dd>',
            '<dt class="station-metadata-source">Source</dt>',
              '<dd class="station-metadata-source">',
                  (props.source || '&ndash;'), '</dd>',
            '<dt class="station-metadata-intensity">Intensity</dt>',
              '<dd class="station-metadata-intensity">',
                _formatter.number(props.intensity, 1, '&ndash;'),
              '</dd>',
          '</dl>',
          _this.createChannelTable(props.channels),
        '</div>'
      ].join('');
  };

  /**
   * Takes an array of amplitude objects from a channel, and creates
   *    a more user friendly amplitude object.
   * @param [objects] amplitudes
   *    An array of amplitude objects.
   *
   * @return {object}
   *    an object with a key object pair, where the key is the amplitude name.
   */
  _this.createAmplitudesObject = function (amplitudes) {
    var amp,
        amplitude,
        i,
        len;

    amp = {};
    len = amplitudes.length;
    for (i = 0; i < len; i++) {
      amplitude = amplitudes[i];
      amp[amplitude.name] = amplitude;
    }

    return amp;
  };

  /**
   * create the markup for a channel table.
   *
   * @params [objects] channels
   *
   * @return {string}
   *         HTML markup.
   */
  _this.createChannelTable = function (channels) {
    var i,
        numChannels;

    var markup = [
      '<div class="horizontal-scrolling">',
      '<table class="station-channels-list">',
        '<thead>',
          '<tr>',
            '<th scope="col" class="station-channels-list-name">name</th>',
            '<th scope="col" class="station-channels-list-pga">pga</th>',
            '<th scope="col" class="station-channels-list-pgv">pgv</th>',
            '<th scope="col" class="station-channels-list-psa03">psa03</th>',
            '<th scope="col" class="station-channels-list-psa10">psa10</th>',
            '<th scope="col" class="station-channels-list-psa30">psa30</th>',
          '</tr>',
        '</thead>',
        '<tbody>'
    ];

    numChannels = channels.length;
    for (i = 0; i < numChannels; i++) {
      markup.push(_this.createChannelRow(channels[i]));
    }

    markup.push('</tbody></table></div>');

    return markup.join('');
  };


  /**
   * create the markup for a channel row
   *
   * @params {objects} channel
   *
   * @return {string}
   *         HTML markup.
   */
  _this.createChannelRow = function (channel) {
    var amplitude;

    amplitude = _this.createAmplitudesObject(channel.amplitudes);

    return [
      '<tr>',
        '<th scope="row" class="station-channel-name">',
          channel.name,
        '</th>',
        '<td class="station-channel-pga">',
          _this.formatComponent(amplitude.pga),
        '</td>',
        '<td class="station-channel-pgv">',
          _this.formatComponent(amplitude.pgv),
        '</td>',
        '<td class="station-channel-psa03">',
          _this.formatComponent(amplitude.psa03),
        '</td>',
        '<td class="station-channel-psa10">',
          _this.formatComponent(amplitude.psa10),
        '</td>',
        '<td class="station-channel-psa30">',
          _this.formatComponent(amplitude.psa30),
        '</td>',
      '</tr>'
    ].join('');
  };

  /**
   * Free references.
   */
  _this.destroy = Util.compose(function () {
    if (_accordion) {
      _accordion.destroy();
    }
    _accordion = null;
    _formatter = null;
    _initialize = null;
    _this = null;
  }, _this.destroy);

  /**
   * format the component of a cell for a channel table.
   *
   * @params {object} data
   *
   * @returns {string}
   *         HTML markup.
   */
  _this.formatComponent = function (data) {
    var content,
        flag,
        value,
        units;

    content = [];
    if (data) {
      flag = data.flag;
      value = data.value;
      units = data.units;

      // Add flag class for all non-zero flags
      if (flag && flag !== '0') {
        content.push('<span class="station-flag">');
        content.push(parseFloat(value, 10).toFixed(3));

        // display flag with title text
        if (FLAG_DESCRIPTIONS.hasOwnProperty(flag)) {
          content.push('<abbr title="' + FLAG_DESCRIPTIONS[flag] + '">(' +
              flag + ')</abbr>');
        } else {
          content.push('(' + flag + ')');
        }
        content.push('</span>');
      } else {
        content.push('<span>');
        content.push(parseFloat(value, 10).toFixed(3));
        content.push('&nbsp;'+ units);
        content.push('</span>');
      }
    } else {
      content.push('<span>&ndash;</span>');
    }

    return content.join('');
  };

  /**
   * Get the Lat, Long; swap position and encapsulate in parens.
   *
   * @param {object} feature
   *
   * @return {string}
   *         HTML markup.
   */
  _this.formatLocation = function (feature) {
    var latitude,
        longitude;

    latitude = feature.geometry.coordinates[1];
    longitude = feature.geometry.coordinates[0];

    return ((feature.properties.location) ?
        (feature.properties.location + '<br/>') : '') +
        _formatter.location(latitude, longitude);
  };

  /**
   * Renders the default error message. Called if an error occurs during the
   * data fetch.
   *
   */
  _this.onError = function (/*status, xhr*/) {
    _this.el.innerHTML = _NO_CONTENT_MESSAGE;
  };

  /**
   * Renders the list of stations. Called when data is successfully fetched.
   *
   */
  _this.onSuccess = function (responseText/*, xhr*/) {
    _this.el.innerHTML = _this.buildStationList(responseText);
    _accordion = Accordion({
      el:_this.el
    });
  };

  /**
   * Sort by Distance
   *    Used by sort routines to determine which distance is greater.
   *
   * @params a {object}
   *         An object with distance in a properties sub object.
   * @params a {object}
   *         An object with distance in a properties sub object.
   *
   * @returns {number}
   *          The difference between the two distances.
   */
  _this.sortByDistance = function (a, b) {
    return parseFloat(a.properties.distance) - parseFloat(b.properties.distance);
  };


  _initialize(options);
  options = null;
  return _this;
};


ShakeMapStationListView.NO_CONTENT_MESSAGE = _NO_CONTENT_MESSAGE;

module.exports = ShakeMapStationListView;

},{"accordion/Accordion":2,"core/ContentView":"core/ContentView","core/Formatter":"core/Formatter","util/Util":"util/Util"}],"shakemap/ShakeMapView":[function(require,module,exports){
'use strict';

var InteractiveMapView = require('map/InteractiveMapView'),
    ProductView = require('core/ProductView'),
    ShakeMapInfoView = require('shakemap/ShakeMapInfoView'),
    ShakeMapStationListView = require('shakemap/ShakeMapStationListView'),
    TabList = require('tablist/TabList'),
    Util = require('util/Util');


var ShakeMapView = function (options) {
  var _this,
      _initialize,

      _shakeMapInfoView,
      _shakeMapStationListView,
      _tablist;

  _this = ProductView(options);

  _initialize = function () {
    _this.el.classList.add('shakemap');
  };

  /**
   * Create tab content for all PSA images (PSA 0.3, 1.0, 3.0)
   *
   * @param  {Product} shakemap
   *    shakemap product with PSA image contents
   *
   * @return {string} markup
   *    HTML markup for PSA tab contents
  **/
  _this.createPSATabListImages = function (shakemap) {
    var header,
        markup,
        psa03,
        psa10,
        psa30;

    header = [];
    markup = [];
    psa03 = shakemap.getContent('download/psa03.jpg');
    psa10 = shakemap.getContent('download/psa10.jpg');
    psa30 = shakemap.getContent('download/psa30.jpg');

    if (psa03) {
      header.push('0.3 s');
      markup.push(_this.createTabListImage(psa03,
          'ShakeMap Peak Spectral Acceleration 0.3 s image'));
    }

    if (psa10) {
      header.push('1.0 s');
      markup.push(_this.createTabListImage(psa10,
          'ShakeMap Peak Spectral Acceleration 1.0 s image'));
    }

    if (psa30) {
      header.push('3.0 s');
      markup.push(_this.createTabListImage(psa30,
          'ShakeMap Peak Spectral Acceleration 3.0 s image'));
    }

    return '<h3>' +
        'Peak Spectral Acceleration (%g) for ' + header.join(', ') +
        '</h3>' +
        markup.join('');
  };

  /**
   * Generate tab contents for tablist
   *
   * @param  {Product} shakemap,
   *         shakemap product with contents
   */
  _this.createTabListData = function (shakemap) {
    var intensityContent,
        pgaContent,
        pgvContent,
        shakeMapInfoContent,
        stationListContent,
        uncertaintyContent;

    // Intesity Image
    intensityContent = shakemap.getContent('download/intensity.jpg');
    if (intensityContent) {
      _tablist.addTab({
        title: 'Intensity',
        content: _this.createTabListImage(intensityContent,
            'ShakeMap Intensity image')
      });
    }

    // PGA Image
    pgaContent = shakemap.getContent('download/pga.jpg');
    if (pgaContent) {
      _tablist.addTab({
        title: '<abbr title="Peak Ground Acceleration">PGA</abbr>',
        content: _this.createTabListImage(pgaContent,
            'ShakeMap Peak Ground Acceleration image')
      });
    }

    // PGV Image
    pgvContent = shakemap.getContent('download/pgv.jpg');
    if (pgvContent) {
      _tablist.addTab({
        title: '<abbr title="Peak Ground Velocity">PGV</abbr>',
        content: _this.createTabListImage(pgvContent,
            'ShakeMap Peak Ground Velocity image')
      });
    }

    // StationList
    stationListContent = shakemap.getContent('download/stationlist.json');
    if (stationListContent) {
      _shakeMapStationListView = ShakeMapStationListView({
            el: document.createElement('div'),
            model: stationListContent
          });
      _tablist.addTab({
        title: 'Station List',
        content: function () {
          _shakeMapStationListView.render();
          return _shakeMapStationListView.el;
        }
      });
    }

    // Info
    shakeMapInfoContent = shakemap.getContent('download/info.json');
    if (shakeMapInfoContent) {
      _shakeMapInfoView = ShakeMapInfoView({
        el: document.createElement('div'),
        model: shakeMapInfoContent
      });
      _tablist.addTab({
        title: 'Metadata',
        content: function () {
          _shakeMapInfoView.render();
          return _shakeMapInfoView.el;
        }
      });
    }

    // Uncertainty Image
    uncertaintyContent = shakemap.getContent('download/sd.jpg');
    if (uncertaintyContent) {
      _tablist.addTab({
        title: 'Uncertainty',
        content: _this.createTabListImage(uncertaintyContent,
            'ShakeMap Uncertainty image')
      });
    }

    // PSA Images
    if (shakemap.getContent('download/psa03.jpg') ||
        shakemap.getContent('download/psa10.jpg') ||
        shakemap.getContent('download/psa30.jpg')) {
      _tablist.addTab({
        title: '<abbr title="Peak Spectral Acceleration">PSA</abbr>',
        content: _this.createPSATabListImages(shakemap)
      });
    }
  };

  /**
   * Create combined link/image for tablist image.
   *
   * @param  {Content} content
   *         shakemap Content object with an url property
   *
   * @return {string} link
   *         image link to interactive map.
  **/
  _this.createTabListImage = function (content, alt) {
    var link;

    if (!content.get('url')) {
      return '';
    }

    // In addition to contours (default), enable stations
    link =
      '<a href="#map?' + InteractiveMapView.SHAKEMAP_STATIONS + '=true' +
          '&shakemapSource=' + _this.model.get('source') +
          '&shakemapCode=' + _this.model.get('code') + '">' +
        '<img' +
          ' class="shakemap-tablist-image" ' +
          ' src="' + content.get('url') + '"' +
          ' alt="' + alt + '"' +
        '/>' +
      '</a>';

    return link;
  };

  _this.destroy = Util.compose(function () {
    // Destroy tablist
    if (_tablist) {
      _tablist.destroy();
      _tablist = null;
    }

    if (_shakeMapInfoView) {
      _shakeMapInfoView.destroy();
      _shakeMapInfoView = null;
    }

    // Destrop ShakeMapStationList
    if (_shakeMapStationListView) {
      _shakeMapStationListView.destroy();
      _shakeMapStationListView = null;
    }

    _initialize = null;
    _this = null;
  }, _this.destroy);

  _this.render = function () {
    var el,
        shakemap;

    el = _this.el;
    shakemap = _this.model;

    if (shakemap.isDeleted()) {
      el.innerHTML = '<p class="alert info">Product Deleted</p>';
    } else {
      // Build TabList with all of the shakemap images
      _tablist = new TabList({
        el: el,
        tabPosition: 'top',
        tabs: []
      });
      _this.createTabListData(shakemap);
    }
  };

  _initialize();
  options = null;
  return _this;
};

module.exports = ShakeMapView;

},{"core/ProductView":"core/ProductView","map/InteractiveMapView":"map/InteractiveMapView","shakemap/ShakeMapInfoView":"shakemap/ShakeMapInfoView","shakemap/ShakeMapStationListView":"shakemap/ShakeMapStationListView","tablist/TabList":"tablist/TabList","util/Util":"util/Util"}],"svgimagemap/SvgImageMap":[function(require,module,exports){
'use strict';

var View = require('mvc/View');
var Util = require('util/Util');
var Xhr = require('util/Xhr');


var DEFAULTS = {
  // container element
  el: null,
  // image url
  imageUrl: null,
  // image alt,
  imageAlt: '',
  // imagemap url
  mapUrl: null,
  // imagemap name (optional)
  mapName: null,
  // if imagemap is already as svg
  svgUrl: null,
  // width of imagemap
  width: null,
  // height of imagemap
  height: null,
  // areas of imagemap
  areas: null
};



/**
 * Parse an image map from an HTML string.
 *
 * Calls setAreas() with parsed area elements.
 *
 * @param html {String}
 *        html string containing imagemap.
 * @param mapName {String}
 *        optional, value of name attribute.
 *        by default, the first imagemap in html is parsed.
 * @return
 */
var parseMap = function(html, mapName) {
  var parsed = [],
      selector = 'map',
      parseEl = document.createElement('div'),
      el, areas, i, len;

  // insert into element to parse.
  parseEl.innerHTML = html;
  // find imagemap
  if (mapName) {
    selector += '[name=\'' + mapName + '\']';
  }
  el = parseEl.querySelector(selector);
  if (el) {
    // find areas
    areas = el.querySelectorAll('area');
    for (i=0, len=areas.length; i<len; i++) {
      el = areas[i];
      parsed.push({
        'shape': el.getAttribute('shape'),
        'coords': el.getAttribute('coords').split(','),
        'title': el.getAttribute('title'),
        'href': el.getAttribute('href')
      });
    }
    areas = null;
  }
  parseEl = null;

  return parsed;
};

/**
 * Convert an area object to a svg path element string.
 *
 * @param area {Object}
 * @param area.shape {String}
 *        'circle', 'rect', and 'poly' are supported.
 * @param area.coords {Array<String>}
 *        an array of coordinates, meaning depends on shape
 * @param area.title {String}
 *        optional.  title for area, shown on mouseover.
 * @param area.href {String}
 *        optional.  link for area, activated on click.
 * @return {String} svg circle, rect, or path, markup as string.
 */
var getPath = function (area) {
  var buf = [],
      shape = area.shape,
      coords = area.coords,
      title = area.title,
      href = area.href;

  // href and title are optional, but work the same for every shape
  href = (href === null ? '' : ' xlink:href="' + href + '"');
  title = (title === null ? '' : '<title>' + title + '</title>');

  if (shape === 'circle') {
    // circle coords are x,y,radius
    buf.push(
        '<circle',
        ' cx="', coords[0], '"',
        ' cy="', coords[1], '"',
        ' r="', coords[2], '"',
        href,
        '>', title, '</circle>');
  } else if (shape === 'rect') {
    // rectangle coords are x1,y1,x2,y2
    buf.push(
        '<rect',
        ' x="', coords[0], '"',
        ' y="', coords[1], '"',
        ' width="', coords[2]-coords[0], '"',
        ' height="', coords[3]-coords[1], '"',
        href,
        '>', title, '</rect>');
  } else if (shape === 'poly') {
    // poly coords are x1,y1,x2,y2,...xN,yN
    // convert area coordinate list to svg path
    var points = [];
    for (var i=0, len=coords.length; i<len; i+=2) {
      // svg "M" is move to, "L" is line to
      points.push((i === 0 ? 'M' : 'L'), coords[i], ',', coords[i+1]);
    }
    // svg "Z" is close path
    points.push('Z');
    buf.push(
        '<path',
        ' d="', points.join(''), '"',
        href,
        '>', title, '</path>');
  }

  return buf.join('');
};



/**
 * Create a new SvgImageMap.
 *
 * @param options {Object}
 * @param options.imageUrl {String}
 *        url to image
 * @param options.imageAlt {String}
 *        alt attribute for image.
 * @param options.className {String}
 *        classname for wrapper element.
 *
 * Other parameters configure how to load the image map:
 *
 * - From an existing SVG File:
 *
 * @param options.svgUrl {String}
 *        optiona, url to svg imagemap.
 *
 * - Programatically, either at construction or via setAreas():
 *
 * @param options.areas {Array<Area>}
 *        areas for imagemap.
 *
 * - From an existing HTML imagemap:
 *
 * @param options.mapUrl {String}
 *        url to html with imagemap
 * @param options.mapName {String}
 *        optional, specify the imagemap name in case there are many.
 */
var SvgImageMap = function (options) {
  var _this,
      _initialize,

      _areas,
      _className,
      _el,
      _height,
      _imageAlt,
      _imageUrl,
      _mapName,
      _mapUrl,
      _svgUrl,
      _width,

      _parentDestroy,
      _setSvg;

  _this = Object.create(View(options));

  _initialize = function () {
    var image,
        imageOnLoad;
    // parse options
    options = Util.extend({}, DEFAULTS, options);
    _areas = options.areas || [];
    _className = options.className;
    _height = options.height;
    _imageAlt = options.imageAlt;
    _imageUrl = options.imageUrl;
    _mapName = options.mapName;
    _mapUrl = options.mapUrl;
    _svgUrl = options.svgUrl;
    _width = options.width;
    // container element classes
    _el = _this.el;
    _el.classList.add('svgimagemap');
    if (_className) {
      _el.classList.add(_className);
    }
    // load image
    imageOnLoad = function () {
      _this.setSize(image.naturalWidth, image.naturalHeight);
      image.removeEventListener('load', imageOnLoad);
      imageOnLoad = null;
    };
    image = new Image();
    image.addEventListener('load', imageOnLoad);
    image.setAttribute('alt', _imageAlt);
    image.src = _imageUrl;
    _el.appendChild(image);
    // load imagemap
    if (_svgUrl) {
      Xhr.ajax({
        url: _svgUrl,
        success: function (response/*, xhr*/) {
          _this.setSvg(response);
        }
      });
    } else if (_mapUrl) {
      Xhr.ajax({
        url: _mapUrl,
        success: function (response/*, xhr*/) {
          _this.setAreas(parseMap(response, _mapName));
        }
      });
    }
    // clear options
    options = null;
  };

  // save reference to parent destroy method
  _parentDestroy = _this.destroy;
  _this.destroy = function () {
    _areas = null;
    _className = null;
    _el = null;
    _height = null;
    _mapUrl = null;
    _mapName = null;
    _svgUrl = null;
    _width = null;

    if (typeof _parentDestroy === 'function') {
      _parentDestroy();
    }
  };

  /**
   * Access the areas array.
   */
  _this.getAreas = function () {
    return _areas;
  };

  /**
   * Set the image map areas.
   *
   * Calls render() after setting areas.
   *
   * @param areas {Array<Area>}
   */
  _this.setAreas = function (areas) {
    _areas = areas;
    // redraw svg
    _this.render();
  };

  /**
   * Set the image map size.
   *
   * Calls render() after setting size.
   *
   * @param width width of image.
   * @param height height of image.
   */
  _this.setSize = function (width, height) {
    // save for svg
    _width = width;
    _height = height;
    if (_el && width && height) {
      // set element size
      _el.setAttribute('width', width);
      _el.setAttribute('height', height);
    }
    // redraw svg
    _this.render();
  };

  /**
   * Update the rendered imagemap based on width, height, and areas.
   */
  _this.render = function () {
    var buf,
        i,
        len;

    if (!_width || !_height || !_areas || _areas.length === 0) {
      return;
    }

    // build svg
    buf = [];
    // open svg element
    buf.push('<svg',
        ' xmlns="http://www.w3.org/2000/svg"',
        ' xmlns:xlink="http://www.w3.org/1999/xlink"',
        ' width="', _width, '"',
        ' height="', _height, '"',
        ' viewBox="0,0,', _width, ',', _height, '"',
        ' preserveAspectRatio="xMinYMin"',
        '>');
    // add imagemap areas
    len = _areas.length;
    for (i = 0; i < len; i++) {
      buf.push(getPath(_areas[i]));
    }
    // close svg element
    buf.push('</svg>');
    _setSvg(buf.join(''));
  };

  /**
   * Remove any existing svg element, and insert an svg element.
   *
   * @param svg {String|Element}
   *        the svg to insert.
   *        if a String, converted to an Element before insertion.
   */
  _setSvg = function (svg) {
    var oldSvg,
        parseEl;

    if (_el) {
      // remove any existing svg
      oldSvg = _el.querySelector('svg');
      if (oldSvg) {
        _el.removeChild(oldSvg);
      }
      // convert svg string to svg element
      if (typeof svg === 'string') {
        parseEl = document.createElement('div');
        parseEl.innerHTML = svg;
        svg = parseEl.children[0];
        parseEl = null;
      }
      // insert svg
      if (svg) {
        _el.appendChild(svg);
      }
    }
  };


  _initialize();
  return _this;
};


SvgImageMap.getPath = getPath;
SvgImageMap.parseMap = parseMap;


module.exports = SvgImageMap;

},{"mvc/View":"mvc/View","util/Util":"util/Util","util/Xhr":"util/Xhr"}],"tablist/TabList":[function(require,module,exports){
'use strict';

// sequence for assigning unique element ids, for aria roles
var ID_SEQUENCE = 0;


/**
 * Format tab (summary) content for a list item.
 *
 * @param obj {Object}
 *        object being added to the list.
 * @return {String|DOMElement}
 *         This implementation returns obj.title.
 */
var __getTabContent = function(obj) {
  return obj.title;
};


/**
 * Format panel (detail) content for a list item.
 *
 * @param obj {Object}
 *        object being added to the list.
 * @return {String|DOMElement}
 *         If obj.content is a function, its return value is returned.
 *         Otherwise, this implementation returns obj.content.
 */
var __getPanelContent = function(obj) {
  if (typeof obj.content === 'function') {
    return obj.content(obj);
  } else {
    return obj.content;
  }
};


/**
 * Construct a new ItemList.
 *
 * Sub-classes may override the methods __getTabContent() and
 * getPanelContent() to change list formatting.
 *
 * @param options {Object}
 * @param options.el {DOMElement}
 *        Optional, default is new section element.
 * @param options.header {String}
 *        Optional, markup placed in header for tab list.
 * @param options.tabs {Array<Object>}
 *        Optional, any items are passed to addItem().
 */
var TabList = function (options) {

  var _this,
      _initialize,

      _backward,
      _container,
      _endPosition,
      _header,
      _forward,
      _nav,
      _navPosition,
      _positionChange,
      _selected,
      _startPosition,
      _dontSelect,
      _tabs,

      _centerSelectedTab,
      _checkValueBeforeScrolling,
      _ensureSelected,
      _onDragEnd,
      _onDragScroll,
      _onDragStart,
      _onKeyPress,
      _selectTab,
      _setTranslate,
      _showTabPosition,
      _updateTabIndex;

  _this = Object.create({});


  _initialize = function () {
    _this.el = options.el || document.createElement('section');
    _this.el.classList.add('tablist');

    // add header
    if (options.header) {
      _header = _this.el.appendChild(document.createElement('header'));
      _header.innerHTML = options.header;
    }

    // create tab container
    _container = document.createElement('div');
    _container.className = 'tablist-container';

    // create tab list
    _nav = document.createElement('nav');
    _nav.setAttribute('role', 'tablist');
    _nav.classList.add('smooth');
    _navPosition = 0;
    _positionChange = 0;

    // add tab back/next buttons
    _backward = document.createElement('div');
    _backward.className = 'tablist-backward-button';
    _backward.innerHTML = '<div class="material-icons">chevron_left</div>';

    _forward = document.createElement('div');
    _forward.className = 'tablist-forward-button';
    _forward.innerHTML = '<div class="material-icons">chevron_right</div>';

    _container.appendChild(_nav);
    _this.el.appendChild(_backward);
    _this.el.appendChild(_container);
    _this.el.appendChild(_forward);

    // mouse (desktop) interactions
    _backward.addEventListener('click', _this.selectPreviousTab);
    _forward.addEventListener('click', _this.selectNextTab);
    _nav.addEventListener('mousedown', _onDragStart);

    // touch (mobile) interactions
    _nav.addEventListener('touchstart', _onDragStart);

    // keyboard interactions
    _nav.addEventListener('keydown', _onKeyPress);
    _nav.addEventListener('keyup', _onKeyPress);

    // array of tab objects
    _tabs = [];

    // add any items provided when constructing
    if (options.tabs) {
      for (var i=0, len=options.tabs.length; i<len; i++) {
        _this.addTab(options.tabs[i], true);
      }
      _ensureSelected();
    }
  };


  /**
   * Called on "keypress", handles changing the selected tab from the
   * tablist-tab navigation when a enter is clicked on a tab with focus,
   * or the left/right directional pad is clicked.
   *
   * @param  {object} e,
   *         "keypress" event
   */
  _onKeyPress = function (e) {
    var keyCode = e.keyCode;


    if (e.type === 'keydown') {
      // prevent scrolling the window
      if (keyCode === 38 || keyCode === 40) {
        e.preventDefault();
      }
      return;
    }

    if (keyCode === 37 || keyCode === 38) {
      // d-pad left/up key
      _this.selectPreviousTab();
    } else if (keyCode === 39 || keyCode === 40) {
      // d-pad right/down key
      _this.selectNextTab();
    }
  };


  /**
   * Called on "touchstart" or "mousedown", tracks the drag start position
   * and adds event listeners for mouse events or touch events that update
   * the position of the tablist-tab navigation.
   *
   * @param  {object} e,
   *         "mousedown" event OR "touchstart" event
   */
  _onDragStart = function (e) {
    // do not animate a click/touch drag event
    _nav.classList.remove('smooth');

    if (e.type === 'mousedown') {
      _startPosition = e.clientX;
      document.addEventListener('mousemove', _onDragScroll);
      document.addEventListener('mouseup', _onDragEnd);
    } else if (e.type === 'touchstart') {
      // keeps mouse event from being delivered on touch events
      e.preventDefault();
      _startPosition = e.touches[0].clientX;
      document.addEventListener('touchmove', _onDragScroll);
      document.addEventListener('touchend', _onDragEnd);
      document.addEventListener('touchcancel', _onDragEnd);
    }
  };


  /**
   * Called on "touchend" or "mouseup", removes event listeners
   * for mouse events or touch events that update the position
   * of the tablist-tab navigation.
   *
   * @param  {object} e,
   *         "mouseup" event OR "touchend" event
   */
  _onDragEnd = function (e) {

    if (e.type === 'mouseup') {
      document.removeEventListener('mousemove', _onDragScroll);
      document.removeEventListener('mouseup', _onDragEnd);
    } else if (e.type === 'touchend' || e.type === 'touchcancel') {
      document.removeEventListener('touchmove', _onDragScroll);
      document.removeEventListener('touchend', _onDragEnd);
      document.removeEventListener('touchcancel', _onDragEnd);
    }

    _checkValueBeforeScrolling(_navPosition + _positionChange);

    _positionChange = 0;

    // add back the class that animates nav sliding
    _nav.classList.add('smooth');
  };


  /**
   * center the selected tab on the navigation slidfr.
   */
  _centerSelectedTab = function () {
    var tab = _selected.tabEl,
        position;

    // slide all the way to left edge
    position = (tab.offsetLeft * -1);
    // push tab (left-edge of tab) to the middle
    position = position + (_nav.clientWidth / 2);
    // center the tab, by adjusting half of the width right
    position = position - (tab.clientWidth / 2);
    // don't leave half of a px
    position = Math.round(position);

    _checkValueBeforeScrolling(position);
  };


  /**
   * Checks the translate value before it is applied to ensure that
   * tab slider is not scrolled more than it needs to be to make
   * the selected tab visible.
   */
  _checkValueBeforeScrolling = function (value) {
    var maxScroll = 0,
        minScroll = _nav.clientWidth - _nav.scrollWidth;

    // sanitize value
    if (value < minScroll) {
      value = minScroll;
    } else if (value > maxScroll) {
      value = maxScroll;
    }

    // scroll nav slider
    _setTranslate(value);

    // update tracking of navPosition
    _navPosition = value;
  };


  /**
   * Called on "mousemove", updates the scrollLeft position
   * on the nav slider that contains the tab elements.
   *
   * @param  {object} e,
   *         "mousemove" event
   */
  _onDragScroll = function (e) {
    var position,
        positionChange,
        type;

    type = e.type;

    if (type === 'mousemove') {
      position = e.clientX;
    } else if (type === 'touchmove') {
      position = e.touches[0].clientX;
    }

    positionChange = position - _startPosition;
    _positionChange = positionChange;
    _setTranslate(_navPosition + positionChange);

    if (Math.abs(positionChange) >= 5) {
     _dontSelect = true;
    }
  };


  /**
   * Update the position of the nav slider.
   *
   * @param {Number} position,
   *        the x-position of the slider
   */
  _setTranslate = function (position) {

    _nav.style['-webkit-transform'] =
        'translate3d(' + position + 'px, 0px, 0px)';
    _nav.style['-moz-transform'] =
        'translate3d(' + position + 'px, 0px, 0px)';
    _nav.style['-ms-transform'] =
        'translate3d(' + position + 'px, 0px, 0px)';
    _nav.style['-o-transform'] =
        'translate3d(' + position + 'px, 0px, 0px)';
    _nav.style.transform = 'translate3d(' + position + 'px, 0px, 0px)';
  };

  /**
   * Adds/ Updates the span that indicates the current tab position,
   * automatically fades the tab position using the 'fade' class.
   */
  _showTabPosition = function () {
    var span = _this.el.querySelector('.tab-position-indicator'),
        currentTabNumber = _tabs.indexOf(_selected) + 1,
        totalTabNumber = _tabs.length;

    if (!span) {
      // create new span
      span = document.createElement('span');
      _this.el.appendChild(span);
    }

    // update text
    span.className = 'tab-position-indicator';
    span.innerHTML = currentTabNumber + ' of ' + totalTabNumber;

    window.setTimeout(function () {
      span.classList.add('fade');
    }, 500);
  };


  /**
   * Change tabindex to -1 on all tabs. Change tabindex on
   * selected tab to 0.
   */
  _updateTabIndex = function () {
    var tab;

    for (var i = 0; i < _tabs.length; i++) {
      tab = _tabs[i].tabEl;
      if (tab.getAttribute('tabindex') !== -1) {
        tab.setAttribute('tabindex', -1);
        tab.setAttribute('aria-hidden', true);
      }
    }

    _selected.tabEl.setAttribute('tabindex', 0);
    _selected.tabEl.setAttribute('aria-hidden', false);
  };


  /**
   * Select a tab in this list.
   *
   * @param  toSelect {Object}
   *         the tab to select, as returned by addTab().
   */
  _selectTab = function (toSelect) {
    var previouslySelected = _selected;

    for (var i=0, len=_tabs.length; i<len; i++) {
      var tab = _tabs[i],
          options = tab.options,
          tabEl = tab.tabEl,
          panelEl = tab.panelEl;
      if (tab === toSelect) {
        // load tab content, if needed...
        if (!tab.contentReady) {
          var panelContent = __getPanelContent(options);
          if (typeof panelContent === 'string') {
            tab.panelEl.innerHTML = panelContent;
          } else {
            tab.panelEl.appendChild(panelContent);
          }
          tab.contentReady = true;
        }
        // update state classes
        tabEl.classList.add('tablist-tab-selected');
        panelEl.classList.add('tablist-panel-selected');
        // notify tab it is visible, if needed...
        if (typeof options.onSelect === 'function') {
          options.onSelect();
        }
        // update selected tab
        _selected = tab;
        _updateTabIndex();
        _centerSelectedTab();
        tab.tabEl.focus();
        _showTabPosition();
      } else {
        tabEl.classList.remove('tablist-tab-selected');
        panelEl.classList.remove('tablist-panel-selected');
        // notify tab it is hidden, if needed...
        if (tab === previouslySelected &&
            typeof options.onDeselect === 'function') {
          options.onDeselect();
        }
      }
    }
  };


  _ensureSelected = function () {
    var selectedPanel = _this.el.querySelector('.tablist-panel-selected'),
        tabs;
    if (selectedPanel === null) {
      tabs = _tabs;
      if (tabs.length > 0) {
        // select first tab by default
        tabs[0].select();
      }
    }
  };


  /**
   * Add an item to this list.
   *
   * @param options {Object}
   *        item being added to list.
   * @param options.onSelect {Function}
   *        Optional.
   *        Called when tab is selected.
   * @see __getTabContent(), __getPanelContent()
   *      these methods format content shown in tabs and panels,
   *      and use the following parameters by default.
   * @param options.title {String|DOMElement}
   *        Used by __getTabContent() to generate tab content.
   * @param options.content {String|DOMElement|Function}
   *        Used by __getPanelContent() to generate panel content.
   * @return object with select() method that can be used to show the tab.
   */
  _this.addTab = function (options, dontEnsureSelected) {
    // assign unique ids to this items elements
    var id = ++ID_SEQUENCE;
    var tabId = 'tablist-tab-' + id;
    var panelId = 'tablist-panel-' + id;

    // summary element
    var tabEl = document.createElement('section');
    tabEl.id = tabId;
    tabEl.className = 'tablist-tab';
    tabEl.setAttribute('role', 'tab');
    tabEl.setAttribute('tabindex', -1);
    tabEl.setAttribute('aria-controls', panelId);
    var tabContent = __getTabContent(options);
    if (typeof tabContent === 'string') {
      tabEl.innerHTML = tabContent;
    } else {
      tabEl.appendChild(tabContent);
    }

    // detail element
    var panelEl = document.createElement('section');
    panelEl.id = panelId;
    panelEl.className = 'tablist-panel';
    panelEl.setAttribute('role', 'tabpanel');
    panelEl.setAttribute('aria-labelledby', tabId);
    // content added by _selectTab()

    // save reference to tab and elements
    var tab = {
      options: options,
      tabEl: tabEl,
      panelEl: panelEl,
      select: function () {
        if (_dontSelect === true) {
          _dontSelect = false;
        } else {
          _selectTab(tab);
        }
        return false;
      },
      touchend: function () {
        _nav.classList.add('smooth');
        tab.select();
        return false;
      },
      contentReady: false
    };

    _tabs.push(tab);

    // click handler for tab
    tabEl.addEventListener('click', tab.select);
    tabEl.addEventListener('touchend', tab.touchend);

    // select the first, or specified item
    if (options.selected === true) {
      tab.select();
    } else if (dontEnsureSelected !== true) {
      _ensureSelected();
    }

    // add elements to dom
    _nav.appendChild(tabEl);
    _this.el.appendChild(panelEl);

    // return reference to tab for selecting
    return tab;
  };

  _this.destroy = function () {
    var tab;

    // event bindings
    _nav.removeEventListener('mousedown', _onDragStart);
    _nav.removeEventListener('touchstart', _onDragStart);
    _nav.removeEventListener('keyup', _onKeyPress);
    _backward.removeEventListener('click', _this.selectPreviousTab);
    _forward.removeEventListener('click', _this.selectNextTab);

    // remove tabEl bindings
    if (_tabs) {
      for (var i = 0; i < _tabs.length; i++) {
        tab = _tabs[i];

        // if tab has onDestroy method, call onDestroy()
        if (typeof tab.options.onDestroy === 'function') {
          tab.options.onDestroy();
        }

        // remove click/tap event bindings
        tab.tabEl.removeEventListener('click', tab.select);
        tab.tabEl.removeEventListener('touchend', tab.touchend);
      }
    }

    // methods bound to 'this'
    _onDragScroll = null;
    _onDragStart = null;
    _onDragEnd = null;
    _onKeyPress = null;

    // DOM elements
    _this.el = null;
    _header = null;
    _container = null;
    _nav = null;
    _forward = null;
    _backward = null;

    // Position variables
    _navPosition = null;
    _positionChange = null;
    _startPosition = null;
    _endPosition = null;

    // tab objects
    _selected = null;
    _tabs = null;
  };

  /*
   * Called on 'backward' button click, and also called on
   * 'up'/'left' d-pad keyboard click. Selects the appropropriate tab
   * in the list. This includes wrapping from the last tab in the list
   * to the first.
   */
  _this.selectNextTab = function () {
    var increment = 1,
        currentIndex = _tabs.indexOf(_selected) + increment,
        maxTabIndex = _tabs.length - 1,
        minTabIndex = 0;

    // if at the end of the tablist, jump to start
    if (currentIndex > maxTabIndex) {
      currentIndex = minTabIndex;
    }

    _tabs[currentIndex].select();
  };

  /**
   * Called on 'forward' button click, and also called on
   * 'down'/'right' d-pad keyboard click. Selects the appropropriate tab
   * in the list. This includes wrapping from the first tab in the list
   * to the last.
   */
  _this.selectPreviousTab = function () {
    var increment = -1,
        currentIndex = _tabs.indexOf(_selected) + increment,
        maxTabIndex = _tabs.length - 1,
        minTabIndex = 0;

    // if at the start of the tablist, jump to end
    if (currentIndex < minTabIndex) {
      currentIndex = maxTabIndex;
      // bug with translate position, remove class that animates
      _nav.classList.remove('smooth');
      _tabs[currentIndex].select();
      _nav.classList.add('smooth');
    } else {
      _tabs[currentIndex].select();
    }
  };


  _initialize();
  return _this;
};


var tabbifyOne = function (el) {
  var tabs = [],
      panels,
      panel,
      i, len,
      tablist;

  panels = el.querySelectorAll('.panel');
  for (i = 0, len = panels.length; i < len; i++) {
    panel = panels[i];
    tabs.push({
      'title': panel.getAttribute('data-title') ||
          panel.querySelector('header').innerHTML,
      'content': panel,
      'selected': panel.getAttribute('data-selected') === 'true'
    });
  }

  tablist = TabList({
    'tabs': tabs
  });

  el.parentNode.replaceChild(tablist.el, el);
};

var tabbifyAll = function () {
  var lists,
      i;
  lists = document.querySelectorAll('.tablist');
  for (i = lists.length - 1; i >= 0; i--) {
    TabList.tabbifyOne(lists[i]);
  }
};


// Expose public methods
TabList.tabbifyAll = tabbifyAll;
TabList.tabbifyOne = tabbifyOne;

module.exports = TabList;

},{}],"util/Events":[function(require,module,exports){
'use strict';

var __INSTANCE__ = null;


var __is_string = function (obj) {
  return (typeof obj === 'string' || obj instanceof String);
};


var Events = function () {
  var _this,
      _initialize,

      _listeners;


  _this = {};

  _initialize = function () {
    // map of listeners by event type
    _listeners = {};
  };


  /**
   * Free all references.
   */
  _this.destroy = function () {
    _initialize = null;
    _listeners = null;
    _this = null;
  };

  /**
   * Remove an event listener
   *
   * Omitting callback clears all listeners for given event.
   * Omitting event clears all listeners for all events.
   *
   * @param event {String}
   *      event name to unbind.
   * @param callback {Function}
   *      callback to unbind.
   * @param context {Object}
   *      context for "this" when callback is called
   */
  _this.off = function (evt, callback, context) {
    var i;

    if (typeof evt === 'undefined') {
      // removing all listeners on this object
      _listeners = null;
      _listeners = {};
    } else if (!_listeners.hasOwnProperty(evt)) {
      // no listeners, nothing to do
      return;
    } else if (typeof callback === 'undefined') {
      // removing all listeners for this event
      delete _listeners[evt];
    } else {
      var listener = null;

      // search for callback to remove
      for (i = _listeners[evt].length - 1; i >= 0; i--) {
        listener = _listeners[evt][i];

        if (listener.callback === callback &&
            (!context || listener.context === context)) {

          // found callback, remove
          _listeners[evt].splice(i,1);

          if (context) {
            // found callback with context, stop searching
            break;
          }
        }
      }

      // cleanup if last callback of this type
      if (_listeners[evt].length === 0) {
        delete _listeners[evt];
      }

      listener = null;
    }
  };

  /**
   * Add an event listener
   *
   * @param event {String}
   *      event name (singular).  E.g. 'reset'
   * @param callback {Function}
   *      function to call when event is triggered.
   * @param context {Object}
   *      context for "this" when callback is called
   */
  _this.on = function (event, callback, context) {
    if (!((callback || !callback.apply) ||
        (context && __is_string(callback) && context[callback].apply))) {
      throw new Error('Callback parameter is not callable.');
    }

    if (!_listeners.hasOwnProperty(event)) {
      // first listener for event type
      _listeners[event] = [];
    }

    // add listener
    _listeners[event].push({
      callback: callback,
      context: context
    });
  };

  /**
   * Trigger an event
   *
   * @param event {String}
   *      event name.
   * @param args {…}
   *      variable length arguments after event are passed to listeners.
   */
  _this.trigger = function (event) {
    var args,
        i,
        len,
        listener,
        listeners;

    if (_listeners.hasOwnProperty(event)) {

      args = Array.prototype.slice.call(arguments, 1);
      listeners = _listeners[event].slice(0);

      for (i = 0, len = listeners.length; i < len; i++) {
        listener = listeners[i];

        // NOTE: if listener throws exception, this will stop...
        if (__is_string(listener.callback)) {
          listener.context[listener.callback].apply(listener.context, args);
        } else {
          listener.callback.apply(listener.context, args);
        }
      }
    }
  };

  _initialize();
  return _this;
};

// make Events a global event source
__INSTANCE__ = Events();
Events.on = function _events_on () {
  return __INSTANCE__.on.apply(__INSTANCE__, arguments);
};
Events.off = function _events_off () {
  return __INSTANCE__.off.apply(__INSTANCE__, arguments);
};
Events.trigger = function _events_trigger () {
  return __INSTANCE__.trigger.apply(__INSTANCE__, arguments);
};

// intercept window.onhashchange events, or simulate if browser doesn't
// support, and send to global Events object
var _onHashChange = function (e) {
  Events.trigger('hashchange', e);
};

// courtesy of:
// http://stackoverflow.com/questions/9339865/get-the-hashchange-event-to-work-in-all-browsers-including-ie7
if (!('onhashchange' in window)) {
  var oldHref = document.location.hash;

  setInterval(function () {
    if (oldHref !== document.location.hash) {
      oldHref = document.location.hash;
      _onHashChange({
        'type': 'hashchange',
        'newURL': document.location.hash,
        'oldURL': oldHref
      });
    }
  }, 300);

} else if (window.addEventListener) {
  window.addEventListener('hashchange', _onHashChange, false);
}

module.exports = Events;

},{}],"util/Util":[function(require,module,exports){
'use strict';

// do these checks once, instead of once per call
var isMobile = false,
    supportsDateInput = false;


// static object with utility methods
var Util = function () {
};


Util.isMobile = function () {
  return isMobile;
};

Util.supportsDateInput = function () {
  return supportsDateInput;
};

/**
 * Merge properties from a series of objects.
 *
 * @param dst {Object}
 *      target where merged properties are copied to.
 * @param <variable> {Object}
 *      source objects for properties. When a source is non null, it's
 *      properties are copied to the dst object. Properties are copied in
 *      the order of arguments: a property on a later argument overrides a
 *      property on an earlier argument.
 */
Util.extend = function (dst) {
  var i, len, src, prop;

  // iterate over sources where properties are read
  for (i = 1, len = arguments.length; i < len; i++) {
    src = arguments[i];
    if (src) {
      for (prop in src) {
        dst[prop] = src[prop];
      }
    }
  }

  // return updated object
  return dst;
};

/**
 * Checks if objects are equal.
 *
 * @param a {Object}
 *      Object a.
 * @param b {Object}
 *      Object b.
 */
Util.equals = function (objA, objB) {
  var keya, keyb;

  if (objA === objB) {
    // if === then ===, no question about that...
    return true;
  } else if (objA === null || objB === null) {
    // funny, typeof null === 'object', so ... hmph!
    return false;
  } else if (typeof objA === 'object' && typeof objB === 'object') {
    // recursively check objects
    for (keya in objA) {
      if (objA.hasOwnProperty(keya)) {
        if (!objB.hasOwnProperty(keya)) {
          return false; // objB is missing a key from objA
        }
      }
    }

    for (keyb in objB) {
      if (objB.hasOwnProperty(keyb)) {
        if (!objA.hasOwnProperty(keyb)) {
          return false; // objA is missing a key from objB
        } else if (!Util.equals(objA[keyb], objB[keyb])) {
          return false; // objA[key] !== objB[key]
        }
      }
    }

    return true; // Recursively equal, so equal
  } else {
    return objA === objB; // Use baked in === for primitives
  }
};

/**
 * Get an event object for an event handler.
 *
 * @param e the event that was received by the event handler.
 * @return {Object}
 *      with two properties:
 *      target
 *           the element where the event occurred.
 *      originalEvent
 *           the event object, either parameter e or window.event (in IE).
 */
Util.getEvent = function (e) {
  var targ;

  if (!e) {
    // ie puts event in global
    e = window.event;
  }

  // find target
  if (e.target) {
    targ = e.target;
  } else if (e.srcElement) {
    targ = e.srcElement;
  }

  // handle safari bug
  if (targ.nodeType === 3) {
    targ = targ.parentNode;
  }

  // return target and event
  return {
    target: targ,
    originalEvent: e
  };
};

/**
 * Get a parent node based on it's node name.
 *
 * @param el {DOMElement}
 *      element to search from.
 * @param nodeName {String}
 *      node name to search for.
 * @param maxParent {DOMElement}
 *      element to stop searching.
 * @return {DOMElement}
 *      matching element, or null if not found.
 */
Util.getParentNode = function (el, nodeName, maxParent) {
  var curParent = el;

  while (curParent && curParent !== maxParent &&
      curParent.nodeName.toUpperCase() !== nodeName.toUpperCase()) {
    curParent = curParent.parentNode;
  }
  if (curParent && 'nodeName' in curParent &&
      curParent.nodeName.toUpperCase() === nodeName.toUpperCase()) {
    // found the desired node
    return curParent;
  }

  // didn't find the desired node
  return null;
};

// remove an elements child nodes
Util.empty = function (el) {
  while (el.firstChild) {
    el.removeChild(el.firstChild);
  }
};

// detach an element from its parent
Util.detach = function (el) {
  if (el.parentNode) {
    el.parentNode.removeChild(el);
  }
};

Util.getWindowSize = function () {
  var dimensions = {width:null,height:null};

  if ('innerWidth' in window && 'innerHeight' in window) {
    dimensions = {
      width: window.innerWidth,
      height: window.innerHeight
    };
  } else {
    // probably IE<=8
    var elem = 'documentElement' in document ?
        document.documentElement : document.body;

    dimensions = {
      width: elem.offsetWidth,
      height: elem.offsetHeight
    };
  }

  return dimensions;
};

/**
 * Creates a function that is a composition of other functions.
 *
 * For example:
 *      a(b(c(x))) === compose(c, b, a)(x);
 *
 * Each function should accept as an argument, the result of the previous
 * function call in the chain. It is allowable for all functions to have no
 * return value as well.
 *
 * @param ... {Function} A variable set of functions to call, in order.
 *
 * @return {Function} The composition of the functions provided as arguments.
 */
Util.compose = function () {
  var fns = arguments;

  return function (result) {
    var i,
        fn,
        len;

    for (i = 0, len = fns.length; i < len; i++) {
      fn = fns[i];

      if (fn && fn.call) {
        result = fn.call(this, result);
      }
    }

    return result;
  };
};

/**
 * Checks the elements of a looking for b. b is assumed to be found if for
 * some object in a (a[i]), a[i] === b. Note strict equality.
 *
 * @param a {Array}
 *      An array to search
 * @param b {Mixed}
 *      A value to search for
 *
 * @return
 *      true if array a contains b
 */
Util.contains = function (a, b) {
  var i, len;

  for (i = 0, len = a.length; i < len; i++) {
    if (b === a[i]) {
      return true;
    }
  }

  return false;
};

/**
 * @return
 *      true if object is an array
 */
Util.isArray = function (a) {

  if (typeof Array.isArray === 'function') {
    return Array.isArray(a);
  } else {
    return Object.prototype.toString.call(a) === '[object Array]';
  }

};


/**
 * Load a script asynchronously.
 *
 * @param url {String}
 *        script to load.
 * @param options {Object}
 *        additional options.
 * @param options.success {Function} optional.
 *        called after script loads successfully.
 * @param options.error {Function} optional.
 *        called after script fails to load.
 * @param options.done {Function} optional
 *        called after loadScript is complete,
 *        after calling success or error.
 */
Util.loadScript = function (url, options) {
  // load secondary script
  var cleanup,
      done,
      onError,
      onLoad,
      script;

  options = Util.extend({}, {
    success: null,
    error: null,
    done: null
  }, options);

  cleanup = function () {
    script.removeEventListener('load', onLoad);
    script.removeEventListener('error', onError);
    script.parentNode.removeChild(script);
    cleanup = null;
    onLoad = null;
    onError = null;
    script = null;
  };

  done = function () {
    if (options.done !== null) {
      options.done();
    }
    options = null;
  };

  onError = function () {
    cleanup();
    if (options.error !== null) {
      options.error.apply(null, arguments);
    }
    done();
  };

  onLoad = function () {
    cleanup();
    if (options.success !== null) {
      options.success.apply(null, arguments);
    }
    done();
  };

  script = document.createElement('script');
  script.addEventListener('load', onLoad);
  script.addEventListener('error', onError);
  script.src = url;
  script.async = true;
  document.querySelector('script').parentNode.appendChild(script);
};


// Do these checks once and cache the results
(function() {
  var testEl = document.createElement('div');
  var testInput = document.createElement('input');
  var str = navigator.userAgent||navigator.vendor||window.opera;

  isMobile = str.match(/(Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone)/i);
  testInput.setAttribute('type', 'date');
  supportsDateInput = (testInput.type !== 'text');

  // clean up testing element
  testEl = null;
})();

module.exports = Util;
},{}],"util/Xhr":[function(require,module,exports){
'use strict';


var Util = require('./Util');


var _CALLBACK_SEQUENCE = 0;

// defaults for jsonp method
var _DEFAULT_JSONP_OPTIONS = {
  url: null,
  success: null,
  error: null,
  done: null,
  data: null,
  callbackName: null,
  callbackParameter: 'callback'
};

// defaults for ajax method
var _DEFAULT_AJAX_OPTIONS = {
  url: null,
  success: null,
  error: null,
  done: null,
  method: 'GET',
  headers: null,
  data: null,
  rawdata: null
};

// API Method Declarations

var ajax,
    getCallbackName,
    jsonp,
    restrictOrigin,
    urlEncode;


// API Method Definitions

/**
 * Make an AJAX request.
 *
 * @param options.url {String}
 *      the url to request.
 * @param options.success {Function}
 *      called with data loaded by script
 * @param options.error {Function} optional
 *      called when script fails to load
 * @param options.done {Function}
 *        called when ajax is complete, after success or error.
 * @param options.method {String}
 *      request method, default is 'GET'
 * @param options.headers {Object}
 *      request header name as key, value as value.
 * @param options.data {Object}
 *      request data, sent using content type
 *      'application/x-www-form-urlencoded'.
 * @param options.rawdata {?}
 *      passed directly to send method, when options.data is null.
 *      Content-type header must also be specified. Default is null.
 */
ajax = function (options) {
  var h,
      postdata,
      queryString,
      url,
      xhr;

  options = Util.extend({}, _DEFAULT_AJAX_OPTIONS, options);
  url = options.url;

  if (options.restrictOrigin) {
    url = restrictOrigin(url);
  }
  postdata = options.rawdata;

  if (options.data !== null) {
    queryString = urlEncode(options.data);
    if (options.method === 'GET') {
      // append to url
      url = url + '?' + queryString;
    } else {
      // otherwise send as request body
      postdata = queryString;
      if (options.headers === null) {
        options.headers = {};
      }
      // set request content type
      options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
    }
  }

  xhr = new XMLHttpRequest();

  // setup callback
  xhr.onreadystatechange = function () {
    var data, contentType;

    if (xhr.readyState === 4) {
      if (xhr.status === 200) {
        if (options.success !== null) {
          try {
            data = xhr.response;
            contentType = xhr.getResponseHeader('Content-Type');
            if (contentType && contentType.indexOf('json') !== -1) {
              data = JSON.parse(data);
            }
            options.success(data, xhr);
          } catch (e) {
            if (options.error !== null) {
              options.error(e, xhr);
            }
          }
        }
      } else {
        if (options.error) {
          options.error(xhr.status, xhr);
        }
      }
      if (options.done !== null) {
        options.done(xhr);
      }
    }
  };

  // open request
  xhr.open(options.method, url, true);

  // send headers
  if (options.headers !== null) {
    for (h in options.headers) {
      xhr.setRequestHeader(h, options.headers[h]);
    }
  }

  // send data
  xhr.send(postdata);

  return xhr;
};

/**
 * Generate a unique callback name.
 *
 * @return a unique callback name.
 */
getCallbackName = function () {
  return '_xhr_callback_' + new Date().getTime() +
      '_' + (++_CALLBACK_SEQUENCE);
};

/**
 * Make a JSONP request.
 *
 * @param options.url {String}
 *      url to load
 * @param options.success {Function}
 *      called with data loaded by script
 * @param options.error {Function} optional
 *      called when script fails to load
 * @param options.done {Function} optional
 *        called when jsonp is complete, after success or error.
 * @param options.data {Object} optional
 *      request parameters to add to url
 *
 * @param options.callbackName {String} optional
 * @param options.callbackParameter {String} optional
 *      default is 'callback'
 */
jsonp = function (options) {
  var data,
      callback,
      url;

  options = Util.extend({}, _DEFAULT_JSONP_OPTIONS, options);
  url = options.url;
  data = Util.extend({}, options.data);
  callback = options.callbackName || getCallbackName();

  // add data and callback to url
  data[options.callbackParameter] = callback;
  url += (url.indexOf('?') === -1 ? '?' : '&') + urlEncode(data);

  // setup global callback called by script
  window[callback] = function () {
    options.success.apply(null, arguments);
  };

  Util.loadScript(url, {
    error: options.error,
    done: function () {
      window[callback] = null;
      delete window[callback];

      if (options.done !== null) {
        options.done();
      }
    }
  });
};

restrictOrigin = function (url) {
  var a,
      restrictedUrl;

  a = document.createElement('a'); // Hack to parse only the pathname
  a.setAttribute('href', url);
  restrictedUrl = a.pathname;

  // Needed for IE, which omits leading slash.
  if ((url.indexOf('http') === 0 || url.indexOf('/') === 0) &&
      restrictedUrl.indexOf('/') !== 0) {
    restrictedUrl = '/' + restrictedUrl;
  }

  return restrictedUrl;
};

/**
 * URL encode an object.
 *
 * @param obj {Object}
 *      object to encode
 *
 * @return {String}
 *      url encoded object
 */
urlEncode = function (obj) {
  var data, key, encodedKey, value, i, len;

  data = [];
  for (key in obj) {
    encodedKey = encodeURIComponent(key);
    value = obj[key];

    if (value instanceof Array) {
      // Add each value in array seperately
      for (i = 0, len = value.length; i < len; i++) {
        data.push(encodedKey + '=' + encodeURIComponent(value[i]));
      }
    } else {
      data.push(encodedKey + '=' + encodeURIComponent(value));
    }
  }
  return data.join('&');
};


// expose the API
module.exports = {
  ajax: ajax,
  getCallbackName: getCallbackName,
  jsonp: jsonp,
  restrictOrigin: restrictOrigin,
  urlEncode: urlEncode,
};
},{"./Util":"util/Util"}],"waveform/WaveformModule":[function(require,module,exports){
'use strict';

var Module = require('core/Module'),
    ScientificSummaryModule = require('scientific/ScientificSummaryModule'),
    Util = require('util/Util'),
    Xhr = require('util/Xhr');

var _DEFAULTS,
    _ID,
    _TITLE,

    _hasContent;


_DEFAULTS = {
  irisServiceUrl: 'https://service.iris.edu/fdsnws/event/1/query',
  irisSpudUrl:'https://www.iris.edu/spud/event/',
  irisWilberUrl:'https://www.iris.edu/wilber3/find_stations/',
  errorMessage: '<p class="alert error">Error finding waveform data</p>'
};
_ID = 'waveform';
_TITLE = 'Waveforms';


_hasContent = function (eventPageModel) {
  var config;

  config = eventPageModel.get('config');
  return config.hasOwnProperty('SCENARIO_MODE') ?
      !config.SCENARIO_MODE : true;
};


/**
 * Waveform module
 *
 * @param options {object}
 *    url options
 */
var WaveformModule = function (options) {
  var _this,
      _initialize,

      _errorMessage,
      _eventId,
      _irisServiceUrl,
      _irisSpudUrl,
      _irisWilberUrl,
      _waveformContentEl;

  options = Util.extend({}, _DEFAULTS, options);
  _this = Module(options);

  _initialize = function () {
    _this.ID = _ID;
    _this.TITLE = _TITLE;

    _errorMessage = options.errorMessage;
    _irisServiceUrl = options.irisServiceUrl;
    _irisSpudUrl = options.irisSpudUrl;
    _irisWilberUrl = options.irisWilberUrl;

    _this.el.classList.add('wave-form');
  };

  _this.destroy = Util.compose(function () {
    _initialize = null;
    _this = null;

    _waveformContentEl = null;
    _irisWilberUrl= null;
    _irisSpudUrl = null;
    _irisServiceUrl = null;
    _eventId = null;
    _errorMessage = null;
  }, _this.destroy);

  /**
   * Gets the data.
   * @param search {object}
   *    Search parameters.
   */
  _this.fetchData = function (search) {
    Xhr.ajax({
      url: _irisServiceUrl,
      data: search,
      success: _this.onSuccess,
      error: _this.onError,
    });
  };

  /**
   * Gets search parameters from the model and creates search object
   */
  _this.getSearch = function () {
    var ev,
        latitude,
        longitude,
        search,
        summary,
        time;

    ev = _this.model.get('event');
    search = null;

    if (ev) {
      summary = ev.getSummary();
      latitude = summary.latitude;
      longitude = summary.longitude;
      time = Number(summary.time.getTime());
      // search parameters
      search = {
        'starttime': new Date(time - 16000).toISOString().replace('Z', ''),
        'endtime': new Date(time + 16000).toISOString().replace('Z', ''),
        'latitude': latitude,
        'longitude': longitude,
        'maxradius': 1,
        'format': 'text'
      };
    }

    return search;
  };

  /**
   * Shows default error message which can be changed.
   */
  _this.onError = function () {
    _this.el.innerHTML = _errorMessage;
  };

  /**
   * onSuccess is called when Xhr is successful and calls eventId if no event
   * is found. If an event is found it calls renderContent.
   * @param data {string}
   *    data in string format.
   */
  _this.onSuccess = function (data) {
    var eventId;

    eventId = _this.parseIrisEventId(data);

    if (!eventId) {
      _this.onError();
      return;
    }

    _this.renderContent(eventId);
  };

  /**
   * Gets eventId from data
   * @param {string}
   *    data in string format.
   */
  _this.parseIrisEventId = function (data) {
    return data.split('\n')[1].split('|')[0];
  };

  /**
   * Called when the model changes
   */
  _this.render = function () {
    var search;

    _this.header.innerHTML = '<h3>Waveforms</h3>' +
        '<a class="back-to-summary-link"' +
        ' href="#' + ScientificSummaryModule.ID + '">Back to ' +
        ScientificSummaryModule.TITLE + '</a>';

    search = _this.getSearch();

    if (search === null) {
      _this.onError();
    } else {
      _this.fetchData(search);
    }
  };

  /**
   * Renders main content and adds urls.
   * @param eventId {string}
   *    The event id parsed from data.
   */
  _this.renderContent = function (eventId) {
    _this.content.innerHTML = [
      '<dl class="iris-products vertical">',
        '<dt>',
          '<a href="', _irisWilberUrl, eventId, '" target="_blank">',
            'IRIS Seismic Waveform Data (Wilber 3)',
          '</a>',
        '</dt>',
        '<dd>',
          'Wilber 3 locates stations in operation at the time of the event,',
          ' allows users to filter stations, preview waveform data, and',
          ' view record section plots. Data can be downloaded in a',
          ' number of formats including <abbr title="Seismic Analysis',
          ' Code">SAC</abbr>, <abbr title="Standard for the Exchange of',
          ' Earthquake Data">SEED</abbr>, miniSEED and ASCII.',
        '</dd>',

        '<dt>',
          '<a href="', _irisSpudUrl, eventId, '" target="_blank">',
            'IRIS Searchable Product Depository (SPUD) Event Page',
          '</a>',
        '</dt>',
        '<dd>',
          'SPUD is the IRIS DMC&rsquo;s primary data product management system.',
          ' Complementing the DMC&rsquo;s SEED and assembled data archives,',
          ' which contain time series recordings, the SPUD system',
          ' primarily contains derivative data products of other types',
          ' (images, movies, etc.) created either at the DMC or by members',
          ' of the community.',
        '</dd>',
      '</dl>'
    ].join('');
  };

  _initialize(options);
  options = null;
  return _this;
};

WaveformModule.ID = _ID;
WaveformModule.TITLE = _TITLE;
WaveformModule.hasContent = _hasContent;

module.exports = WaveformModule;

},{"core/Module":"core/Module","scientific/ScientificSummaryModule":"scientific/ScientificSummaryModule","util/Util":"util/Util","util/Xhr":"util/Xhr"}]},{},[])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
